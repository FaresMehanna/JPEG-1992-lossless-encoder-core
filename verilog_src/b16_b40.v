/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(i_busy, valid_in, data_in, full_rst, rst, valid_out, o_busy, data_out, full_clk);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$61 ;
  wire [7:0] \$63 ;
  wire \$65 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "b16_b40.py:66" *)
  reg \$next\buff_chs ;
  (* src = "b16_b40.py:58" *)
  reg [39:0] \$next\buffer1 ;
  (* src = "b16_b40.py:59" *)
  reg \$next\buffer1_valid ;
  (* src = "b16_b40.py:62" *)
  reg [39:0] \$next\buffer2 ;
  (* src = "b16_b40.py:63" *)
  reg \$next\buffer2_valid ;
  (* src = "clk_domains.py:5" *)
  reg \$next\clk ;
  (* src = "b16_b40.py:38" *)
  reg [39:0] \$next\data_out ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [2:0] \$next\fsm_state ;
  (* src = "b16_b40.py:69" *)
  reg \$next\is_valid ;
  (* src = "b16_b40.py:44" *)
  reg \$next\o_busy ;
  (* src = "b16_b40.py:73" *)
  reg \$next\temp_8 ;
  (* src = "b16_b40.py:42" *)
  reg \$next\valid_out ;
  (* init = 1'h0 *)
  (* src = "b16_b40.py:66" *)
  reg buff_chs = 1'h0;
  (* init = 40'h0000000000 *)
  (* src = "b16_b40.py:58" *)
  reg [39:0] buffer1 = 40'h0000000000;
  (* init = 1'h0 *)
  (* src = "b16_b40.py:59" *)
  reg buffer1_valid = 1'h0;
  (* init = 40'h0000000000 *)
  (* src = "b16_b40.py:62" *)
  reg [39:0] buffer2 = 40'h0000000000;
  (* init = 1'h0 *)
  (* src = "b16_b40.py:63" *)
  reg buffer2_valid = 1'h0;
  (* src = "clk_domains.py:5" *)
  wire clk;
  (* src = "b16_b40.py:35" *)
  input [15:0] data_in;
  (* src = "b16_b40.py:38" *)
  output [39:0] data_out;
  (* init = 3'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [2:0] fsm_state = 3'h0;
  (* src = "clk_domains.py:4" *)
  input full_clk;
  (* src = "clk_domains.py:4" *)
  input full_rst;
  (* src = "b16_b40.py:45" *)
  input i_busy;
  (* src = "b16_b40.py:69" *)
  wire is_valid;
  (* init = 1'h0 *)
  (* src = "b16_b40.py:44" *)
  output o_busy;
  reg o_busy = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "b16_b40.py:73" *)
  reg temp_8 = 1'h0;
  (* src = "b16_b40.py:41" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "b16_b40.py:42" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$9  = buffer1_valid == (* src = "b16_b40.py:82" *) 1'h1;
  assign \$11  = buffer2_valid == (* src = "b16_b40.py:82" *) 1'h1;
  assign \$13  = \$9  | (* src = "b16_b40.py:82" *) \$11 ;
  assign \$15  = is_valid == (* src = "b16_b40.py:82" *) 1'h1;
  assign \$17  = \$13  & (* src = "b16_b40.py:82" *) \$15 ;
  assign \$1  = valid_out == (* src = "b16_b40.py:85" *) 1'h1;
  assign \$19  = valid_out == (* src = "b16_b40.py:85" *) 1'h1;
  assign \$21  = i_busy == (* src = "b16_b40.py:85" *) 1'h0;
  assign \$23  = \$19  & (* src = "b16_b40.py:85" *) \$21 ;
  assign \$25  = buff_chs == (* src = "b16_b40.py:87" *) 1'h0;
  assign \$27  = valid_out == (* src = "b16_b40.py:85" *) 1'h1;
  assign \$29  = i_busy == (* src = "b16_b40.py:85" *) 1'h0;
  assign \$31  = \$27  & (* src = "b16_b40.py:85" *) \$29 ;
  assign \$33  = buff_chs == (* src = "b16_b40.py:88" *) 1'h0;
  assign \$35  = valid_out == (* src = "b16_b40.py:85" *) 1'h1;
  assign \$37  = i_busy == (* src = "b16_b40.py:85" *) 1'h0;
  assign \$3  = i_busy == (* src = "b16_b40.py:85" *) 1'h0;
  assign \$39  = \$35  & (* src = "b16_b40.py:85" *) \$37 ;
  assign \$41  = buff_chs == (* src = "b16_b40.py:90" *) 1'h1;
  assign \$43  = buffer1_valid == (* src = "b16_b40.py:99" *) 1'h0;
  assign \$45  = buffer2_valid == (* src = "b16_b40.py:121" *) 1'h0;
  assign \$47  = buffer2_valid == (* src = "b16_b40.py:136" *) 1'h0;
  assign \$49  = buffer1_valid == (* src = "b16_b40.py:154" *) 1'h0;
  assign \$51  = buffer1_valid == (* src = "b16_b40.py:99" *) 1'h0;
  assign \$53  = buffer2_valid == (* src = "b16_b40.py:121" *) 1'h0;
  assign \$55  = buffer2_valid == (* src = "b16_b40.py:136" *) 1'h0;
  assign \$57  = buffer1_valid == (* src = "b16_b40.py:154" *) 1'h0;
  assign \$5  = \$1  & (* src = "b16_b40.py:85" *) \$3 ;
  assign \$59  = buffer2_valid == (* src = "b16_b40.py:121" *) 1'h0;
  assign \$61  = buffer2_valid == (* src = "b16_b40.py:136" *) 1'h0;
  assign \$63  = + (* src = "b16_b40.py:73" *) temp_8;
  assign \$65  = buffer2_valid == (* src = "b16_b40.py:121" *) 1'h0;
  assign \$7  = buff_chs == (* src = "b16_b40.py:76" *) 1'h0;
  always @(posedge full_clk)
      temp_8 <= \$next\temp_8 ;
  always @(posedge full_clk)
      buffer2 <= \$next\buffer2 ;
  always @(posedge full_clk)
      buffer1 <= \$next\buffer1 ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge full_clk)
      o_busy <= \$next\o_busy ;
  always @(posedge full_clk)
      buffer2_valid <= \$next\buffer2_valid ;
  always @(posedge full_clk)
      buffer1_valid <= \$next\buffer1_valid ;
  always @(posedge full_clk)
      buff_chs <= \$next\buff_chs ;
  always @(posedge full_clk)
      valid_out <= \$next\valid_out ;
  always @* begin
    \$next\clk  = 1'h0;
    \$next\clk  = full_clk;
  end
  always @* begin
    \$next\is_valid  = 1'h0;
    \$next\is_valid  = 1'h1;
    casez (\$5 )
      1'h1:
          \$next\is_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buffer2  = buffer2;
    casez (fsm_state)
      3'h3:
          casez (valid_in)
            1'h1:
                casez (\$59 )
                  1'h1:
                      \$next\buffer2 [39:32] = data_in[7:0];
                endcase
          endcase
      3'h5:
          casez (\$61 )
            1'h1:
                \$next\buffer2 [39:32] = \$63 ;
          endcase
      3'h4:
          casez (valid_in)
            1'h1:
                \$next\buffer2 [31:16] = data_in;
          endcase
      3'h6:
          casez (valid_in)
            1'h1:
                \$next\buffer2 [15:0] = data_in;
          endcase
    endcase
    casez (full_rst)
      1'h1:
          \$next\buffer2  = 40'h0000000000;
    endcase
  end
  always @* begin
    \$next\temp_8  = temp_8;
    casez (fsm_state)
      3'h3:
          casez (valid_in)
            1'h1:
                casez (\$65 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\temp_8  = data_in[0];
                endcase
          endcase
    endcase
    casez (full_rst)
      1'h1:
          \$next\temp_8  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_out  = 40'h0000000000;
    casez (\$7 )
      1'h1:
          \$next\data_out  = buffer1;
      1'hz:
          \$next\data_out  = buffer2;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    \$next\valid_out  = \$17 ;
    casez (full_rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buff_chs  = buff_chs;
    casez (\$23 )
      1'h1:
          \$next\buff_chs  = \$25 ;
    endcase
    casez (full_rst)
      1'h1:
          \$next\buff_chs  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buffer1_valid  = buffer1_valid;
    casez (\$31 )
      1'h1:
          casez (\$33 )
            1'h1:
                \$next\buffer1_valid  = 1'h0;
          endcase
    endcase
    casez (fsm_state)
      3'h3:
          casez (valid_in)
            1'h1:
                \$next\buffer1_valid  = 1'h1;
          endcase
    endcase
    casez (full_rst)
      1'h1:
          \$next\buffer1_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buffer2_valid  = buffer2_valid;
    casez (\$39 )
      1'h1:
          casez (\$41 )
            1'h1:
                \$next\buffer2_valid  = 1'h0;
          endcase
    endcase
    casez (fsm_state)
      3'h6:
          casez (valid_in)
            1'h1:
                \$next\buffer2_valid  = 1'h1;
          endcase
    endcase
    casez (full_rst)
      1'h1:
          \$next\buffer2_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\o_busy  = o_busy;
    casez (fsm_state)
      3'h0:
          casez (\$43 )
            1'h1:
                \$next\o_busy  = 1'h0;
          endcase
      3'h3:
          casez (valid_in)
            1'h1:
                casez (\$45 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\o_busy  = 1'h1;
                endcase
          endcase
      3'h5:
          casez (\$47 )
            1'h1:
                \$next\o_busy  = 1'h0;
          endcase
      3'h6:
          casez (valid_in)
            1'h1:
                casez (\$49 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\o_busy  = 1'h1;
                endcase
          endcase
    endcase
    casez (full_rst)
      1'h1:
          \$next\o_busy  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez (\$51 )
            1'h1:
                \$next\fsm_state  = 3'h1;
          endcase
      3'h1:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 3'h2;
          endcase
      3'h2:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 3'h3;
          endcase
      3'h3:
          casez (valid_in)
            1'h1:
                casez (\$53 )
                  1'h1:
                      \$next\fsm_state  = 3'h4;
                  1'hz:
                      \$next\fsm_state  = 3'h5;
                endcase
          endcase
      3'h5:
          casez (\$55 )
            1'h1:
                \$next\fsm_state  = 3'h4;
          endcase
      3'h4:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 3'h6;
          endcase
      3'h6:
          casez (valid_in)
            1'h1:
                casez (\$57 )
                  1'h1:
                      \$next\fsm_state  = 3'h1;
                  1'hz:
                      \$next\fsm_state  = 3'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 3'h0;
    endcase
  end
  always @* begin
    \$next\buffer1  = buffer1;
    casez (fsm_state)
      3'h1:
          casez (valid_in)
            1'h1:
                \$next\buffer1 [39:24] = data_in;
          endcase
      3'h2:
          casez (valid_in)
            1'h1:
                \$next\buffer1 [23:8] = data_in;
          endcase
      3'h3:
          casez (valid_in)
            1'h1:
                \$next\buffer1 [7:0] = data_in[15:8];
          endcase
    endcase
    casez (full_rst)
      1'h1:
          \$next\buffer1  = 40'h0000000000;
    endcase
  end
  assign data_out = \$next\data_out ;
  assign is_valid = \$next\is_valid ;
  assign clk = \$next\clk ;
endmodule

