/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(close_full, enc_out_ctr, enc_out, out_end, zeros, rst, clk, latch_output, enc_in, enc_in_ctr, in_end, valid_in, valid_out);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire [32:0] \$21 ;
  wire [32:0] \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire [35:0] \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$40 ;
  wire [7:0] \$42 ;
  wire [7:0] \$43 ;
  wire [7:0] \$45 ;
  wire [7:0] \$46 ;
  wire [7:0] \$48 ;
  wire [7:0] \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "./migen_src/converter36.py:36" *)
  reg [31:0] \$next\debug_counter ;
  (* src = "./migen_src/converter36.py:19" *)
  reg [35:0] \$next\enc_in ;
  (* src = "./migen_src/converter36.py:20" *)
  reg [5:0] \$next\enc_in_ctr ;
  (* src = "./migen_src/converter36.py:34" *)
  reg [107:0] \$next\enc_out_latch ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [2:0] \$next\fsm_state ;
  (* src = "./migen_src/converter36.py:21" *)
  reg \$next\in_end ;
  (* src = "./migen_src/converter36.py:12" *)
  reg \$next\latch_output ;
  (* src = "./migen_src/converter36.py:35" *)
  reg \$next\out_end_latch ;
  (* src = "./migen_src/converter36.py:22" *)
  reg \$next\valid_in ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "./migen_src/converter36.py:23" *)
  input close_full;
  (* init = 32'd0 *)
  (* src = "./migen_src/converter36.py:36" *)
  reg [31:0] debug_counter = 32'd0;
  (* init = 36'h000000000 *)
  (* src = "./migen_src/converter36.py:19" *)
  output [35:0] enc_in;
  reg [35:0] enc_in = 36'h000000000;
  (* init = 6'h00 *)
  (* src = "./migen_src/converter36.py:20" *)
  output [5:0] enc_in_ctr;
  reg [5:0] enc_in_ctr = 6'h00;
  (* src = "./migen_src/converter36.py:13" *)
  input [123:0] enc_out;
  (* src = "./migen_src/converter36.py:14" *)
  input [6:0] enc_out_ctr;
  (* init = 108'h000000000000000000000000000 *)
  (* src = "./migen_src/converter36.py:34" *)
  reg [107:0] enc_out_latch = 108'h000000000000000000000000000;
  (* init = 3'h0 *)
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [2:0] fsm_state = 3'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter36.py:21" *)
  output in_end;
  reg in_end = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter36.py:12" *)
  output latch_output;
  reg latch_output = 1'h0;
  (* src = "./migen_src/converter36.py:15" *)
  input out_end;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter36.py:35" *)
  reg out_end_latch = 1'h0;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter36.py:22" *)
  output valid_in;
  reg valid_in = 1'h0;
  (* src = "./migen_src/converter36.py:16" *)
  input valid_out;
  (* src = "./migen_src/converter36.py:38" *)
  input [15:0] zeros;
  assign \$9  = close_full == (* src = "./migen_src/converter36.py:47" *) 1'h0;
  assign \$11  = valid_out & (* src = "./migen_src/converter36.py:47" *) \$9 ;
  assign \$13  = enc_out_ctr <= (* src = "./migen_src/converter36.py:58" *) 6'h24;
  assign \$15  = enc_out_ctr <= (* src = "./migen_src/converter36.py:81" *) 7'h48;
  assign \$17  = enc_out_ctr <= (* src = "./migen_src/converter36.py:87" *) 7'h6c;
  assign \$1  = enc_out_ctr <= (* src = "./migen_src/converter36.py:58" *) 6'h24;
  assign \$19  = enc_out_ctr <= (* src = "./migen_src/converter36.py:93" *) 7'h7f;
  assign \$22  = debug_counter + (* src = "./migen_src/converter36.py:56" *) enc_out_ctr;
  assign \$24  = enc_out_ctr <= (* src = "./migen_src/converter36.py:58" *) 6'h24;
  assign \$26  = enc_out_ctr <= (* src = "./migen_src/converter36.py:81" *) 7'h48;
  assign \$28  = enc_out_ctr <= (* src = "./migen_src/converter36.py:87" *) 7'h6c;
  assign \$30  = enc_out_ctr <= (* src = "./migen_src/converter36.py:93" *) 7'h7f;
  assign \$32  = + (* src = "./migen_src/converter36.py:95" *) { zeros, enc_out[123:108] };
  assign \$34  = enc_out_ctr <= (* src = "./migen_src/converter36.py:58" *) 6'h24;
  assign \$36  = enc_out_ctr <= (* src = "./migen_src/converter36.py:81" *) 7'h48;
  assign \$38  = enc_out_ctr <= (* src = "./migen_src/converter36.py:87" *) 7'h6c;
  assign \$3  = close_full == (* src = "./migen_src/converter36.py:47" *) 1'h0;
  assign \$40  = enc_out_ctr <= (* src = "./migen_src/converter36.py:93" *) 7'h7f;
  assign \$43  = enc_out_ctr - (* src = "./migen_src/converter36.py:84" *) 6'h24;
  assign \$46  = enc_out_ctr - (* src = "./migen_src/converter36.py:90" *) 7'h48;
  assign \$49  = enc_out_ctr - (* src = "./migen_src/converter36.py:96" *) 7'h6c;
  assign \$51  = enc_out_ctr <= (* src = "./migen_src/converter36.py:58" *) 6'h24;
  assign \$53  = enc_out_ctr <= (* src = "./migen_src/converter36.py:58" *) 6'h24;
  assign \$55  = enc_out_ctr <= (* src = "./migen_src/converter36.py:58" *) 6'h24;
  assign \$5  = valid_out & (* src = "./migen_src/converter36.py:47" *) \$3 ;
  assign \$7  = enc_out_ctr <= (* src = "./migen_src/converter36.py:58" *) 6'h24;
  always @(posedge clk)
      out_end_latch <= \$next\out_end_latch ;
  always @(posedge clk)
      enc_out_latch <= \$next\enc_out_latch ;
  always @(posedge clk)
      in_end <= \$next\in_end ;
  always @(posedge clk)
      enc_in_ctr <= \$next\enc_in_ctr ;
  always @(posedge clk)
      enc_in <= \$next\enc_in ;
  always @(posedge clk)
      debug_counter <= \$next\debug_counter ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      latch_output <= \$next\latch_output ;
  always @(posedge clk)
      valid_in <= \$next\valid_in ;
  always @* begin
    \$next\valid_in  = valid_in;
    casez (fsm_state)
      3'h0:
          \$next\valid_in  = 1'h0;
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$1 )
                  1'h1:
                      \$next\valid_in  = 1'h1;
                  1'hz:
                      \$next\valid_in  = 1'h1;
                endcase
            1'hz:
                \$next\valid_in  = 1'h0;
          endcase
      3'h2:
          \$next\valid_in  = 1'h1;
      3'h3:
          \$next\valid_in  = 1'h1;
      3'h4:
          \$next\valid_in  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_in  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_output  = latch_output;
    casez (fsm_state)
      3'h0:
        begin
          \$next\latch_output  = 1'h0;
          casez (\$5 )
            1'h1:
                \$next\latch_output  = 1'h1;
          endcase
        end
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$7 )
                  1'h1:
                      casez (close_full)
                        1'h1:
                            \$next\latch_output  = 1'h0;
                      endcase
                  1'hz:
                      \$next\latch_output  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\latch_output  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez (\$11 )
            1'h1:
                \$next\fsm_state  = 3'h1;
          endcase
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$13 )
                  1'h1:
                      casez (close_full)
                        1'h1:
                            \$next\fsm_state  = 3'h0;
                      endcase
                  1'hz:
                      casez ({ \$19 , \$17 , \$15  })
                        3'bzz1:
                            \$next\fsm_state  = 3'h2;
                        3'bz1z:
                            \$next\fsm_state  = 3'h3;
                        3'b1zz:
                            \$next\fsm_state  = 3'h4;
                      endcase
                endcase
          endcase
      3'h2:
          \$next\fsm_state  = 3'h0;
      3'h3:
          \$next\fsm_state  = 3'h2;
      3'h4:
          \$next\fsm_state  = 3'h3;
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 3'h0;
    endcase
  end
  always @* begin
    \$next\debug_counter  = debug_counter;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                \$next\debug_counter  = \$21 [31:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\debug_counter  = 32'd0;
    endcase
  end
  always @* begin
    \$next\enc_in  = enc_in;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$24 )
                  1'h1:
                      \$next\enc_in  = enc_out[35:0];
                  1'hz:
                      casez ({ \$30 , \$28 , \$26  })
                        3'bzz1:
                            \$next\enc_in  = enc_out[71:36];
                        3'bz1z:
                            \$next\enc_in  = enc_out[107:72];
                        3'b1zz:
                            \$next\enc_in  = \$32 ;
                      endcase
                endcase
          endcase
      3'h2:
          \$next\enc_in  = enc_out_latch[35:0];
      3'h3:
          \$next\enc_in  = enc_out_latch[71:36];
      3'h4:
          \$next\enc_in  = enc_out_latch[107:72];
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in  = 36'h000000000;
    endcase
  end
  always @* begin
    \$next\enc_in_ctr  = enc_in_ctr;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$34 )
                  1'h1:
                      \$next\enc_in_ctr  = enc_out_ctr[5:0];
                  1'hz:
                    begin
                      \$next\enc_in_ctr  = 6'h24;
                      casez ({ \$40 , \$38 , \$36  })
                        3'bzz1:
                            \$next\enc_in_ctr  = \$42 [5:0];
                        3'bz1z:
                            \$next\enc_in_ctr  = \$45 [5:0];
                        3'b1zz:
                            \$next\enc_in_ctr  = \$48 [5:0];
                      endcase
                    end
                endcase
          endcase
      3'h2:
          \$next\enc_in_ctr  = 6'h24;
      3'h3:
          \$next\enc_in_ctr  = 6'h24;
      3'h4:
          \$next\enc_in_ctr  = 6'h24;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_ctr  = 6'h00;
    endcase
  end
  always @* begin
    \$next\in_end  = in_end;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$51 )
                  1'h1:
                      \$next\in_end  = out_end;
                  1'hz:
                      \$next\in_end  = 1'h0;
                endcase
          endcase
      3'h2:
          \$next\in_end  = out_end_latch;
      3'h3:
          \$next\in_end  = 1'h0;
      3'h4:
          \$next\in_end  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\in_end  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_out_latch  = enc_out_latch;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$53 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\enc_out_latch  = enc_out[107:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out_latch  = 108'h000000000000000000000000000;
    endcase
  end
  always @* begin
    \$next\out_end_latch  = out_end_latch;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$55 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\out_end_latch  = out_end;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\out_end_latch  = 1'h0;
    endcase
  end
  assign \$21  = \$22 ;
  assign \$42  = \$43 ;
  assign \$45  = \$46 ;
  assign \$48  = \$49 ;
endmodule

