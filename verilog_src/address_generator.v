/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(address_latch, rst, clk, address_o, address_valid, starting_address);
  wire [32:0] \$1 ;
  wire [32:0] \$2 ;
  wire [32:0] \$4 ;
  wire [32:0] \$5 ;
  (* src = "address_generator.py:35" *)
  reg [31:0] \$next\address_o ;
  (* src = "address_generator.py:36" *)
  reg \$next\address_valid ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg \$next\fsm_state ;
  (* src = "address_generator.py:37" *)
  input address_latch;
  (* init = 32'd0 *)
  (* src = "address_generator.py:35" *)
  output [31:0] address_o;
  reg [31:0] address_o = 32'd0;
  (* init = 1'h0 *)
  (* src = "address_generator.py:36" *)
  output address_valid;
  reg address_valid = 1'h0;
  (* src = "nmigen/hdl/ir.py:329" *)
  input clk;
  (* init = 1'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg fsm_state = 1'h0;
  (* src = "nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "address_generator.py:39" *)
  input [31:0] starting_address;
  assign \$2  = address_o + (* src = "address_generator.py:58" *) 5'h10;
  assign \$5  = address_o + (* src = "address_generator.py:64" *) 5'h10;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      address_valid <= \$next\address_valid ;
  always @(posedge clk)
      address_o <= \$next\address_o ;
  always @* begin
    \$next\address_o  = address_o;
    casez (fsm_state)
      1'h0:
        begin
          \$next\address_o  = starting_address;
          casez (address_latch)
            1'h1:
                \$next\address_o  = \$1 [31:0];
          endcase
        end
      1'h1:
          casez (address_latch)
            1'h1:
                \$next\address_o  = \$4 [31:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\address_o  = 32'd0;
    endcase
  end
  always @* begin
    \$next\address_valid  = address_valid;
    casez (fsm_state)
      1'h0:
          \$next\address_valid  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\address_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      1'h0:
          casez (address_latch)
            1'h1:
                \$next\fsm_state  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 1'h0;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
endmodule

