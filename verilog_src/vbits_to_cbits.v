/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top.input_handler" *)
(* generator = "nMigen" *)
module input_handler(valid_in, enc_in, enc_in_ctr, in_end, rst, clk, latch_input, buffer, end_out, new_buff_consum, buff_consum, dec_buff);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire [206:0] \$27 ;
  wire [206:0] \$28 ;
  wire \$3 ;
  wire [206:0] \$30 ;
  wire \$32 ;
  wire [206:0] \$34 ;
  wire [206:0] \$35 ;
  wire [206:0] \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire [9:0] \$43 ;
  wire [8:0] \$44 ;
  wire [9:0] \$46 ;
  wire [8:0] \$48 ;
  wire [8:0] \$49 ;
  wire \$5 ;
  wire [8:0] \$51 ;
  wire [8:0] \$52 ;
  wire \$54 ;
  wire [9:0] \$56 ;
  wire [8:0] \$57 ;
  wire [9:0] \$59 ;
  wire [8:0] \$61 ;
  wire [8:0] \$62 ;
  wire [8:0] \$64 ;
  wire [8:0] \$65 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "./migen_src/vbits_to_cbits.py:171" *)
  reg \$next\buff_change ;
  (* src = "./migen_src/vbits_to_cbits.py:146" *)
  reg [7:0] \$next\buff_consum ;
  (* src = "./migen_src/vbits_to_cbits.py:166" *)
  reg [7:0] \$next\buff_free ;
  (* src = "./migen_src/vbits_to_cbits.py:192" *)
  reg \$next\buff_reg ;
  (* src = "./migen_src/vbits_to_cbits.py:145" *)
  reg [143:0] \$next\buffer ;
  (* src = "./migen_src/vbits_to_cbits.py:186" *)
  reg [47:0] \$next\enc_in_buff ;
  (* src = "./migen_src/vbits_to_cbits.py:187" *)
  reg [5:0] \$next\enc_in_ctr_buff ;
  (* src = "./migen_src/vbits_to_cbits.py:181" *)
  reg [5:0] \$next\enc_in_ctr_reg ;
  (* src = "./migen_src/vbits_to_cbits.py:180" *)
  reg [47:0] \$next\enc_in_reg ;
  (* src = "./migen_src/vbits_to_cbits.py:153" *)
  reg \$next\end_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "./migen_src/vbits_to_cbits.py:188" *)
  reg \$next\in_end_buff ;
  (* src = "./migen_src/vbits_to_cbits.py:182" *)
  reg \$next\in_end_reg ;
  (* src = "./migen_src/vbits_to_cbits.py:170" *)
  reg \$next\inc_buff ;
  (* src = "./migen_src/vbits_to_cbits.py:138" *)
  reg \$next\latch_input ;
  (* src = "./migen_src/vbits_to_cbits.py:147" *)
  reg [7:0] \$next\new_buff_consum ;
  (* src = "./migen_src/vbits_to_cbits.py:167" *)
  reg [7:0] \$next\new_buff_free ;
  (* src = "./migen_src/vbits_to_cbits.py:165" *)
  reg \$next\start ;
  (* src = "./migen_src/vbits_to_cbits.py:189" *)
  reg \$next\valid_in_buff ;
  (* src = "./migen_src/vbits_to_cbits.py:176" *)
  reg \$next\valid_in_late ;
  (* src = "./migen_src/vbits_to_cbits.py:183" *)
  reg \$next\valid_in_reg ;
  (* src = "./migen_src/vbits_to_cbits.py:171" *)
  wire buff_change;
  (* init = 8'h00 *)
  (* src = "./migen_src/vbits_to_cbits.py:146" *)
  output [7:0] buff_consum;
  reg [7:0] buff_consum = 8'h00;
  (* init = 8'h00 *)
  (* src = "./migen_src/vbits_to_cbits.py:166" *)
  reg [7:0] buff_free = 8'h00;
  (* src = "./migen_src/vbits_to_cbits.py:192" *)
  wire buff_reg;
  (* init = 144'h000000000000000000000000000000000000 *)
  (* src = "./migen_src/vbits_to_cbits.py:145" *)
  output [143:0] buffer;
  reg [143:0] buffer = 144'h000000000000000000000000000000000000;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "./migen_src/vbits_to_cbits.py:150" *)
  input dec_buff;
  (* src = "./migen_src/vbits_to_cbits.py:139" *)
  input [47:0] enc_in;
  (* init = 48'h000000000000 *)
  (* src = "./migen_src/vbits_to_cbits.py:186" *)
  reg [47:0] enc_in_buff = 48'h000000000000;
  (* src = "./migen_src/vbits_to_cbits.py:140" *)
  input [5:0] enc_in_ctr;
  (* init = 6'h00 *)
  (* src = "./migen_src/vbits_to_cbits.py:187" *)
  reg [5:0] enc_in_ctr_buff = 6'h00;
  (* init = 6'h00 *)
  (* src = "./migen_src/vbits_to_cbits.py:181" *)
  reg [5:0] enc_in_ctr_reg = 6'h00;
  (* init = 48'h000000000000 *)
  (* src = "./migen_src/vbits_to_cbits.py:180" *)
  reg [47:0] enc_in_reg = 48'h000000000000;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:153" *)
  output end_out;
  reg end_out = 1'h0;
  (* init = 2'h0 *)
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "./migen_src/vbits_to_cbits.py:141" *)
  input in_end;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:188" *)
  reg in_end_buff = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:182" *)
  reg in_end_reg = 1'h0;
  (* src = "./migen_src/vbits_to_cbits.py:170" *)
  wire inc_buff;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:138" *)
  output latch_input;
  reg latch_input = 1'h0;
  (* src = "./migen_src/vbits_to_cbits.py:147" *)
  output [7:0] new_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:167" *)
  wire [7:0] new_buff_free;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:165" *)
  reg start = 1'h0;
  (* src = "./migen_src/vbits_to_cbits.py:142" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:189" *)
  reg valid_in_buff = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:176" *)
  reg valid_in_late = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:183" *)
  reg valid_in_reg = 1'h0;
  assign \$9  = enc_in_ctr_buff <= (* src = "./migen_src/vbits_to_cbits.py:243" *) buff_free;
  assign \$11  = enc_in_ctr_buff <= (* src = "./migen_src/vbits_to_cbits.py:243" *) buff_free;
  assign \$13  = enc_in_ctr_buff <= (* src = "./migen_src/vbits_to_cbits.py:243" *) buff_free;
  assign \$15  = enc_in_ctr_buff <= (* src = "./migen_src/vbits_to_cbits.py:243" *) buff_free;
  assign \$17  = enc_in_ctr_buff <= (* src = "./migen_src/vbits_to_cbits.py:243" *) buff_free;
  assign \$1  = enc_in_ctr_reg <= (* src = "./migen_src/vbits_to_cbits.py:281" *) buff_free;
  assign \$19  = enc_in_ctr_buff <= (* src = "./migen_src/vbits_to_cbits.py:243" *) buff_free;
  assign \$21  = enc_in_ctr_buff <= (* src = "./migen_src/vbits_to_cbits.py:243" *) buff_free;
  assign \$23  = enc_in_ctr_reg <= (* src = "./migen_src/vbits_to_cbits.py:281" *) buff_free;
  assign \$25  = enc_in_ctr_reg <= (* src = "./migen_src/vbits_to_cbits.py:281" *) buff_free;
  assign \$28  = buffer <<< (* src = "./migen_src/vbits_to_cbits.py:206" *) enc_in_ctr_reg;
  assign \$30  = \$28  | (* src = "./migen_src/vbits_to_cbits.py:206" *) enc_in_reg;
  assign \$32  = enc_in_ctr_reg <= (* src = "./migen_src/vbits_to_cbits.py:281" *) buff_free;
  assign \$35  = buffer <<< (* src = "./migen_src/vbits_to_cbits.py:206" *) enc_in_ctr_reg;
  assign \$37  = \$35  | (* src = "./migen_src/vbits_to_cbits.py:206" *) enc_in_reg;
  assign \$3  = inc_buff | (* src = "./migen_src/vbits_to_cbits.py:173" *) dec_buff;
  assign \$39  = enc_in_ctr_reg <= (* src = "./migen_src/vbits_to_cbits.py:281" *) buff_free;
  assign \$41  = inc_buff & (* src = "./migen_src/vbits_to_cbits.py:289" *) dec_buff;
  assign \$44  = buff_free + (* src = "./migen_src/vbits_to_cbits.py:290" *) 6'h20;
  assign \$46  = \$44  - (* src = "./migen_src/vbits_to_cbits.py:290" *) enc_in_ctr_reg;
  assign \$49  = buff_free + (* src = "./migen_src/vbits_to_cbits.py:293" *) 6'h20;
  assign \$52  = buff_free - (* src = "./migen_src/vbits_to_cbits.py:295" *) enc_in_ctr_reg;
  assign \$54  = inc_buff & (* src = "./migen_src/vbits_to_cbits.py:298" *) dec_buff;
  assign \$57  = buff_consum - (* src = "./migen_src/vbits_to_cbits.py:299" *) 6'h20;
  assign \$5  = start == (* src = "./migen_src/vbits_to_cbits.py:232" *) 1'h0;
  assign \$59  = \$57  + (* src = "./migen_src/vbits_to_cbits.py:299" *) enc_in_ctr_reg;
  assign \$62  = buff_consum - (* src = "./migen_src/vbits_to_cbits.py:302" *) 6'h20;
  assign \$65  = buff_consum + (* src = "./migen_src/vbits_to_cbits.py:304" *) enc_in_ctr_reg;
  assign \$7  = start == (* src = "./migen_src/vbits_to_cbits.py:232" *) 1'h0;
  always @(posedge clk)
      latch_input <= \$next\latch_input ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      in_end_reg <= \$next\in_end_reg ;
  always @(posedge clk)
      enc_in_ctr_reg <= \$next\enc_in_ctr_reg ;
  always @(posedge clk)
      enc_in_reg <= \$next\enc_in_reg ;
  always @(posedge clk)
      in_end_buff <= \$next\in_end_buff ;
  always @(posedge clk)
      enc_in_ctr_buff <= \$next\enc_in_ctr_buff ;
  always @(posedge clk)
      enc_in_buff <= \$next\enc_in_buff ;
  always @(posedge clk)
      start <= \$next\start ;
  always @(posedge clk)
      buff_free <= \$next\buff_free ;
  always @(posedge clk)
      valid_in_late <= \$next\valid_in_late ;
  always @(posedge clk)
      buff_consum <= \$next\buff_consum ;
  always @(posedge clk)
      valid_in_reg <= \$next\valid_in_reg ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      buffer <= \$next\buffer ;
  always @(posedge clk)
      valid_in_buff <= \$next\valid_in_buff ;
  always @* begin
    \$next\inc_buff  = 1'h0;
    \$next\inc_buff  = 1'h0;
    casez (fsm_state)
      2'h1:
          \$next\inc_buff  = 1'h1;
      2'h2:
          casez (valid_in_reg)
            1'h1:
                casez (\$1 )
                  1'h1:
                      \$next\inc_buff  = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    \$next\buff_change  = 1'h0;
    \$next\buff_change  = \$3 ;
  end
  always @* begin
    \$next\enc_in_ctr_reg  = enc_in_ctr_reg;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$17 )
                  1'h1:
                      \$next\enc_in_ctr_reg  = enc_in_ctr_buff;
                endcase
          endcase
      2'h1:
          \$next\enc_in_ctr_reg  = enc_in_ctr_buff;
      2'h3:
          \$next\enc_in_ctr_reg  = enc_in_ctr;
      2'h2:
          \$next\enc_in_ctr_reg  = enc_in_ctr;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_ctr_reg  = 6'h00;
    endcase
  end
  always @* begin
    \$next\in_end_reg  = in_end_reg;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$19 )
                  1'h1:
                      \$next\in_end_reg  = in_end_buff;
                endcase
          endcase
      2'h1:
          \$next\in_end_reg  = in_end_buff;
      2'h3:
          \$next\in_end_reg  = in_end;
      2'h2:
          \$next\in_end_reg  = in_end;
    endcase
    casez (rst)
      1'h1:
          \$next\in_end_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$21 )
                  1'h1:
                      \$next\fsm_state  = 2'h1;
                endcase
            2'b1z:
                \$next\fsm_state  = 2'h2;
            2'hz:
                \$next\fsm_state  = 2'h3;
          endcase
      2'h1:
          casez (valid_in_reg)
            1'h1:
                \$next\fsm_state  = 2'h2;
            1'hz:
                \$next\fsm_state  = 2'h3;
          endcase
      2'h3:
          \$next\fsm_state  = 2'h2;
      2'h2:
          casez (valid_in_reg)
            1'h1:
                casez (\$23 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\fsm_state  = 2'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\latch_input  = latch_input;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                /* empty */;
            2'b1z:
                \$next\latch_input  = 1'h1;
            2'hz:
                \$next\latch_input  = 1'h1;
          endcase
      2'h1:
          casez (valid_in_reg)
            1'h1:
                \$next\latch_input  = 1'h1;
            1'hz:
                \$next\latch_input  = 1'h1;
          endcase
      2'h2:
          casez (valid_in_reg)
            1'h1:
                casez (\$25 )
                  1'h1:
                      \$next\latch_input  = 1'h1;
                  1'hz:
                      \$next\latch_input  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\latch_input  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_in_buff  = valid_in_buff;
    casez (fsm_state)
      2'h1:
          \$next\valid_in_buff  = 1'h0;
      2'h2:
          \$next\valid_in_buff  = valid_in_reg;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_in_buff  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buffer  = buffer;
    casez (fsm_state)
      2'h1:
          \$next\buffer  = \$27 [143:0];
      2'h2:
          casez (valid_in_reg)
            1'h1:
                casez (\$32 )
                  1'h1:
                      \$next\buffer  = \$34 [143:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buffer  = 144'h000000000000000000000000000000000000;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    casez (fsm_state)
      2'h1:
          \$next\end_out  = in_end_reg;
      2'h2:
          casez (valid_in_reg)
            1'h1:
                casez (\$39 )
                  1'h1:
                      \$next\end_out  = in_end_reg;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_in_reg  = valid_in_reg;
    casez (fsm_state)
      2'h3:
          \$next\valid_in_reg  = valid_in;
      2'h2:
          \$next\valid_in_reg  = valid_in;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_in_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\new_buff_free  = 8'h00;
    casez (\$41 )
      1'h1:
          \$next\new_buff_free  = \$43 [7:0];
      1'hz:
          casez ({ inc_buff, dec_buff })
            2'bz1:
                \$next\new_buff_free  = \$48 [7:0];
            2'b1z:
                \$next\new_buff_free  = \$51 [7:0];
          endcase
    endcase
  end
  always @* begin
    \$next\new_buff_consum  = 8'h00;
    casez (\$54 )
      1'h1:
          \$next\new_buff_consum  = \$56 [7:0];
      1'hz:
          casez ({ inc_buff, dec_buff })
            2'bz1:
                \$next\new_buff_consum  = \$61 [7:0];
            2'b1z:
                \$next\new_buff_consum  = \$64 [7:0];
          endcase
    endcase
  end
  always @* begin
    \$next\valid_in_late  = valid_in_late;
    \$next\valid_in_late  = valid_in;
    casez (rst)
      1'h1:
          \$next\valid_in_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buff_consum  = buff_consum;
    casez (buff_change)
      1'h1:
          \$next\buff_consum  = new_buff_consum;
    endcase
    casez (rst)
      1'h1:
          \$next\buff_consum  = 8'h00;
    endcase
  end
  always @* begin
    \$next\buff_reg  = 1'h0;
    \$next\buff_reg  = 1'h0;
    casez (fsm_state)
      2'h3:
          \$next\buff_reg  = 1'h1;
      2'h2:
          \$next\buff_reg  = 1'h1;
    endcase
  end
  always @* begin
    \$next\buff_free  = buff_free;
    casez (\$5 )
      1'h1:
          \$next\buff_free  = 8'h90;
    endcase
    casez (buff_change)
      1'h1:
          \$next\buff_free  = new_buff_free;
    endcase
    casez (rst)
      1'h1:
          \$next\buff_free  = 8'h00;
    endcase
  end
  always @* begin
    \$next\start  = start;
    casez (\$7 )
      1'h1:
          \$next\start  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\start  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_in_buff  = enc_in_buff;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$9 )
                  1'h1:
                      \$next\enc_in_buff  = enc_in_reg;
                endcase
          endcase
      2'h1:
          \$next\enc_in_buff  = enc_in_reg;
      2'h2:
          \$next\enc_in_buff  = enc_in_reg;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_buff  = 48'h000000000000;
    endcase
  end
  always @* begin
    \$next\enc_in_ctr_buff  = enc_in_ctr_buff;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$11 )
                  1'h1:
                      \$next\enc_in_ctr_buff  = enc_in_ctr_reg;
                endcase
          endcase
      2'h1:
          \$next\enc_in_ctr_buff  = enc_in_ctr_reg;
      2'h2:
          \$next\enc_in_ctr_buff  = enc_in_ctr_reg;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_ctr_buff  = 6'h00;
    endcase
  end
  always @* begin
    \$next\in_end_buff  = in_end_buff;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$13 )
                  1'h1:
                      \$next\in_end_buff  = in_end_reg;
                endcase
          endcase
      2'h1:
          \$next\in_end_buff  = in_end_reg;
      2'h2:
          \$next\in_end_buff  = in_end_reg;
    endcase
    casez (rst)
      1'h1:
          \$next\in_end_buff  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_in_reg  = enc_in_reg;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$15 )
                  1'h1:
                      \$next\enc_in_reg  = enc_in_buff;
                endcase
          endcase
      2'h1:
          \$next\enc_in_reg  = enc_in_buff;
      2'h3:
          \$next\enc_in_reg  = enc_in;
      2'h2:
          \$next\enc_in_reg  = enc_in;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_reg  = 48'h000000000000;
    endcase
  end
  assign \$27  = \$30 ;
  assign \$34  = \$37 ;
  assign \$43  = \$46 ;
  assign \$48  = \$49 ;
  assign \$51  = \$52 ;
  assign \$56  = \$59 ;
  assign \$61  = \$62 ;
  assign \$64  = \$65 ;
  assign new_buff_consum = \$next\new_buff_consum ;
  assign new_buff_free = \$next\new_buff_free ;
  assign buff_reg = \$next\buff_reg ;
  assign buff_change = \$next\buff_change ;
  assign inc_buff = \$next\inc_buff ;
endmodule

(* \nmigen.hierarchy  = "top.output_handler" *)
(* generator = "nMigen" *)
module output_handler(end_in, buffer, busy_in, rst, clk, dec_buff_out, data_out, end_out, valid_out, buff_consum);
  wire [8:0] \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire [8:0] \$2 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire [143:0] \$39 ;
  wire [8:0] \$4 ;
  wire [143:0] \$40 ;
  wire [174:0] \$42 ;
  wire [174:0] \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire [8:0] \$5 ;
  wire [143:0] \$51 ;
  wire [143:0] \$52 ;
  wire [174:0] \$54 ;
  wire [174:0] \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$9 ;
  (* src = "./migen_src/vbits_to_cbits.py:84" *)
  reg \$next\buff_consum_greater_eq ;
  (* src = "./migen_src/vbits_to_cbits.py:83" *)
  reg \$next\buff_consum_less_eq ;
  (* src = "./migen_src/vbits_to_cbits.py:52" *)
  reg [31:0] \$next\data_out ;
  (* src = "./migen_src/vbits_to_cbits.py:63" *)
  reg \$next\dec_buff_out ;
  (* src = "./migen_src/vbits_to_cbits.py:54" *)
  reg \$next\end_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "./migen_src/vbits_to_cbits.py:75" *)
  reg [4:0] \$next\shift_left ;
  (* src = "./migen_src/vbits_to_cbits.py:74" *)
  reg [6:0] \$next\shift_right ;
  (* src = "./migen_src/vbits_to_cbits.py:53" *)
  reg \$next\valid_out ;
  (* src = "./migen_src/vbits_to_cbits.py:59" *)
  input [7:0] buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:84" *)
  wire buff_consum_greater_eq;
  (* src = "./migen_src/vbits_to_cbits.py:83" *)
  wire buff_consum_less_eq;
  (* src = "./migen_src/vbits_to_cbits.py:58" *)
  input [143:0] buffer;
  (* src = "./migen_src/vbits_to_cbits.py:55" *)
  input busy_in;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* init = 32'd0 *)
  (* src = "./migen_src/vbits_to_cbits.py:52" *)
  output [31:0] data_out;
  reg [31:0] data_out = 32'd0;
  (* src = "./migen_src/vbits_to_cbits.py:63" *)
  output dec_buff_out;
  (* src = "./migen_src/vbits_to_cbits.py:66" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:54" *)
  output end_out;
  reg end_out = 1'h0;
  (* init = 2'h0 *)
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/vbits_to_cbits.py:75" *)
  wire [4:0] shift_left;
  (* src = "./migen_src/vbits_to_cbits.py:74" *)
  wire [6:0] shift_right;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:53" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$9  = buff_consum_greater_eq | (* src = "./migen_src/vbits_to_cbits.py:108" *) \$7 ;
  assign \$11  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:114" *) 1'h0;
  assign \$13  = \$11  & (* src = "./migen_src/vbits_to_cbits.py:114" *) buff_consum_greater_eq;
  assign \$15  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:117" *) 1'h0;
  assign \$17  = buff_consum >= (* src = "./migen_src/vbits_to_cbits.py:87" *) 6'h20;
  assign \$19  = buff_consum <= (* src = "./migen_src/vbits_to_cbits.py:88" *) 6'h20;
  assign \$21  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:108" *) end_in;
  assign \$23  = buff_consum_greater_eq | (* src = "./migen_src/vbits_to_cbits.py:108" *) \$21 ;
  assign \$25  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:97" *) end_in;
  assign \$27  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:114" *) 1'h0;
  assign \$2  = buff_consum - (* src = "./migen_src/vbits_to_cbits.py:76" *) 6'h20;
  assign \$29  = \$27  & (* src = "./migen_src/vbits_to_cbits.py:114" *) buff_consum_greater_eq;
  assign \$31  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:117" *) 1'h0;
  assign \$33  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:97" *) end_in;
  assign \$35  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:108" *) end_in;
  assign \$37  = buff_consum_greater_eq | (* src = "./migen_src/vbits_to_cbits.py:108" *) \$35 ;
  assign \$40  = buffer >>> (* src = "./migen_src/vbits_to_cbits.py:93" *) shift_right;
  assign \$43  = buffer <<< (* src = "./migen_src/vbits_to_cbits.py:95" *) shift_left;
  assign \$45  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:114" *) 1'h0;
  assign \$47  = \$45  & (* src = "./migen_src/vbits_to_cbits.py:114" *) buff_consum_greater_eq;
  assign \$49  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:117" *) 1'h0;
  assign \$52  = buffer >>> (* src = "./migen_src/vbits_to_cbits.py:93" *) shift_right;
  assign \$55  = buffer <<< (* src = "./migen_src/vbits_to_cbits.py:95" *) shift_left;
  assign \$57  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:108" *) end_in;
  assign \$5  = 6'h20 - (* src = "./migen_src/vbits_to_cbits.py:77" *) buff_consum;
  assign \$59  = buff_consum_greater_eq | (* src = "./migen_src/vbits_to_cbits.py:108" *) \$57 ;
  assign \$61  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:97" *) end_in;
  assign \$63  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:114" *) 1'h0;
  assign \$65  = \$63  & (* src = "./migen_src/vbits_to_cbits.py:114" *) buff_consum_greater_eq;
  assign \$67  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:117" *) 1'h0;
  assign \$69  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:97" *) end_in;
  assign \$71  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:108" *) end_in;
  assign \$73  = buff_consum_greater_eq | (* src = "./migen_src/vbits_to_cbits.py:108" *) \$71 ;
  assign \$75  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:114" *) 1'h0;
  assign \$77  = \$75  & (* src = "./migen_src/vbits_to_cbits.py:114" *) buff_consum_greater_eq;
  assign \$7  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:108" *) end_in;
  assign \$79  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:117" *) 1'h0;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      data_out <= \$next\data_out ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @* begin
    \$next\shift_right  = 7'h00;
    \$next\shift_right  = \$1 [6:0];
  end
  always @* begin
    \$next\shift_left  = 5'h00;
    \$next\shift_left  = \$4 [4:0];
  end
  always @* begin
    \$next\dec_buff_out  = 1'h0;
    \$next\dec_buff_out  = 1'h0;
    casez (fsm_state)
      2'h0:
          casez (\$9 )
            1'h1:
                \$next\dec_buff_out  = 1'h1;
          endcase
      2'h1:
          casez ({ \$15 , \$13  })
            2'bz1:
                \$next\dec_buff_out  = 1'h1;
          endcase
    endcase
  end
  always @* begin
    \$next\buff_consum_greater_eq  = 1'h0;
    \$next\buff_consum_greater_eq  = \$17 ;
  end
  always @* begin
    \$next\buff_consum_less_eq  = 1'h0;
    \$next\buff_consum_less_eq  = \$19 ;
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez (\$23 )
            1'h1:
              begin
                \$next\fsm_state  = 2'h1;
                casez (\$25 )
                  1'h1:
                      \$next\fsm_state  = 2'h2;
                endcase
              end
          endcase
      2'h1:
          casez ({ \$31 , \$29  })
            2'bz1:
                casez (\$33 )
                  1'h1:
                      \$next\fsm_state  = 2'h2;
                endcase
            2'b1z:
                \$next\fsm_state  = 2'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\data_out  = data_out;
    casez (fsm_state)
      2'h0:
          casez (\$37 )
            1'h1:
                casez (buff_consum_greater_eq)
                  1'h1:
                      \$next\data_out  = \$39 [31:0];
                  1'hz:
                      \$next\data_out  = \$42 [31:0];
                endcase
          endcase
      2'h1:
          casez ({ \$49 , \$47  })
            2'bz1:
                casez (buff_consum_greater_eq)
                  1'h1:
                      \$next\data_out  = \$51 [31:0];
                  1'hz:
                      \$next\data_out  = \$54 [31:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data_out  = 32'd0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    casez (fsm_state)
      2'h0:
          casez (\$59 )
            1'h1:
                casez (\$61 )
                  1'h1:
                      \$next\end_out  = 1'h1;
                endcase
          endcase
      2'h1:
          casez ({ \$67 , \$65  })
            2'bz1:
                casez (\$69 )
                  1'h1:
                      \$next\end_out  = 1'h1;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    casez (fsm_state)
      2'h0:
          casez (\$73 )
            1'h1:
                \$next\valid_out  = 1'h1;
          endcase
      2'h1:
          casez ({ \$79 , \$77  })
            2'bz1:
                \$next\valid_out  = 1'h1;
            2'b1z:
                \$next\valid_out  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
  assign \$39  = \$40 ;
  assign \$42  = \$43 ;
  assign \$51  = \$52 ;
  assign \$54  = \$55 ;
  assign buff_consum_less_eq = \$next\buff_consum_less_eq ;
  assign buff_consum_greater_eq = \$next\buff_consum_greater_eq ;
  assign dec_buff_out = \$next\dec_buff_out ;
  assign shift_left = \$next\shift_left ;
  assign shift_right = \$next\shift_right ;
endmodule

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(enc_in_ctr, in_end, valid_in, busy_in, rst, clk, data_out, valid_out, latch_input, end_out, enc_in);
  (* src = "./migen_src/vbits_to_cbits.py:332" *)
  reg [31:0] \$next\data_out ;
  (* src = "./migen_src/vbits_to_cbits.py:334" *)
  reg \$next\end_out ;
  (* src = "./migen_src/vbits_to_cbits.py:150" *)
  reg \$next\input_handler_dec_buff ;
  (* src = "./migen_src/vbits_to_cbits.py:139" *)
  reg [47:0] \$next\input_handler_enc_in ;
  (* src = "./migen_src/vbits_to_cbits.py:140" *)
  reg [5:0] \$next\input_handler_enc_in_ctr ;
  (* src = "./migen_src/vbits_to_cbits.py:141" *)
  reg \$next\input_handler_in_end ;
  (* src = "./migen_src/vbits_to_cbits.py:142" *)
  reg \$next\input_handler_valid_in ;
  (* src = "./migen_src/vbits_to_cbits.py:326" *)
  reg \$next\latch_input ;
  (* src = "./migen_src/vbits_to_cbits.py:60" *)
  reg [7:0] \$next\new_buff_consum ;
  (* src = "./migen_src/vbits_to_cbits.py:59" *)
  reg [7:0] \$next\output_handler_buff_consum ;
  (* src = "./migen_src/vbits_to_cbits.py:58" *)
  reg [143:0] \$next\output_handler_buffer ;
  (* src = "./migen_src/vbits_to_cbits.py:55" *)
  reg \$next\output_handler_busy_in ;
  (* src = "./migen_src/vbits_to_cbits.py:66" *)
  reg \$next\output_handler_end_in ;
  (* src = "./migen_src/vbits_to_cbits.py:333" *)
  reg \$next\valid_out ;
  (* src = "./migen_src/vbits_to_cbits.py:335" *)
  input busy_in;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "./migen_src/vbits_to_cbits.py:332" *)
  output [31:0] data_out;
  (* src = "./migen_src/vbits_to_cbits.py:327" *)
  input [47:0] enc_in;
  (* src = "./migen_src/vbits_to_cbits.py:328" *)
  input [5:0] enc_in_ctr;
  (* src = "./migen_src/vbits_to_cbits.py:334" *)
  output end_out;
  (* src = "./migen_src/vbits_to_cbits.py:329" *)
  input in_end;
  (* src = "./migen_src/vbits_to_cbits.py:146" *)
  wire [7:0] input_handler_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:145" *)
  wire [143:0] input_handler_buffer;
  (* src = "./migen_src/vbits_to_cbits.py:150" *)
  wire input_handler_dec_buff;
  (* src = "./migen_src/vbits_to_cbits.py:139" *)
  wire [47:0] input_handler_enc_in;
  (* src = "./migen_src/vbits_to_cbits.py:140" *)
  wire [5:0] input_handler_enc_in_ctr;
  (* src = "./migen_src/vbits_to_cbits.py:153" *)
  wire input_handler_end_out;
  (* src = "./migen_src/vbits_to_cbits.py:141" *)
  wire input_handler_in_end;
  (* src = "./migen_src/vbits_to_cbits.py:138" *)
  wire input_handler_latch_input;
  (* src = "./migen_src/vbits_to_cbits.py:147" *)
  wire [7:0] input_handler_new_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:142" *)
  wire input_handler_valid_in;
  (* src = "./migen_src/vbits_to_cbits.py:326" *)
  output latch_input;
  (* src = "./migen_src/vbits_to_cbits.py:60" *)
  wire [7:0] new_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:59" *)
  wire [7:0] output_handler_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:58" *)
  wire [143:0] output_handler_buffer;
  (* src = "./migen_src/vbits_to_cbits.py:55" *)
  wire output_handler_busy_in;
  (* src = "./migen_src/vbits_to_cbits.py:52" *)
  wire [31:0] output_handler_data_out;
  (* src = "./migen_src/vbits_to_cbits.py:63" *)
  wire output_handler_dec_buff_out;
  (* src = "./migen_src/vbits_to_cbits.py:66" *)
  wire output_handler_end_in;
  (* src = "./migen_src/vbits_to_cbits.py:54" *)
  wire output_handler_end_out;
  (* src = "./migen_src/vbits_to_cbits.py:53" *)
  wire output_handler_valid_out;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/vbits_to_cbits.py:330" *)
  input valid_in;
  (* src = "./migen_src/vbits_to_cbits.py:333" *)
  output valid_out;
  input_handler input_handler (
    .buff_consum(input_handler_buff_consum),
    .buffer(input_handler_buffer),
    .clk(clk),
    .dec_buff(input_handler_dec_buff),
    .enc_in(input_handler_enc_in),
    .enc_in_ctr(input_handler_enc_in_ctr),
    .end_out(input_handler_end_out),
    .in_end(input_handler_in_end),
    .latch_input(input_handler_latch_input),
    .new_buff_consum(input_handler_new_buff_consum),
    .rst(rst),
    .valid_in(input_handler_valid_in)
  );
  output_handler output_handler (
    .buff_consum(output_handler_buff_consum),
    .buffer(output_handler_buffer),
    .busy_in(output_handler_busy_in),
    .clk(clk),
    .data_out(output_handler_data_out),
    .dec_buff_out(output_handler_dec_buff_out),
    .end_in(output_handler_end_in),
    .end_out(output_handler_end_out),
    .rst(rst),
    .valid_out(output_handler_valid_out)
  );
  always @* begin
    \$next\latch_input  = 1'h0;
    \$next\latch_input  = input_handler_latch_input;
  end
  always @* begin
    \$next\input_handler_enc_in  = 48'h000000000000;
    \$next\input_handler_enc_in  = enc_in;
  end
  always @* begin
    \$next\data_out  = 32'd0;
    \$next\data_out  = output_handler_data_out;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = output_handler_valid_out;
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = output_handler_end_out;
  end
  always @* begin
    \$next\output_handler_busy_in  = 1'h0;
    \$next\output_handler_busy_in  = busy_in;
  end
  always @* begin
    \$next\input_handler_enc_in_ctr  = 6'h00;
    \$next\input_handler_enc_in_ctr  = enc_in_ctr;
  end
  always @* begin
    \$next\input_handler_in_end  = 1'h0;
    \$next\input_handler_in_end  = in_end;
  end
  always @* begin
    \$next\input_handler_valid_in  = 1'h0;
    \$next\input_handler_valid_in  = valid_in;
  end
  always @* begin
    \$next\input_handler_dec_buff  = 1'h0;
    \$next\input_handler_dec_buff  = output_handler_dec_buff_out;
  end
  always @* begin
    \$next\output_handler_buffer  = 144'h000000000000000000000000000000000000;
    \$next\output_handler_buffer  = input_handler_buffer;
  end
  always @* begin
    \$next\output_handler_buff_consum  = 8'h00;
    \$next\output_handler_buff_consum  = input_handler_buff_consum;
  end
  always @* begin
    \$next\new_buff_consum  = 8'h00;
    \$next\new_buff_consum  = input_handler_new_buff_consum;
  end
  always @* begin
    \$next\output_handler_end_in  = 1'h0;
    \$next\output_handler_end_in  = input_handler_end_out;
  end
  assign output_handler_busy_in = \$next\output_handler_busy_in ;
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign data_out = \$next\data_out ;
  assign output_handler_end_in = \$next\output_handler_end_in ;
  assign new_buff_consum = \$next\new_buff_consum ;
  assign output_handler_buff_consum = \$next\output_handler_buff_consum ;
  assign output_handler_buffer = \$next\output_handler_buffer ;
  assign input_handler_dec_buff = \$next\input_handler_dec_buff ;
  assign input_handler_valid_in = \$next\input_handler_valid_in ;
  assign input_handler_in_end = \$next\input_handler_in_end ;
  assign input_handler_enc_in_ctr = \$next\input_handler_enc_in_ctr ;
  assign input_handler_enc_in = \$next\input_handler_enc_in ;
  assign latch_input = \$next\latch_input ;
endmodule

