/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top.input_handler" *)
(* generator = "nMigen" *)
module input_handler(enc_in, enc_in_ctr, in_end, dec_buff, rst, clk, new_buff_consum_actv, latch_input, buffer, end_out, new_buff_consum, buff_consum, valid_in);
  wire \$1 ;
  wire [206:0] \$11 ;
  wire [206:0] \$12 ;
  wire [206:0] \$14 ;
  wire \$16 ;
  wire [9:0] \$18 ;
  wire [8:0] \$19 ;
  wire [9:0] \$21 ;
  wire [8:0] \$23 ;
  wire [8:0] \$24 ;
  wire [8:0] \$26 ;
  wire [8:0] \$27 ;
  wire \$29 ;
  wire [8:0] \$3 ;
  wire \$31 ;
  wire \$5 ;
  wire [8:0] \$7 ;
  wire \$9 ;
  (* src = "./migen_src/vbits_to_cbits.py:114" *)
  reg [7:0] \$next\buff_consum ;
  (* src = "./migen_src/vbits_to_cbits.py:113" *)
  reg [143:0] \$next\buffer ;
  (* src = "./migen_src/vbits_to_cbits.py:139" *)
  reg [5:0] \$next\enc_in_ctr_reg ;
  (* src = "./migen_src/vbits_to_cbits.py:138" *)
  reg [47:0] \$next\enc_in_reg ;
  (* src = "./migen_src/vbits_to_cbits.py:122" *)
  reg \$next\end_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "./migen_src/vbits_to_cbits.py:140" *)
  reg \$next\in_end_reg ;
  (* src = "./migen_src/vbits_to_cbits.py:134" *)
  reg \$next\inc_buff ;
  (* src = "./migen_src/vbits_to_cbits.py:106" *)
  reg \$next\latch_input ;
  (* src = "./migen_src/vbits_to_cbits.py:115" *)
  reg [7:0] \$next\new_buff_consum ;
  (* src = "./migen_src/vbits_to_cbits.py:116" *)
  reg \$next\new_buff_consum_actv ;
  (* src = "./migen_src/vbits_to_cbits.py:145" *)
  reg \$next\normal_cond ;
  (* src = "./migen_src/vbits_to_cbits.py:141" *)
  reg \$next\valid_in_reg ;
  (* init = 8'h00 *)
  (* src = "./migen_src/vbits_to_cbits.py:114" *)
  output [7:0] buff_consum;
  reg [7:0] buff_consum = 8'h00;
  (* init = 144'h000000000000000000000000000000000000 *)
  (* src = "./migen_src/vbits_to_cbits.py:113" *)
  output [143:0] buffer;
  reg [143:0] buffer = 144'h000000000000000000000000000000000000;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "./migen_src/vbits_to_cbits.py:119" *)
  input dec_buff;
  (* src = "./migen_src/vbits_to_cbits.py:107" *)
  input [47:0] enc_in;
  (* src = "./migen_src/vbits_to_cbits.py:108" *)
  input [5:0] enc_in_ctr;
  (* init = 6'h00 *)
  (* src = "./migen_src/vbits_to_cbits.py:139" *)
  reg [5:0] enc_in_ctr_reg = 6'h00;
  (* init = 48'h000000000000 *)
  (* src = "./migen_src/vbits_to_cbits.py:138" *)
  reg [47:0] enc_in_reg = 48'h000000000000;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:122" *)
  output end_out;
  reg end_out = 1'h0;
  (* init = 2'h0 *)
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "./migen_src/vbits_to_cbits.py:109" *)
  input in_end;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:140" *)
  reg in_end_reg = 1'h0;
  (* src = "./migen_src/vbits_to_cbits.py:134" *)
  wire inc_buff;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:106" *)
  output latch_input;
  reg latch_input = 1'h0;
  (* src = "./migen_src/vbits_to_cbits.py:115" *)
  output [7:0] new_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:116" *)
  output new_buff_consum_actv;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:145" *)
  reg normal_cond = 1'h0;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/vbits_to_cbits.py:110" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:141" *)
  reg valid_in_reg = 1'h0;
  assign \$9  = \$7  <= (* src = "./migen_src/vbits_to_cbits.py:191" *) 7'h60;
  assign \$12  = buffer <<< (* src = "./migen_src/vbits_to_cbits.py:160" *) enc_in_ctr_reg;
  assign \$14  = \$12  | (* src = "./migen_src/vbits_to_cbits.py:160" *) enc_in_reg;
  assign \$16  = inc_buff & (* src = "./migen_src/vbits_to_cbits.py:197" *) dec_buff;
  assign \$1  = inc_buff | (* src = "./migen_src/vbits_to_cbits.py:204" *) dec_buff;
  assign \$19  = buff_consum - (* src = "./migen_src/vbits_to_cbits.py:198" *) 6'h20;
  assign \$21  = \$19  + (* src = "./migen_src/vbits_to_cbits.py:198" *) enc_in_ctr_reg;
  assign \$24  = buff_consum - (* src = "./migen_src/vbits_to_cbits.py:200" *) 6'h20;
  assign \$27  = buff_consum + (* src = "./migen_src/vbits_to_cbits.py:202" *) enc_in_ctr_reg;
  assign \$29  = inc_buff | (* src = "./migen_src/vbits_to_cbits.py:204" *) dec_buff;
  assign \$31  = new_buff_consum <= (* src = "./migen_src/vbits_to_cbits.py:208" *) 7'h60;
  assign \$3  = buff_consum + (* src = "./migen_src/vbits_to_cbits.py:191" *) enc_in_ctr_reg;
  assign \$5  = \$3  <= (* src = "./migen_src/vbits_to_cbits.py:191" *) 7'h60;
  assign \$7  = buff_consum + (* src = "./migen_src/vbits_to_cbits.py:191" *) enc_in_ctr_reg;
  always @(posedge clk)
      buffer <= \$next\buffer ;
  always @(posedge clk)
      valid_in_reg <= \$next\valid_in_reg ;
  always @(posedge clk)
      in_end_reg <= \$next\in_end_reg ;
  always @(posedge clk)
      enc_in_ctr_reg <= \$next\enc_in_ctr_reg ;
  always @(posedge clk)
      enc_in_reg <= \$next\enc_in_reg ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      latch_input <= \$next\latch_input ;
  always @(posedge clk)
      normal_cond <= \$next\normal_cond ;
  always @(posedge clk)
      buff_consum <= \$next\buff_consum ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @* begin
    \$next\inc_buff  = 1'h0;
    \$next\inc_buff  = 1'h0;
    casez (fsm_state)
      2'h1:
          casez (valid_in_reg)
            1'h1:
                \$next\inc_buff  = 1'h1;
          endcase
    endcase
  end
  always @* begin
    \$next\new_buff_consum_actv  = 1'h0;
    \$next\new_buff_consum_actv  = 1'h0;
    casez (\$1 )
      1'h1:
          \$next\new_buff_consum_actv  = 1'h1;
    endcase
  end
  always @* begin
    \$next\new_buff_consum  = 8'h00;
    casez ({ inc_buff, dec_buff, \$16  })
      3'bzz1:
          \$next\new_buff_consum  = \$18 [7:0];
      3'bz1z:
          \$next\new_buff_consum  = \$23 [7:0];
      3'b1zz:
          \$next\new_buff_consum  = \$26 [7:0];
    endcase
  end
  always @* begin
    \$next\buff_consum  = buff_consum;
    casez (\$29 )
      1'h1:
          \$next\buff_consum  = new_buff_consum;
    endcase
    casez (rst)
      1'h1:
          \$next\buff_consum  = 8'h00;
    endcase
  end
  always @* begin
    \$next\normal_cond  = normal_cond;
    \$next\normal_cond  = \$31 ;
    casez (rst)
      1'h1:
          \$next\normal_cond  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_input  = latch_input;
    casez (fsm_state)
      2'h0:
          casez (normal_cond)
            1'h1:
                casez ({ valid_in, valid_in_reg })
                  2'bz1:
                      \$next\latch_input  = 1'h1;
                  2'b1z:
                      \$next\latch_input  = 1'h1;
                endcase
          endcase
      2'h1:
          casez (valid_in_reg)
            1'h1:
                casez (\$5 )
                  1'h1:
                      \$next\latch_input  = 1'h1;
                  1'hz:
                      \$next\latch_input  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\latch_input  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez (normal_cond)
            1'h1:
                casez ({ valid_in, valid_in_reg })
                  2'bz1:
                      \$next\fsm_state  = 2'h1;
                  2'b1z:
                      \$next\fsm_state  = 2'h2;
                endcase
          endcase
      2'h2:
          \$next\fsm_state  = 2'h1;
      2'h1:
          casez (valid_in_reg)
            1'h1:
                casez (\$9 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\fsm_state  = 2'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\enc_in_reg  = enc_in_reg;
    casez (fsm_state)
      2'h2:
          \$next\enc_in_reg  = enc_in;
      2'h1:
          \$next\enc_in_reg  = enc_in;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_reg  = 48'h000000000000;
    endcase
  end
  always @* begin
    \$next\enc_in_ctr_reg  = enc_in_ctr_reg;
    casez (fsm_state)
      2'h2:
          \$next\enc_in_ctr_reg  = enc_in_ctr;
      2'h1:
          \$next\enc_in_ctr_reg  = enc_in_ctr;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_ctr_reg  = 6'h00;
    endcase
  end
  always @* begin
    \$next\in_end_reg  = in_end_reg;
    casez (fsm_state)
      2'h2:
          \$next\in_end_reg  = in_end;
      2'h1:
          \$next\in_end_reg  = in_end;
    endcase
    casez (rst)
      1'h1:
          \$next\in_end_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_in_reg  = valid_in_reg;
    casez (fsm_state)
      2'h2:
          \$next\valid_in_reg  = valid_in;
      2'h1:
          \$next\valid_in_reg  = valid_in;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_in_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buffer  = buffer;
    casez (fsm_state)
      2'h1:
          casez (valid_in_reg)
            1'h1:
                \$next\buffer  = \$11 [143:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buffer  = 144'h000000000000000000000000000000000000;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    casez (fsm_state)
      2'h1:
          casez (valid_in_reg)
            1'h1:
                \$next\end_out  = in_end_reg;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  assign \$11  = \$14 ;
  assign \$18  = \$21 ;
  assign \$23  = \$24 ;
  assign \$26  = \$27 ;
  assign new_buff_consum = \$next\new_buff_consum ;
  assign new_buff_consum_actv = \$next\new_buff_consum_actv ;
  assign inc_buff = \$next\inc_buff ;
endmodule

(* \nmigen.hierarchy  = "top.output_handler" *)
(* generator = "nMigen" *)
module output_handler(new_buff_consum_actv, new_buff_consum, end_in, buffer, busy_in, rst, clk, dec_buff_out, data_out, valid_out, end_out, buff_consum);
  wire [8:0] \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire [8:0] \$2 ;
  wire \$21 ;
  wire \$23 ;
  wire [143:0] \$25 ;
  wire [143:0] \$26 ;
  wire [270:0] \$28 ;
  wire [270:0] \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire [143:0] \$37 ;
  wire [143:0] \$38 ;
  wire [8:0] \$4 ;
  wire [270:0] \$40 ;
  wire [270:0] \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire [8:0] \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "./migen_src/vbits_to_cbits.py:49" *)
  reg \$next\buff_consum_greater_eq ;
  (* src = "./migen_src/vbits_to_cbits.py:48" *)
  reg \$next\buff_consum_less_eq ;
  (* src = "./migen_src/vbits_to_cbits.py:17" *)
  reg [31:0] \$next\data_out ;
  (* src = "./migen_src/vbits_to_cbits.py:28" *)
  reg \$next\dec_buff_out ;
  (* src = "./migen_src/vbits_to_cbits.py:19" *)
  reg \$next\end_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg \$next\fsm_state ;
  (* src = "./migen_src/vbits_to_cbits.py:40" *)
  reg [6:0] \$next\shift_left ;
  (* src = "./migen_src/vbits_to_cbits.py:39" *)
  reg [6:0] \$next\shift_right ;
  (* src = "./migen_src/vbits_to_cbits.py:18" *)
  reg \$next\valid_out ;
  (* src = "./migen_src/vbits_to_cbits.py:24" *)
  input [7:0] buff_consum;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:49" *)
  reg buff_consum_greater_eq = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:48" *)
  reg buff_consum_less_eq = 1'h0;
  (* src = "./migen_src/vbits_to_cbits.py:23" *)
  input [143:0] buffer;
  (* src = "./migen_src/vbits_to_cbits.py:20" *)
  input busy_in;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* init = 32'd0 *)
  (* src = "./migen_src/vbits_to_cbits.py:17" *)
  output [31:0] data_out;
  reg [31:0] data_out = 32'd0;
  (* src = "./migen_src/vbits_to_cbits.py:28" *)
  output dec_buff_out;
  (* src = "./migen_src/vbits_to_cbits.py:31" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:19" *)
  output end_out;
  reg end_out = 1'h0;
  (* init = 1'h0 *)
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg fsm_state = 1'h0;
  (* src = "./migen_src/vbits_to_cbits.py:25" *)
  input [7:0] new_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:26" *)
  input new_buff_consum_actv;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/vbits_to_cbits.py:40" *)
  wire [6:0] shift_left;
  (* src = "./migen_src/vbits_to_cbits.py:39" *)
  wire [6:0] shift_right;
  (* init = 1'h0 *)
  (* src = "./migen_src/vbits_to_cbits.py:18" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$9  = buff_consum_greater_eq | (* src = "./migen_src/vbits_to_cbits.py:73" *) \$7 ;
  assign \$11  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:82" *) 1'h0;
  assign \$13  = \$11  & (* src = "./migen_src/vbits_to_cbits.py:82" *) buff_consum_greater_eq;
  assign \$15  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:85" *) 1'h0;
  assign \$17  = new_buff_consum >= (* src = "./migen_src/vbits_to_cbits.py:53" *) 6'h20;
  assign \$19  = new_buff_consum <= (* src = "./migen_src/vbits_to_cbits.py:54" *) 6'h20;
  assign \$21  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:73" *) end_in;
  assign \$23  = buff_consum_greater_eq | (* src = "./migen_src/vbits_to_cbits.py:73" *) \$21 ;
  assign \$26  = buffer >>> (* src = "./migen_src/vbits_to_cbits.py:59" *) shift_right;
  assign \$2  = buff_consum - (* src = "./migen_src/vbits_to_cbits.py:41" *) 6'h20;
  assign \$29  = buffer <<< (* src = "./migen_src/vbits_to_cbits.py:61" *) shift_left;
  assign \$31  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:82" *) 1'h0;
  assign \$33  = \$31  & (* src = "./migen_src/vbits_to_cbits.py:82" *) buff_consum_greater_eq;
  assign \$35  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:85" *) 1'h0;
  assign \$38  = buffer >>> (* src = "./migen_src/vbits_to_cbits.py:59" *) shift_right;
  assign \$41  = buffer <<< (* src = "./migen_src/vbits_to_cbits.py:61" *) shift_left;
  assign \$43  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:73" *) end_in;
  assign \$45  = buff_consum_greater_eq | (* src = "./migen_src/vbits_to_cbits.py:73" *) \$43 ;
  assign \$47  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:82" *) 1'h0;
  assign \$49  = \$47  & (* src = "./migen_src/vbits_to_cbits.py:82" *) buff_consum_greater_eq;
  assign \$51  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:85" *) 1'h0;
  assign \$53  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:73" *) end_in;
  assign \$55  = buff_consum_greater_eq | (* src = "./migen_src/vbits_to_cbits.py:73" *) \$53 ;
  assign \$57  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:82" *) 1'h0;
  assign \$5  = 6'h20 - (* src = "./migen_src/vbits_to_cbits.py:42" *) buff_consum;
  assign \$59  = \$57  & (* src = "./migen_src/vbits_to_cbits.py:82" *) buff_consum_greater_eq;
  assign \$61  = busy_in == (* src = "./migen_src/vbits_to_cbits.py:85" *) 1'h0;
  assign \$63  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:77" *) end_in;
  assign \$65  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:92" *) end_in;
  assign \$7  = buff_consum_less_eq & (* src = "./migen_src/vbits_to_cbits.py:73" *) end_in;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      data_out <= \$next\data_out ;
  always @(posedge clk)
      buff_consum_less_eq <= \$next\buff_consum_less_eq ;
  always @(posedge clk)
      buff_consum_greater_eq <= \$next\buff_consum_greater_eq ;
  always @* begin
    \$next\shift_right  = 7'h00;
    \$next\shift_right  = \$1 [6:0];
  end
  always @* begin
    \$next\shift_left  = 7'h00;
    \$next\shift_left  = \$4 [6:0];
  end
  always @* begin
    \$next\dec_buff_out  = 1'h0;
    \$next\dec_buff_out  = 1'h0;
    casez (fsm_state)
      1'h0:
          casez (\$9 )
            1'h1:
                \$next\dec_buff_out  = 1'h1;
          endcase
      1'h1:
          casez ({ \$15 , \$13  })
            2'bz1:
                \$next\dec_buff_out  = 1'h1;
          endcase
    endcase
  end
  always @* begin
    \$next\buff_consum_greater_eq  = buff_consum_greater_eq;
    casez (new_buff_consum_actv)
      1'h1:
          \$next\buff_consum_greater_eq  = \$17 ;
    endcase
    casez (rst)
      1'h1:
          \$next\buff_consum_greater_eq  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buff_consum_less_eq  = buff_consum_less_eq;
    casez (new_buff_consum_actv)
      1'h1:
          \$next\buff_consum_less_eq  = \$19 ;
    endcase
    casez (rst)
      1'h1:
          \$next\buff_consum_less_eq  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_out  = data_out;
    casez (fsm_state)
      1'h0:
          casez (\$23 )
            1'h1:
                casez (buff_consum_greater_eq)
                  1'h1:
                      \$next\data_out  = \$25 [31:0];
                  1'hz:
                      \$next\data_out  = \$28 [31:0];
                endcase
          endcase
      1'h1:
          casez ({ \$35 , \$33  })
            2'bz1:
                casez (buff_consum_greater_eq)
                  1'h1:
                      \$next\data_out  = \$37 [31:0];
                  1'hz:
                      \$next\data_out  = \$40 [31:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data_out  = 32'd0;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    casez (fsm_state)
      1'h0:
          casez (\$45 )
            1'h1:
                \$next\valid_out  = 1'h1;
          endcase
      1'h1:
          casez ({ \$51 , \$49  })
            2'bz1:
                \$next\valid_out  = 1'h1;
            2'b1z:
                \$next\valid_out  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      1'h0:
          casez (\$55 )
            1'h1:
                \$next\fsm_state  = 1'h1;
          endcase
      1'h1:
          casez ({ \$61 , \$59  })
            2'bz1:
                /* empty */;
            2'b1z:
                \$next\fsm_state  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    casez (fsm_state)
      1'h0:
          casez (\$63 )
            1'h1:
                \$next\end_out  = 1'h1;
          endcase
      1'h1:
          casez (\$65 )
            1'h1:
                \$next\end_out  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
  assign \$25  = \$26 ;
  assign \$28  = \$29 ;
  assign \$37  = \$38 ;
  assign \$40  = \$41 ;
  assign dec_buff_out = \$next\dec_buff_out ;
  assign shift_left = \$next\shift_left ;
  assign shift_right = \$next\shift_right ;
endmodule

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(enc_in_ctr, in_end, valid_in, busy_in, rst, clk, data_out, valid_out, latch_input, end_out, enc_in);
  (* src = "./migen_src/vbits_to_cbits.py:233" *)
  reg [31:0] \$next\data_out ;
  (* src = "./migen_src/vbits_to_cbits.py:235" *)
  reg \$next\end_out ;
  (* src = "./migen_src/vbits_to_cbits.py:119" *)
  reg \$next\input_handler_dec_buff ;
  (* src = "./migen_src/vbits_to_cbits.py:107" *)
  reg [47:0] \$next\input_handler_enc_in ;
  (* src = "./migen_src/vbits_to_cbits.py:108" *)
  reg [5:0] \$next\input_handler_enc_in_ctr ;
  (* src = "./migen_src/vbits_to_cbits.py:109" *)
  reg \$next\input_handler_in_end ;
  (* src = "./migen_src/vbits_to_cbits.py:110" *)
  reg \$next\input_handler_valid_in ;
  (* src = "./migen_src/vbits_to_cbits.py:227" *)
  reg \$next\latch_input ;
  (* src = "./migen_src/vbits_to_cbits.py:24" *)
  reg [7:0] \$next\output_handler_buff_consum ;
  (* src = "./migen_src/vbits_to_cbits.py:23" *)
  reg [143:0] \$next\output_handler_buffer ;
  (* src = "./migen_src/vbits_to_cbits.py:20" *)
  reg \$next\output_handler_busy_in ;
  (* src = "./migen_src/vbits_to_cbits.py:31" *)
  reg \$next\output_handler_end_in ;
  (* src = "./migen_src/vbits_to_cbits.py:25" *)
  reg [7:0] \$next\output_handler_new_buff_consum ;
  (* src = "./migen_src/vbits_to_cbits.py:26" *)
  reg \$next\output_handler_new_buff_consum_actv ;
  (* src = "./migen_src/vbits_to_cbits.py:234" *)
  reg \$next\valid_out ;
  (* src = "./migen_src/vbits_to_cbits.py:236" *)
  input busy_in;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "./migen_src/vbits_to_cbits.py:233" *)
  output [31:0] data_out;
  (* src = "./migen_src/vbits_to_cbits.py:228" *)
  input [47:0] enc_in;
  (* src = "./migen_src/vbits_to_cbits.py:229" *)
  input [5:0] enc_in_ctr;
  (* src = "./migen_src/vbits_to_cbits.py:235" *)
  output end_out;
  (* src = "./migen_src/vbits_to_cbits.py:230" *)
  input in_end;
  (* src = "./migen_src/vbits_to_cbits.py:114" *)
  wire [7:0] input_handler_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:113" *)
  wire [143:0] input_handler_buffer;
  (* src = "./migen_src/vbits_to_cbits.py:119" *)
  wire input_handler_dec_buff;
  (* src = "./migen_src/vbits_to_cbits.py:107" *)
  wire [47:0] input_handler_enc_in;
  (* src = "./migen_src/vbits_to_cbits.py:108" *)
  wire [5:0] input_handler_enc_in_ctr;
  (* src = "./migen_src/vbits_to_cbits.py:122" *)
  wire input_handler_end_out;
  (* src = "./migen_src/vbits_to_cbits.py:109" *)
  wire input_handler_in_end;
  (* src = "./migen_src/vbits_to_cbits.py:106" *)
  wire input_handler_latch_input;
  (* src = "./migen_src/vbits_to_cbits.py:115" *)
  wire [7:0] input_handler_new_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:116" *)
  wire input_handler_new_buff_consum_actv;
  (* src = "./migen_src/vbits_to_cbits.py:110" *)
  wire input_handler_valid_in;
  (* src = "./migen_src/vbits_to_cbits.py:227" *)
  output latch_input;
  (* src = "./migen_src/vbits_to_cbits.py:24" *)
  wire [7:0] output_handler_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:23" *)
  wire [143:0] output_handler_buffer;
  (* src = "./migen_src/vbits_to_cbits.py:20" *)
  wire output_handler_busy_in;
  (* src = "./migen_src/vbits_to_cbits.py:17" *)
  wire [31:0] output_handler_data_out;
  (* src = "./migen_src/vbits_to_cbits.py:28" *)
  wire output_handler_dec_buff_out;
  (* src = "./migen_src/vbits_to_cbits.py:31" *)
  wire output_handler_end_in;
  (* src = "./migen_src/vbits_to_cbits.py:19" *)
  wire output_handler_end_out;
  (* src = "./migen_src/vbits_to_cbits.py:25" *)
  wire [7:0] output_handler_new_buff_consum;
  (* src = "./migen_src/vbits_to_cbits.py:26" *)
  wire output_handler_new_buff_consum_actv;
  (* src = "./migen_src/vbits_to_cbits.py:18" *)
  wire output_handler_valid_out;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/vbits_to_cbits.py:231" *)
  input valid_in;
  (* src = "./migen_src/vbits_to_cbits.py:234" *)
  output valid_out;
  input_handler input_handler (
    .buff_consum(input_handler_buff_consum),
    .buffer(input_handler_buffer),
    .clk(clk),
    .dec_buff(input_handler_dec_buff),
    .enc_in(input_handler_enc_in),
    .enc_in_ctr(input_handler_enc_in_ctr),
    .end_out(input_handler_end_out),
    .in_end(input_handler_in_end),
    .latch_input(input_handler_latch_input),
    .new_buff_consum(input_handler_new_buff_consum),
    .new_buff_consum_actv(input_handler_new_buff_consum_actv),
    .rst(rst),
    .valid_in(input_handler_valid_in)
  );
  output_handler output_handler (
    .buff_consum(output_handler_buff_consum),
    .buffer(output_handler_buffer),
    .busy_in(output_handler_busy_in),
    .clk(clk),
    .data_out(output_handler_data_out),
    .dec_buff_out(output_handler_dec_buff_out),
    .end_in(output_handler_end_in),
    .end_out(output_handler_end_out),
    .new_buff_consum(output_handler_new_buff_consum),
    .new_buff_consum_actv(output_handler_new_buff_consum_actv),
    .rst(rst),
    .valid_out(output_handler_valid_out)
  );
  always @* begin
    \$next\latch_input  = 1'h0;
    \$next\latch_input  = input_handler_latch_input;
  end
  always @* begin
    \$next\input_handler_enc_in  = 48'h000000000000;
    \$next\input_handler_enc_in  = enc_in;
  end
  always @* begin
    \$next\output_handler_new_buff_consum_actv  = 1'h0;
    \$next\output_handler_new_buff_consum_actv  = input_handler_new_buff_consum_actv;
  end
  always @* begin
    \$next\data_out  = 32'd0;
    \$next\data_out  = output_handler_data_out;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = output_handler_valid_out;
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = output_handler_end_out;
  end
  always @* begin
    \$next\output_handler_busy_in  = 1'h0;
    \$next\output_handler_busy_in  = busy_in;
  end
  always @* begin
    \$next\input_handler_enc_in_ctr  = 6'h00;
    \$next\input_handler_enc_in_ctr  = enc_in_ctr;
  end
  always @* begin
    \$next\input_handler_in_end  = 1'h0;
    \$next\input_handler_in_end  = in_end;
  end
  always @* begin
    \$next\input_handler_valid_in  = 1'h0;
    \$next\input_handler_valid_in  = valid_in;
  end
  always @* begin
    \$next\input_handler_dec_buff  = 1'h0;
    \$next\input_handler_dec_buff  = output_handler_dec_buff_out;
  end
  always @* begin
    \$next\output_handler_buffer  = 144'h000000000000000000000000000000000000;
    \$next\output_handler_buffer  = input_handler_buffer;
  end
  always @* begin
    \$next\output_handler_buff_consum  = 8'h00;
    \$next\output_handler_buff_consum  = input_handler_buff_consum;
  end
  always @* begin
    \$next\output_handler_end_in  = 1'h0;
    \$next\output_handler_end_in  = input_handler_end_out;
  end
  always @* begin
    \$next\output_handler_new_buff_consum  = 8'h00;
    \$next\output_handler_new_buff_consum  = input_handler_new_buff_consum;
  end
  assign output_handler_busy_in = \$next\output_handler_busy_in ;
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign data_out = \$next\data_out ;
  assign output_handler_new_buff_consum_actv = \$next\output_handler_new_buff_consum_actv ;
  assign output_handler_new_buff_consum = \$next\output_handler_new_buff_consum ;
  assign output_handler_end_in = \$next\output_handler_end_in ;
  assign output_handler_buff_consum = \$next\output_handler_buff_consum ;
  assign output_handler_buffer = \$next\output_handler_buffer ;
  assign input_handler_dec_buff = \$next\input_handler_dec_buff ;
  assign input_handler_valid_in = \$next\input_handler_valid_in ;
  assign input_handler_in_end = \$next\input_handler_in_end ;
  assign input_handler_enc_in_ctr = \$next\input_handler_enc_in_ctr ;
  assign input_handler_enc_in = \$next\input_handler_enc_in ;
  assign latch_input = \$next\latch_input ;
endmodule

