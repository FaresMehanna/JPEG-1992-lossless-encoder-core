/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top.anonymous" *)
(* generator = "nMigen" *)
module anonymous(val_in, val_in_mns, end_in, rst, clk, val_out, ssss, valid_o, end_out, valid);
  wire \$1 ;
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$109 ;
  wire [17:0] \$11 ;
  wire \$111 ;
  wire [17:0] \$12 ;
  wire [17:0] \$14 ;
  wire [17:0] \$15 ;
  wire \$17 ;
  wire [17:0] \$19 ;
  wire [17:0] \$20 ;
  wire [17:0] \$22 ;
  wire [17:0] \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire [17:0] \$29 ;
  wire \$3 ;
  wire [17:0] \$30 ;
  wire [17:0] \$32 ;
  wire [17:0] \$33 ;
  wire \$35 ;
  wire [17:0] \$37 ;
  wire [17:0] \$38 ;
  wire [17:0] \$40 ;
  wire [17:0] \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire [17:0] \$49 ;
  wire \$5 ;
  wire [17:0] \$50 ;
  wire [17:0] \$52 ;
  wire [17:0] \$53 ;
  wire \$55 ;
  wire [17:0] \$57 ;
  wire [17:0] \$58 ;
  wire [17:0] \$60 ;
  wire [17:0] \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire [17:0] \$67 ;
  wire [17:0] \$68 ;
  wire \$7 ;
  wire [17:0] \$70 ;
  wire [17:0] \$71 ;
  wire \$73 ;
  wire [17:0] \$75 ;
  wire [17:0] \$76 ;
  wire [17:0] \$78 ;
  wire [17:0] \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$9 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  (* src = "normalize.py:133" *)
  reg \$next\end_out ;
  (* src = "normalize.py:126" *)
  reg [4:0] \$next\ssss ;
  (* src = "normalize.py:124" *)
  reg [15:0] \$next\val_out ;
  (* src = "normalize.py:129" *)
  reg \$next\valid_o ;
  (* src = "nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "normalize.py:132" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "normalize.py:133" *)
  output end_out;
  reg end_out = 1'h0;
  (* src = "nmigen/hdl/ir.py:329" *)
  input rst;
  (* init = 5'h00 *)
  (* src = "normalize.py:126" *)
  output [4:0] ssss;
  reg [4:0] ssss = 5'h00;
  (* src = "normalize.py:119" *)
  input [16:0] val_in;
  (* src = "normalize.py:121" *)
  input [16:0] val_in_mns;
  (* init = 16'h0000 *)
  (* src = "normalize.py:124" *)
  output [15:0] val_out;
  reg [15:0] val_out = 16'h0000;
  (* src = "normalize.py:128" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "normalize.py:129" *)
  output valid_o;
  reg valid_o = 1'h0;
  assign \$9  = val_in_mns[16:1] == (* src = "normalize.py:65" *) 16'hffff;
  assign \$99  = val_in_mns[16:12] == (* src = "normalize.py:81" *) 5'h1f;
  assign \$101  = val_in_mns[16:10] == (* src = "normalize.py:81" *) 7'h7f;
  assign \$103  = val_in_mns[16:9] == (* src = "normalize.py:65" *) 8'hff;
  assign \$105  = val_in_mns[16:11] == (* src = "normalize.py:65" *) 6'h3f;
  assign \$107  = val_in_mns[16:14] == (* src = "normalize.py:81" *) 3'h7;
  assign \$109  = val_in_mns[16:13] == (* src = "normalize.py:65" *) 4'hf;
  assign \$111  = val_in_mns[16:15] == (* src = "normalize.py:65" *) 2'h3;
  assign \$12  = val_in + (* src = "normalize.py:67" *) 1'h1;
  assign \$15  = val_in + (* src = "normalize.py:72" *) 2'h3;
  assign \$17  = val_in_mns[16:3] == (* src = "normalize.py:65" *) 14'h3fff;
  assign \$1  = val_in[16] == (* src = "normalize.py:156" *) 1'h1;
  assign \$20  = val_in + (* src = "normalize.py:67" *) 3'h7;
  assign \$23  = val_in + (* src = "normalize.py:72" *) 4'hf;
  assign \$25  = val_in_mns[16:6] == (* src = "normalize.py:81" *) 11'h7ff;
  assign \$27  = val_in_mns[16:5] == (* src = "normalize.py:65" *) 12'hfff;
  assign \$30  = val_in + (* src = "normalize.py:67" *) 5'h1f;
  assign \$33  = val_in + (* src = "normalize.py:72" *) 6'h3f;
  assign \$35  = val_in_mns[16:7] == (* src = "normalize.py:65" *) 10'h3ff;
  assign \$38  = val_in + (* src = "normalize.py:67" *) 7'h7f;
  assign \$3  = val_in_mns[16:8] == (* src = "normalize.py:81" *) 9'h1ff;
  assign \$41  = val_in + (* src = "normalize.py:72" *) 8'hff;
  assign \$43  = val_in_mns[16:12] == (* src = "normalize.py:81" *) 5'h1f;
  assign \$45  = val_in_mns[16:10] == (* src = "normalize.py:81" *) 7'h7f;
  assign \$47  = val_in_mns[16:9] == (* src = "normalize.py:65" *) 8'hff;
  assign \$50  = val_in + (* src = "normalize.py:67" *) 9'h1ff;
  assign \$53  = val_in + (* src = "normalize.py:72" *) 10'h3ff;
  assign \$55  = val_in_mns[16:11] == (* src = "normalize.py:65" *) 6'h3f;
  assign \$58  = val_in + (* src = "normalize.py:67" *) 11'h7ff;
  assign \$5  = val_in_mns[16:4] == (* src = "normalize.py:81" *) 13'h1fff;
  assign \$61  = val_in + (* src = "normalize.py:72" *) 12'hfff;
  assign \$63  = val_in_mns[16:14] == (* src = "normalize.py:81" *) 3'h7;
  assign \$65  = val_in_mns[16:13] == (* src = "normalize.py:65" *) 4'hf;
  assign \$68  = val_in + (* src = "normalize.py:67" *) 13'h1fff;
  assign \$71  = val_in + (* src = "normalize.py:72" *) 14'h3fff;
  assign \$73  = val_in_mns[16:15] == (* src = "normalize.py:65" *) 2'h3;
  assign \$76  = val_in + (* src = "normalize.py:67" *) 15'h7fff;
  assign \$7  = val_in_mns[16:2] == (* src = "normalize.py:81" *) 15'h7fff;
  assign \$79  = val_in + (* src = "normalize.py:72" *) 16'hffff;
  assign \$81  = val_in[16] == (* src = "normalize.py:156" *) 1'h1;
  assign \$83  = val_in_mns[16:8] == (* src = "normalize.py:81" *) 9'h1ff;
  assign \$85  = val_in_mns[16:4] == (* src = "normalize.py:81" *) 13'h1fff;
  assign \$87  = val_in_mns[16:2] == (* src = "normalize.py:81" *) 15'h7fff;
  assign \$89  = val_in_mns[16:1] == (* src = "normalize.py:65" *) 16'hffff;
  assign \$91  = val_in_mns[16:3] == (* src = "normalize.py:65" *) 14'h3fff;
  assign \$93  = val_in_mns[16:6] == (* src = "normalize.py:81" *) 11'h7ff;
  assign \$95  = val_in_mns[16:5] == (* src = "normalize.py:65" *) 12'hfff;
  assign \$97  = val_in_mns[16:7] == (* src = "normalize.py:65" *) 10'h3ff;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      valid_o <= \$next\valid_o ;
  always @(posedge clk)
      ssss <= \$next\ssss ;
  always @(posedge clk)
      val_out <= \$next\val_out ;
  always @* begin
    \$next\val_out  = val_out;
    casez (valid)
      1'h1:
          casez (\$1 )
            1'h1:
                casez (\$3 )
                  1'h1:
                      casez (\$5 )
                        1'h1:
                            casez (\$7 )
                              1'h1:
                                  casez (\$9 )
                                    1'h1:
                                        \$next\val_out  = \$11 [15:0];
                                    1'hz:
                                        \$next\val_out  = \$14 [15:0];
                                  endcase
                              1'hz:
                                  casez (\$17 )
                                    1'h1:
                                        \$next\val_out  = \$19 [15:0];
                                    1'hz:
                                        \$next\val_out  = \$22 [15:0];
                                  endcase
                            endcase
                        1'hz:
                            casez (\$25 )
                              1'h1:
                                  casez (\$27 )
                                    1'h1:
                                        \$next\val_out  = \$29 [15:0];
                                    1'hz:
                                        \$next\val_out  = \$32 [15:0];
                                  endcase
                              1'hz:
                                  casez (\$35 )
                                    1'h1:
                                        \$next\val_out  = \$37 [15:0];
                                    1'hz:
                                        \$next\val_out  = \$40 [15:0];
                                  endcase
                            endcase
                      endcase
                  1'hz:
                      casez (\$43 )
                        1'h1:
                            casez (\$45 )
                              1'h1:
                                  casez (\$47 )
                                    1'h1:
                                        \$next\val_out  = \$49 [15:0];
                                    1'hz:
                                        \$next\val_out  = \$52 [15:0];
                                  endcase
                              1'hz:
                                  casez (\$55 )
                                    1'h1:
                                        \$next\val_out  = \$57 [15:0];
                                    1'hz:
                                        \$next\val_out  = \$60 [15:0];
                                  endcase
                            endcase
                        1'hz:
                            casez (\$63 )
                              1'h1:
                                  casez (\$65 )
                                    1'h1:
                                        \$next\val_out  = \$67 [15:0];
                                    1'hz:
                                        \$next\val_out  = \$70 [15:0];
                                  endcase
                              1'hz:
                                  casez (\$73 )
                                    1'h1:
                                        \$next\val_out  = \$75 [15:0];
                                    1'hz:
                                        \$next\val_out  = \$78 [15:0];
                                  endcase
                            endcase
                      endcase
                endcase
            1'hz:
                \$next\val_out  = val_in[15:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\val_out  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\ssss  = ssss;
    casez (valid)
      1'h1:
          casez (\$81 )
            1'h1:
                casez (\$83 )
                  1'h1:
                      casez (\$85 )
                        1'h1:
                            casez (\$87 )
                              1'h1:
                                  casez (\$89 )
                                    1'h1:
                                        \$next\ssss  = 5'h01;
                                    1'hz:
                                        \$next\ssss  = 5'h02;
                                  endcase
                              1'hz:
                                  casez (\$91 )
                                    1'h1:
                                        \$next\ssss  = 5'h03;
                                    1'hz:
                                        \$next\ssss  = 5'h04;
                                  endcase
                            endcase
                        1'hz:
                            casez (\$93 )
                              1'h1:
                                  casez (\$95 )
                                    1'h1:
                                        \$next\ssss  = 5'h05;
                                    1'hz:
                                        \$next\ssss  = 5'h06;
                                  endcase
                              1'hz:
                                  casez (\$97 )
                                    1'h1:
                                        \$next\ssss  = 5'h07;
                                    1'hz:
                                        \$next\ssss  = 5'h08;
                                  endcase
                            endcase
                      endcase
                  1'hz:
                      casez (\$99 )
                        1'h1:
                            casez (\$101 )
                              1'h1:
                                  casez (\$103 )
                                    1'h1:
                                        \$next\ssss  = 5'h09;
                                    1'hz:
                                        \$next\ssss  = 5'h0a;
                                  endcase
                              1'hz:
                                  casez (\$105 )
                                    1'h1:
                                        \$next\ssss  = 5'h0b;
                                    1'hz:
                                        \$next\ssss  = 5'h0c;
                                  endcase
                            endcase
                        1'hz:
                            casez (\$107 )
                              1'h1:
                                  casez (\$109 )
                                    1'h1:
                                        \$next\ssss  = 5'h0d;
                                    1'hz:
                                        \$next\ssss  = 5'h0e;
                                  endcase
                              1'hz:
                                  casez (\$111 )
                                    1'h1:
                                        \$next\ssss  = 5'h0f;
                                    1'hz:
                                        \$next\ssss  = 5'h10;
                                  endcase
                            endcase
                      endcase
                endcase
            1'hz:
              begin
                \$next\ssss  = 5'h00;
                casez ({ val_in[0], val_in[1], val_in[2], val_in[3], val_in[4], val_in[5], val_in[6], val_in[7], val_in[8], val_in[9], val_in[10], val_in[11], val_in[12], val_in[13], val_in[14], val_in[15] })
                  16'bzzzzzzzzzzzzzzz1:
                      \$next\ssss  = 5'h10;
                  16'bzzzzzzzzzzzzzz1z:
                      \$next\ssss  = 5'h0f;
                  16'bzzzzzzzzzzzzz1zz:
                      \$next\ssss  = 5'h0e;
                  16'bzzzzzzzzzzzz1zzz:
                      \$next\ssss  = 5'h0d;
                  16'bzzzzzzzzzzz1zzzz:
                      \$next\ssss  = 5'h0c;
                  16'bzzzzzzzzzz1zzzzz:
                      \$next\ssss  = 5'h0b;
                  16'bzzzzzzzzz1zzzzzz:
                      \$next\ssss  = 5'h0a;
                  16'bzzzzzzzz1zzzzzzz:
                      \$next\ssss  = 5'h09;
                  16'bzzzzzzz1zzzzzzzz:
                      \$next\ssss  = 5'h08;
                  16'bzzzzzz1zzzzzzzzz:
                      \$next\ssss  = 5'h07;
                  16'bzzzzz1zzzzzzzzzz:
                      \$next\ssss  = 5'h06;
                  16'bzzzz1zzzzzzzzzzz:
                      \$next\ssss  = 5'h05;
                  16'bzzz1zzzzzzzzzzzz:
                      \$next\ssss  = 5'h04;
                  16'bzz1zzzzzzzzzzzzz:
                      \$next\ssss  = 5'h03;
                  16'bz1zzzzzzzzzzzzzz:
                      \$next\ssss  = 5'h02;
                  16'b1zzzzzzzzzzzzzzz:
                      \$next\ssss  = 5'h01;
                endcase
              end
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\ssss  = 5'h00;
    endcase
  end
  always @* begin
    \$next\valid_o  = valid_o;
    \$next\valid_o  = valid;
    casez (rst)
      1'h1:
          \$next\valid_o  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    \$next\end_out  = end_in;
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  assign \$11  = \$12 ;
  assign \$14  = \$15 ;
  assign \$19  = \$20 ;
  assign \$22  = \$23 ;
  assign \$29  = \$30 ;
  assign \$32  = \$33 ;
  assign \$37  = \$38 ;
  assign \$40  = \$41 ;
  assign \$49  = \$50 ;
  assign \$52  = \$53 ;
  assign \$57  = \$58 ;
  assign \$60  = \$61 ;
  assign \$67  = \$68 ;
  assign \$70  = \$71 ;
  assign \$75  = \$76 ;
  assign \$78  = \$79 ;
endmodule

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(valid_in, end_in, vals_in_mns, rst, clk, val_out, valid_out, ssss, end_out, val_in);
  (* src = "normalize.py:132" *)
  reg \$next\end_in$2 ;
  (* src = "normalize.py:208" *)
  reg \$next\end_out ;
  (* src = "normalize.py:201" *)
  reg [4:0] \$next\ssss ;
  (* src = "normalize.py:119" *)
  reg [16:0] \$next\val_in$1 ;
  (* src = "normalize.py:121" *)
  reg [16:0] \$next\val_in_mns ;
  (* src = "normalize.py:199" *)
  reg [15:0] \$next\val_out ;
  (* src = "normalize.py:128" *)
  reg \$next\valid ;
  (* src = "normalize.py:204" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "normalize.py:207" *)
  input end_in;
  (* src = "normalize.py:132" *)
  wire \end_in$2 ;
  (* src = "normalize.py:208" *)
  output end_out;
  (* src = "normalize.py:133" *)
  wire \end_out$5 ;
  (* src = "nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "normalize.py:201" *)
  output [4:0] ssss;
  (* src = "normalize.py:126" *)
  wire [4:0] \ssss$4 ;
  (* src = "normalize.py:194" *)
  input [16:0] val_in;
  (* src = "normalize.py:119" *)
  wire [16:0] \val_in$1 ;
  (* src = "normalize.py:121" *)
  wire [16:0] val_in_mns;
  (* src = "normalize.py:199" *)
  output [15:0] val_out;
  (* src = "normalize.py:124" *)
  wire [15:0] \val_out$3 ;
  (* src = "normalize.py:128" *)
  wire valid;
  (* src = "normalize.py:203" *)
  input valid_in;
  (* src = "normalize.py:129" *)
  wire valid_o;
  (* src = "normalize.py:204" *)
  output valid_out;
  (* src = "normalize.py:196" *)
  input [16:0] vals_in_mns;
  anonymous \$6  (
    .clk(clk),
    .end_in(\end_in$2 ),
    .end_out(\end_out$5 ),
    .rst(rst),
    .ssss(\ssss$4 ),
    .val_in(\val_in$1 ),
    .val_in_mns(val_in_mns),
    .val_out(\val_out$3 ),
    .valid(valid),
    .valid_o(valid_o)
  );
  always @* begin
    \$next\val_in$1  = 17'h00000;
    \$next\val_in$1  = val_in;
  end
  always @* begin
    \$next\valid  = 1'h0;
    \$next\valid  = valid_in;
  end
  always @* begin
    \$next\end_in$2  = 1'h0;
    \$next\end_in$2  = end_in;
  end
  always @* begin
    \$next\val_in_mns  = 17'h00000;
    \$next\val_in_mns  = vals_in_mns;
  end
  always @* begin
    \$next\ssss  = 5'h00;
    \$next\ssss  = \ssss$4 ;
  end
  always @* begin
    \$next\val_out  = 16'h0000;
    \$next\val_out  = \val_out$3 ;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = valid_o;
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = \end_out$5 ;
  end
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign val_out = \$next\val_out ;
  assign ssss = \$next\ssss ;
  assign val_in_mns = \$next\val_in_mns ;
  assign \end_in$2  = \$next\end_in$2 ;
  assign valid = \$next\valid ;
  assign \val_in$1  = \$next\val_in$1 ;
endmodule

