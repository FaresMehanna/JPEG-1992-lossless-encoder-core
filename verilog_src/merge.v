/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top.anonymous" *)
(* generator = "nMigen" *)
module anonymous(enc_in_ctr1, enc_in_ctr2, enc_in1, enc_in2, rst, clk, enc_out_ctr, enc_out, valid_out, valid_in);
  wire [5:0] \$1 ;
  wire [61:0] \$3 ;
  wire [61:0] \$5 ;
  (* src = "./migen_src/merge.py:17" *)
  reg [61:0] \$next\enc_out ;
  (* src = "./migen_src/merge.py:18" *)
  reg [5:0] \$next\enc_out_ctr ;
  (* src = "./migen_src/merge.py:21" *)
  reg \$next\valid_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "./migen_src/merge.py:11" *)
  input [30:0] enc_in1;
  (* src = "./migen_src/merge.py:14" *)
  input [30:0] enc_in2;
  (* src = "./migen_src/merge.py:12" *)
  input [4:0] enc_in_ctr1;
  (* src = "./migen_src/merge.py:15" *)
  input [4:0] enc_in_ctr2;
  (* init = 62'h0000000000000000 *)
  (* src = "./migen_src/merge.py:17" *)
  output [61:0] enc_out;
  reg [61:0] enc_out = 62'h0000000000000000;
  (* init = 6'h00 *)
  (* src = "./migen_src/merge.py:18" *)
  output [5:0] enc_out_ctr;
  reg [5:0] enc_out_ctr = 6'h00;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/merge.py:20" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "./migen_src/merge.py:21" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$1  = enc_in_ctr1 + (* src = "./migen_src/merge.py:35" *) enc_in_ctr2;
  assign \$3  = enc_in1 <<< (* src = "./migen_src/merge.py:36" *) enc_in_ctr2;
  assign \$5  = \$3  | (* src = "./migen_src/merge.py:36" *) enc_in2;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      enc_out <= \$next\enc_out ;
  always @(posedge clk)
      enc_out_ctr <= \$next\enc_out_ctr ;
  always @* begin
    \$next\enc_out_ctr  = enc_out_ctr;
    casez (valid_in)
      1'h1:
          \$next\enc_out_ctr  = \$1 ;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out_ctr  = 6'h00;
    endcase
  end
  always @* begin
    \$next\enc_out  = enc_out;
    casez (valid_in)
      1'h1:
          \$next\enc_out  = \$5 ;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out  = 62'h0000000000000000;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    \$next\valid_out  = valid_in;
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
endmodule

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(enc_in, enc_in_ctr, \enc_in$1 , \enc_in_ctr$2 , rst, clk, enc_out, enc_out_ctr, valid_out, valid_in);
  wire [20:0] \$8 ;
  wire [20:0] \$9 ;
  (* src = "./migen_src/merge.py:74" *)
  reg [19:0] \$next\debug_counter ;
  (* src = "./migen_src/merge.py:11" *)
  reg [30:0] \$next\enc_in1 ;
  (* src = "./migen_src/merge.py:14" *)
  reg [30:0] \$next\enc_in2 ;
  (* src = "./migen_src/merge.py:12" *)
  reg [4:0] \$next\enc_in_ctr1 ;
  (* src = "./migen_src/merge.py:15" *)
  reg [4:0] \$next\enc_in_ctr2 ;
  (* src = "./migen_src/merge.py:68" *)
  reg [61:0] \$next\enc_out ;
  (* src = "./migen_src/merge.py:69" *)
  reg [5:0] \$next\enc_out_ctr ;
  (* src = "./migen_src/merge.py:20" *)
  reg \$next\valid_in$3 ;
  (* src = "./migen_src/merge.py:72" *)
  reg \$next\valid_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* init = 20'h00000 *)
  (* src = "./migen_src/merge.py:74" *)
  reg [19:0] debug_counter = 20'h00000;
  (* src = "./migen_src/merge.py:65" *)
  input [30:0] enc_in;
  (* src = "./migen_src/merge.py:65" *)
  input [30:0] \enc_in$1 ;
  (* src = "./migen_src/merge.py:11" *)
  wire [30:0] enc_in1;
  (* src = "./migen_src/merge.py:14" *)
  wire [30:0] enc_in2;
  (* src = "./migen_src/merge.py:66" *)
  input [4:0] enc_in_ctr;
  (* src = "./migen_src/merge.py:66" *)
  input [4:0] \enc_in_ctr$2 ;
  (* src = "./migen_src/merge.py:12" *)
  wire [4:0] enc_in_ctr1;
  (* src = "./migen_src/merge.py:15" *)
  wire [4:0] enc_in_ctr2;
  (* src = "./migen_src/merge.py:68" *)
  output [61:0] enc_out;
  (* src = "./migen_src/merge.py:17" *)
  wire [61:0] \enc_out$5 ;
  (* src = "./migen_src/merge.py:69" *)
  output [5:0] enc_out_ctr;
  (* src = "./migen_src/merge.py:18" *)
  wire [5:0] \enc_out_ctr$4 ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/merge.py:71" *)
  input valid_in;
  (* src = "./migen_src/merge.py:20" *)
  wire \valid_in$3 ;
  (* src = "./migen_src/merge.py:72" *)
  output valid_out;
  (* src = "./migen_src/merge.py:21" *)
  wire \valid_out$6 ;
  assign \$9  = debug_counter + (* src = "./migen_src/merge.py:113" *) 1'h1;
  anonymous \$7  (
    .clk(clk),
    .enc_in1(enc_in1),
    .enc_in2(enc_in2),
    .enc_in_ctr1(enc_in_ctr1),
    .enc_in_ctr2(enc_in_ctr2),
    .enc_out(\enc_out$5 ),
    .enc_out_ctr(\enc_out_ctr$4 ),
    .rst(rst),
    .valid_in(\valid_in$3 ),
    .valid_out(\valid_out$6 )
  );
  always @(posedge clk)
      debug_counter <= \$next\debug_counter ;
  always @* begin
    \$next\debug_counter  = debug_counter;
    casez (valid_in)
      1'h1:
          \$next\debug_counter  = \$8 [19:0];
    endcase
    casez (rst)
      1'h1:
          \$next\debug_counter  = 20'h00000;
    endcase
  end
  always @* begin
    \$next\enc_in1  = 31'h00000000;
    \$next\enc_in1  = enc_in;
  end
  always @* begin
    \$next\enc_in_ctr1  = 5'h00;
    \$next\enc_in_ctr1  = enc_in_ctr;
  end
  always @* begin
    \$next\valid_in$3  = 1'h0;
    \$next\valid_in$3  = valid_in;
  end
  always @* begin
    \$next\enc_in2  = 31'h00000000;
    \$next\enc_in2  = \enc_in$1 ;
  end
  always @* begin
    \$next\enc_in_ctr2  = 5'h00;
    \$next\enc_in_ctr2  = \enc_in_ctr$2 ;
  end
  always @* begin
    \$next\enc_out  = 62'h0000000000000000;
    \$next\enc_out  = \enc_out$5 ;
  end
  always @* begin
    \$next\enc_out_ctr  = 6'h00;
    \$next\enc_out_ctr  = \enc_out_ctr$4 ;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = \valid_out$6 ;
  end
  assign \$8  = \$9 ;
  assign valid_out = \$next\valid_out ;
  assign enc_out_ctr = \$next\enc_out_ctr ;
  assign enc_out = \$next\enc_out ;
  assign enc_in_ctr2 = \$next\enc_in_ctr2 ;
  assign enc_in2 = \$next\enc_in2 ;
  assign \valid_in$3  = \$next\valid_in$3 ;
  assign enc_in_ctr1 = \$next\enc_in_ctr1 ;
  assign enc_in1 = \$next\enc_in1 ;
endmodule

