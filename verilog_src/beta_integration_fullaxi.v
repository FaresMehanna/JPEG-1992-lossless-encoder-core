/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top.address_gen_read" *)
(* generator = "nMigen" *)
module address_gen_read(address_latch, rst, clk, address_o, address_valid, starting_address);
  wire [32:0] \$1 ;
  wire [32:0] \$2 ;
  wire [32:0] \$4 ;
  wire [32:0] \$5 ;
  (* src = "address_generator.py:35" *)
  reg [31:0] \$next\address_o ;
  (* src = "address_generator.py:36" *)
  reg \$next\address_valid ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg \$next\fsm_state ;
  (* src = "address_generator.py:37" *)
  input address_latch;
  (* init = 32'd0 *)
  (* src = "address_generator.py:35" *)
  output [31:0] address_o;
  reg [31:0] address_o = 32'd0;
  (* init = 1'h0 *)
  (* src = "address_generator.py:36" *)
  output address_valid;
  reg address_valid = 1'h0;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 1'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg fsm_state = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "address_generator.py:39" *)
  input [31:0] starting_address;
  assign \$2  = address_o + (* src = "address_generator.py:58" *) 8'h80;
  assign \$5  = address_o + (* src = "address_generator.py:64" *) 8'h80;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      address_valid <= \$next\address_valid ;
  always @(posedge clk)
      address_o <= \$next\address_o ;
  always @* begin
    \$next\address_o  = address_o;
    casez (fsm_state)
      1'h0:
        begin
          \$next\address_o  = starting_address;
          casez (address_latch)
            1'h1:
                \$next\address_o  = \$1 [31:0];
          endcase
        end
      1'h1:
          casez (address_latch)
            1'h1:
                \$next\address_o  = \$4 [31:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\address_o  = 32'd0;
    endcase
  end
  always @* begin
    \$next\address_valid  = address_valid;
    casez (fsm_state)
      1'h0:
          \$next\address_valid  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\address_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      1'h0:
          casez (address_latch)
            1'h1:
                \$next\fsm_state  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 1'h0;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
endmodule

(* \nmigen.hierarchy  = "top.address_gen_write" *)
(* generator = "nMigen" *)
module address_gen_write(address_latch, rst, clk, address_o, address_valid, starting_address);
  wire [32:0] \$1 ;
  wire [32:0] \$2 ;
  wire [32:0] \$4 ;
  wire [32:0] \$5 ;
  (* src = "address_generator.py:35" *)
  reg [31:0] \$next\address_o ;
  (* src = "address_generator.py:36" *)
  reg \$next\address_valid ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg \$next\fsm_state ;
  (* src = "address_generator.py:37" *)
  input address_latch;
  (* init = 32'd0 *)
  (* src = "address_generator.py:35" *)
  output [31:0] address_o;
  reg [31:0] address_o = 32'd0;
  (* init = 1'h0 *)
  (* src = "address_generator.py:36" *)
  output address_valid;
  reg address_valid = 1'h0;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 1'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg fsm_state = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "address_generator.py:39" *)
  input [31:0] starting_address;
  assign \$2  = address_o + (* src = "address_generator.py:58" *) 8'h80;
  assign \$5  = address_o + (* src = "address_generator.py:64" *) 8'h80;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      address_valid <= \$next\address_valid ;
  always @(posedge clk)
      address_o <= \$next\address_o ;
  always @* begin
    \$next\address_o  = address_o;
    casez (fsm_state)
      1'h0:
        begin
          \$next\address_o  = starting_address;
          casez (address_latch)
            1'h1:
                \$next\address_o  = \$1 [31:0];
          endcase
        end
      1'h1:
          casez (address_latch)
            1'h1:
                \$next\address_o  = \$4 [31:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\address_o  = 32'd0;
    endcase
  end
  always @* begin
    \$next\address_valid  = address_valid;
    casez (fsm_state)
      1'h0:
          \$next\address_valid  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\address_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      1'h0:
          casez (address_latch)
            1'h1:
                \$next\fsm_state  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 1'h0;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.normalize.anonymous" *)
(* generator = "nMigen" *)
module anonymous(val_in, val_in_mns, end_in, rst, clk, val_out, ssss, valid_o, end_out, valid);
  wire \$1 ;
  wire [13:0] \$11 ;
  wire [13:0] \$12 ;
  wire [13:0] \$14 ;
  wire [13:0] \$15 ;
  wire [13:0] \$17 ;
  wire [13:0] \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire [13:0] \$24 ;
  wire [13:0] \$25 ;
  wire [13:0] \$27 ;
  wire [13:0] \$28 ;
  wire \$3 ;
  wire [13:0] \$30 ;
  wire [13:0] \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire [13:0] \$39 ;
  wire [13:0] \$40 ;
  wire [13:0] \$42 ;
  wire [13:0] \$43 ;
  wire [13:0] \$45 ;
  wire [13:0] \$46 ;
  wire \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire [13:0] \$52 ;
  wire [13:0] \$53 ;
  wire [13:0] \$55 ;
  wire [13:0] \$56 ;
  wire [13:0] \$58 ;
  wire [13:0] \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$9 ;
  (* src = "normalize.py:133" *)
  reg \$next\end_out ;
  (* src = "normalize.py:126" *)
  reg [4:0] \$next\ssss ;
  (* src = "normalize.py:124" *)
  reg [11:0] \$next\val_out ;
  (* src = "normalize.py:129" *)
  reg \$next\valid_o ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "normalize.py:132" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "normalize.py:133" *)
  output end_out;
  reg end_out = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* init = 5'h00 *)
  (* src = "normalize.py:126" *)
  output [4:0] ssss;
  reg [4:0] ssss = 5'h00;
  (* src = "normalize.py:119" *)
  input [12:0] val_in;
  (* src = "normalize.py:121" *)
  input [12:0] val_in_mns;
  (* init = 12'h000 *)
  (* src = "normalize.py:124" *)
  output [11:0] val_out;
  reg [11:0] val_out = 12'h000;
  (* src = "normalize.py:128" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "normalize.py:129" *)
  output valid_o;
  reg valid_o = 1'h0;
  assign \$9  = val_in_mns[12:1] == (* src = "normalize.py:65" *) 12'hfff;
  assign \$12  = val_in + (* src = "normalize.py:67" *) 1'h1;
  assign \$15  = val_in + (* src = "normalize.py:72" *) 2'h3;
  assign \$18  = val_in + (* src = "normalize.py:58" *) 3'h7;
  assign \$1  = val_in[12] == (* src = "normalize.py:156" *) 1'h1;
  assign \$20  = val_in_mns[12:5] == (* src = "normalize.py:81" *) 8'hff;
  assign \$22  = val_in_mns[12:4] == (* src = "normalize.py:65" *) 9'h1ff;
  assign \$25  = val_in + (* src = "normalize.py:67" *) 4'hf;
  assign \$28  = val_in + (* src = "normalize.py:72" *) 5'h1f;
  assign \$31  = val_in + (* src = "normalize.py:58" *) 6'h3f;
  assign \$33  = val_in_mns[12:9] == (* src = "normalize.py:81" *) 4'hf;
  assign \$35  = val_in_mns[12:8] == (* src = "normalize.py:81" *) 5'h1f;
  assign \$37  = val_in_mns[12:7] == (* src = "normalize.py:65" *) 6'h3f;
  assign \$3  = val_in_mns[12:6] == (* src = "normalize.py:81" *) 7'h7f;
  assign \$40  = val_in + (* src = "normalize.py:67" *) 7'h7f;
  assign \$43  = val_in + (* src = "normalize.py:72" *) 8'hff;
  assign \$46  = val_in + (* src = "normalize.py:58" *) 9'h1ff;
  assign \$48  = val_in_mns[12:11] == (* src = "normalize.py:81" *) 2'h3;
  assign \$50  = val_in_mns[12:10] == (* src = "normalize.py:65" *) 3'h7;
  assign \$53  = val_in + (* src = "normalize.py:67" *) 10'h3ff;
  assign \$56  = val_in + (* src = "normalize.py:72" *) 11'h7ff;
  assign \$5  = val_in_mns[12:3] == (* src = "normalize.py:81" *) 10'h3ff;
  assign \$59  = val_in + (* src = "normalize.py:58" *) 12'hfff;
  assign \$61  = val_in[12] == (* src = "normalize.py:156" *) 1'h1;
  assign \$63  = val_in_mns[12:6] == (* src = "normalize.py:81" *) 7'h7f;
  assign \$65  = val_in_mns[12:3] == (* src = "normalize.py:81" *) 10'h3ff;
  assign \$67  = val_in_mns[12:2] == (* src = "normalize.py:81" *) 11'h7ff;
  assign \$69  = val_in_mns[12:1] == (* src = "normalize.py:65" *) 12'hfff;
  assign \$71  = val_in_mns[12:5] == (* src = "normalize.py:81" *) 8'hff;
  assign \$73  = val_in_mns[12:4] == (* src = "normalize.py:65" *) 9'h1ff;
  assign \$75  = val_in_mns[12:9] == (* src = "normalize.py:81" *) 4'hf;
  assign \$77  = val_in_mns[12:8] == (* src = "normalize.py:81" *) 5'h1f;
  assign \$7  = val_in_mns[12:2] == (* src = "normalize.py:81" *) 11'h7ff;
  assign \$79  = val_in_mns[12:7] == (* src = "normalize.py:65" *) 6'h3f;
  assign \$81  = val_in_mns[12:11] == (* src = "normalize.py:81" *) 2'h3;
  assign \$83  = val_in_mns[12:10] == (* src = "normalize.py:65" *) 3'h7;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      valid_o <= \$next\valid_o ;
  always @(posedge clk)
      ssss <= \$next\ssss ;
  always @(posedge clk)
      val_out <= \$next\val_out ;
  always @* begin
    \$next\val_out  = val_out;
    casez (valid)
      1'h1:
          casez (\$1 )
            1'h1:
                casez (\$3 )
                  1'h1:
                      casez (\$5 )
                        1'h1:
                            casez (\$7 )
                              1'h1:
                                  casez (\$9 )
                                    1'h1:
                                        \$next\val_out  = \$11 [11:0];
                                    1'hz:
                                        \$next\val_out  = \$14 [11:0];
                                  endcase
                              1'hz:
                                  \$next\val_out  = \$17 [11:0];
                            endcase
                        1'hz:
                            casez (\$20 )
                              1'h1:
                                  casez (\$22 )
                                    1'h1:
                                        \$next\val_out  = \$24 [11:0];
                                    1'hz:
                                        \$next\val_out  = \$27 [11:0];
                                  endcase
                              1'hz:
                                  \$next\val_out  = \$30 [11:0];
                            endcase
                      endcase
                  1'hz:
                      casez (\$33 )
                        1'h1:
                            casez (\$35 )
                              1'h1:
                                  casez (\$37 )
                                    1'h1:
                                        \$next\val_out  = \$39 [11:0];
                                    1'hz:
                                        \$next\val_out  = \$42 [11:0];
                                  endcase
                              1'hz:
                                  \$next\val_out  = \$45 [11:0];
                            endcase
                        1'hz:
                            casez (\$48 )
                              1'h1:
                                  casez (\$50 )
                                    1'h1:
                                        \$next\val_out  = \$52 [11:0];
                                    1'hz:
                                        \$next\val_out  = \$55 [11:0];
                                  endcase
                              1'hz:
                                  \$next\val_out  = \$58 [11:0];
                            endcase
                      endcase
                endcase
            1'hz:
                \$next\val_out  = val_in[11:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\val_out  = 12'h000;
    endcase
  end
  always @* begin
    \$next\ssss  = ssss;
    casez (valid)
      1'h1:
          casez (\$61 )
            1'h1:
                casez (\$63 )
                  1'h1:
                      casez (\$65 )
                        1'h1:
                            casez (\$67 )
                              1'h1:
                                  casez (\$69 )
                                    1'h1:
                                        \$next\ssss  = 5'h01;
                                    1'hz:
                                        \$next\ssss  = 5'h02;
                                  endcase
                              1'hz:
                                  \$next\ssss  = 5'h03;
                            endcase
                        1'hz:
                            casez (\$71 )
                              1'h1:
                                  casez (\$73 )
                                    1'h1:
                                        \$next\ssss  = 5'h04;
                                    1'hz:
                                        \$next\ssss  = 5'h05;
                                  endcase
                              1'hz:
                                  \$next\ssss  = 5'h06;
                            endcase
                      endcase
                  1'hz:
                      casez (\$75 )
                        1'h1:
                            casez (\$77 )
                              1'h1:
                                  casez (\$79 )
                                    1'h1:
                                        \$next\ssss  = 5'h07;
                                    1'hz:
                                        \$next\ssss  = 5'h08;
                                  endcase
                              1'hz:
                                  \$next\ssss  = 5'h09;
                            endcase
                        1'hz:
                            casez (\$81 )
                              1'h1:
                                  casez (\$83 )
                                    1'h1:
                                        \$next\ssss  = 5'h0a;
                                    1'hz:
                                        \$next\ssss  = 5'h0b;
                                  endcase
                              1'hz:
                                  \$next\ssss  = 5'h0c;
                            endcase
                      endcase
                endcase
            1'hz:
              begin
                \$next\ssss  = 5'h00;
                casez ({ val_in[0], val_in[1], val_in[2], val_in[3], val_in[4], val_in[5], val_in[6], val_in[7], val_in[8], val_in[9], val_in[10], val_in[11] })
                  12'bzzzzzzzzzzz1:
                      \$next\ssss  = 5'h0c;
                  12'bzzzzzzzzzz1z:
                      \$next\ssss  = 5'h0b;
                  12'bzzzzzzzzz1zz:
                      \$next\ssss  = 5'h0a;
                  12'bzzzzzzzz1zzz:
                      \$next\ssss  = 5'h09;
                  12'bzzzzzzz1zzzz:
                      \$next\ssss  = 5'h08;
                  12'bzzzzzz1zzzzz:
                      \$next\ssss  = 5'h07;
                  12'bzzzzz1zzzzzz:
                      \$next\ssss  = 5'h06;
                  12'bzzzz1zzzzzzz:
                      \$next\ssss  = 5'h05;
                  12'bzzz1zzzzzzzz:
                      \$next\ssss  = 5'h04;
                  12'bzz1zzzzzzzzz:
                      \$next\ssss  = 5'h03;
                  12'bz1zzzzzzzzzz:
                      \$next\ssss  = 5'h02;
                  12'b1zzzzzzzzzzz:
                      \$next\ssss  = 5'h01;
                endcase
              end
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\ssss  = 5'h00;
    endcase
  end
  always @* begin
    \$next\valid_o  = valid_o;
    \$next\valid_o  = valid;
    casez (rst)
      1'h1:
          \$next\valid_o  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    \$next\end_out  = end_in;
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  assign \$11  = \$12 ;
  assign \$14  = \$15 ;
  assign \$17  = \$18 ;
  assign \$24  = \$25 ;
  assign \$27  = \$28 ;
  assign \$30  = \$31 ;
  assign \$39  = \$40 ;
  assign \$42  = \$43 ;
  assign \$45  = \$46 ;
  assign \$52  = \$53 ;
  assign \$55  = \$56 ;
  assign \$58  = \$59 ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.normalize.anonymous" *)
(* generator = "nMigen" *)
module \anonymous$2 (val_in, val_in_mns, end_in, rst, clk, val_out, ssss, valid);
  wire \$1 ;
  wire [13:0] \$11 ;
  wire [13:0] \$12 ;
  wire [13:0] \$14 ;
  wire [13:0] \$15 ;
  wire [13:0] \$17 ;
  wire [13:0] \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire [13:0] \$24 ;
  wire [13:0] \$25 ;
  wire [13:0] \$27 ;
  wire [13:0] \$28 ;
  wire \$3 ;
  wire [13:0] \$30 ;
  wire [13:0] \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire [13:0] \$39 ;
  wire [13:0] \$40 ;
  wire [13:0] \$42 ;
  wire [13:0] \$43 ;
  wire [13:0] \$45 ;
  wire [13:0] \$46 ;
  wire \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire [13:0] \$52 ;
  wire [13:0] \$53 ;
  wire [13:0] \$55 ;
  wire [13:0] \$56 ;
  wire [13:0] \$58 ;
  wire [13:0] \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$9 ;
  (* src = "normalize.py:133" *)
  reg \$next\end_out ;
  (* src = "normalize.py:126" *)
  reg [4:0] \$next\ssss ;
  (* src = "normalize.py:124" *)
  reg [11:0] \$next\val_out ;
  (* src = "normalize.py:129" *)
  reg \$next\valid_o ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "normalize.py:132" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "normalize.py:133" *)
  reg end_out = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* init = 5'h00 *)
  (* src = "normalize.py:126" *)
  output [4:0] ssss;
  reg [4:0] ssss = 5'h00;
  (* src = "normalize.py:119" *)
  input [12:0] val_in;
  (* src = "normalize.py:121" *)
  input [12:0] val_in_mns;
  (* init = 12'h000 *)
  (* src = "normalize.py:124" *)
  output [11:0] val_out;
  reg [11:0] val_out = 12'h000;
  (* src = "normalize.py:128" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "normalize.py:129" *)
  reg valid_o = 1'h0;
  assign \$9  = val_in_mns[12:1] == (* src = "normalize.py:65" *) 12'hfff;
  assign \$12  = val_in + (* src = "normalize.py:67" *) 1'h1;
  assign \$15  = val_in + (* src = "normalize.py:72" *) 2'h3;
  assign \$18  = val_in + (* src = "normalize.py:58" *) 3'h7;
  assign \$1  = val_in[12] == (* src = "normalize.py:156" *) 1'h1;
  assign \$20  = val_in_mns[12:5] == (* src = "normalize.py:81" *) 8'hff;
  assign \$22  = val_in_mns[12:4] == (* src = "normalize.py:65" *) 9'h1ff;
  assign \$25  = val_in + (* src = "normalize.py:67" *) 4'hf;
  assign \$28  = val_in + (* src = "normalize.py:72" *) 5'h1f;
  assign \$31  = val_in + (* src = "normalize.py:58" *) 6'h3f;
  assign \$33  = val_in_mns[12:9] == (* src = "normalize.py:81" *) 4'hf;
  assign \$35  = val_in_mns[12:8] == (* src = "normalize.py:81" *) 5'h1f;
  assign \$37  = val_in_mns[12:7] == (* src = "normalize.py:65" *) 6'h3f;
  assign \$3  = val_in_mns[12:6] == (* src = "normalize.py:81" *) 7'h7f;
  assign \$40  = val_in + (* src = "normalize.py:67" *) 7'h7f;
  assign \$43  = val_in + (* src = "normalize.py:72" *) 8'hff;
  assign \$46  = val_in + (* src = "normalize.py:58" *) 9'h1ff;
  assign \$48  = val_in_mns[12:11] == (* src = "normalize.py:81" *) 2'h3;
  assign \$50  = val_in_mns[12:10] == (* src = "normalize.py:65" *) 3'h7;
  assign \$53  = val_in + (* src = "normalize.py:67" *) 10'h3ff;
  assign \$56  = val_in + (* src = "normalize.py:72" *) 11'h7ff;
  assign \$5  = val_in_mns[12:3] == (* src = "normalize.py:81" *) 10'h3ff;
  assign \$59  = val_in + (* src = "normalize.py:58" *) 12'hfff;
  assign \$61  = val_in[12] == (* src = "normalize.py:156" *) 1'h1;
  assign \$63  = val_in_mns[12:6] == (* src = "normalize.py:81" *) 7'h7f;
  assign \$65  = val_in_mns[12:3] == (* src = "normalize.py:81" *) 10'h3ff;
  assign \$67  = val_in_mns[12:2] == (* src = "normalize.py:81" *) 11'h7ff;
  assign \$69  = val_in_mns[12:1] == (* src = "normalize.py:65" *) 12'hfff;
  assign \$71  = val_in_mns[12:5] == (* src = "normalize.py:81" *) 8'hff;
  assign \$73  = val_in_mns[12:4] == (* src = "normalize.py:65" *) 9'h1ff;
  assign \$75  = val_in_mns[12:9] == (* src = "normalize.py:81" *) 4'hf;
  assign \$77  = val_in_mns[12:8] == (* src = "normalize.py:81" *) 5'h1f;
  assign \$7  = val_in_mns[12:2] == (* src = "normalize.py:81" *) 11'h7ff;
  assign \$79  = val_in_mns[12:7] == (* src = "normalize.py:65" *) 6'h3f;
  assign \$81  = val_in_mns[12:11] == (* src = "normalize.py:81" *) 2'h3;
  assign \$83  = val_in_mns[12:10] == (* src = "normalize.py:65" *) 3'h7;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      valid_o <= \$next\valid_o ;
  always @(posedge clk)
      ssss <= \$next\ssss ;
  always @(posedge clk)
      val_out <= \$next\val_out ;
  always @* begin
    \$next\val_out  = val_out;
    casez (valid)
      1'h1:
          casez (\$1 )
            1'h1:
                casez (\$3 )
                  1'h1:
                      casez (\$5 )
                        1'h1:
                            casez (\$7 )
                              1'h1:
                                  casez (\$9 )
                                    1'h1:
                                        \$next\val_out  = \$11 [11:0];
                                    1'hz:
                                        \$next\val_out  = \$14 [11:0];
                                  endcase
                              1'hz:
                                  \$next\val_out  = \$17 [11:0];
                            endcase
                        1'hz:
                            casez (\$20 )
                              1'h1:
                                  casez (\$22 )
                                    1'h1:
                                        \$next\val_out  = \$24 [11:0];
                                    1'hz:
                                        \$next\val_out  = \$27 [11:0];
                                  endcase
                              1'hz:
                                  \$next\val_out  = \$30 [11:0];
                            endcase
                      endcase
                  1'hz:
                      casez (\$33 )
                        1'h1:
                            casez (\$35 )
                              1'h1:
                                  casez (\$37 )
                                    1'h1:
                                        \$next\val_out  = \$39 [11:0];
                                    1'hz:
                                        \$next\val_out  = \$42 [11:0];
                                  endcase
                              1'hz:
                                  \$next\val_out  = \$45 [11:0];
                            endcase
                        1'hz:
                            casez (\$48 )
                              1'h1:
                                  casez (\$50 )
                                    1'h1:
                                        \$next\val_out  = \$52 [11:0];
                                    1'hz:
                                        \$next\val_out  = \$55 [11:0];
                                  endcase
                              1'hz:
                                  \$next\val_out  = \$58 [11:0];
                            endcase
                      endcase
                endcase
            1'hz:
                \$next\val_out  = val_in[11:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\val_out  = 12'h000;
    endcase
  end
  always @* begin
    \$next\ssss  = ssss;
    casez (valid)
      1'h1:
          casez (\$61 )
            1'h1:
                casez (\$63 )
                  1'h1:
                      casez (\$65 )
                        1'h1:
                            casez (\$67 )
                              1'h1:
                                  casez (\$69 )
                                    1'h1:
                                        \$next\ssss  = 5'h01;
                                    1'hz:
                                        \$next\ssss  = 5'h02;
                                  endcase
                              1'hz:
                                  \$next\ssss  = 5'h03;
                            endcase
                        1'hz:
                            casez (\$71 )
                              1'h1:
                                  casez (\$73 )
                                    1'h1:
                                        \$next\ssss  = 5'h04;
                                    1'hz:
                                        \$next\ssss  = 5'h05;
                                  endcase
                              1'hz:
                                  \$next\ssss  = 5'h06;
                            endcase
                      endcase
                  1'hz:
                      casez (\$75 )
                        1'h1:
                            casez (\$77 )
                              1'h1:
                                  casez (\$79 )
                                    1'h1:
                                        \$next\ssss  = 5'h07;
                                    1'hz:
                                        \$next\ssss  = 5'h08;
                                  endcase
                              1'hz:
                                  \$next\ssss  = 5'h09;
                            endcase
                        1'hz:
                            casez (\$81 )
                              1'h1:
                                  casez (\$83 )
                                    1'h1:
                                        \$next\ssss  = 5'h0a;
                                    1'hz:
                                        \$next\ssss  = 5'h0b;
                                  endcase
                              1'hz:
                                  \$next\ssss  = 5'h0c;
                            endcase
                      endcase
                endcase
            1'hz:
              begin
                \$next\ssss  = 5'h00;
                casez ({ val_in[0], val_in[1], val_in[2], val_in[3], val_in[4], val_in[5], val_in[6], val_in[7], val_in[8], val_in[9], val_in[10], val_in[11] })
                  12'bzzzzzzzzzzz1:
                      \$next\ssss  = 5'h0c;
                  12'bzzzzzzzzzz1z:
                      \$next\ssss  = 5'h0b;
                  12'bzzzzzzzzz1zz:
                      \$next\ssss  = 5'h0a;
                  12'bzzzzzzzz1zzz:
                      \$next\ssss  = 5'h09;
                  12'bzzzzzzz1zzzz:
                      \$next\ssss  = 5'h08;
                  12'bzzzzzz1zzzzz:
                      \$next\ssss  = 5'h07;
                  12'bzzzzz1zzzzzz:
                      \$next\ssss  = 5'h06;
                  12'bzzzz1zzzzzzz:
                      \$next\ssss  = 5'h05;
                  12'bzzz1zzzzzzzz:
                      \$next\ssss  = 5'h04;
                  12'bzz1zzzzzzzzz:
                      \$next\ssss  = 5'h03;
                  12'bz1zzzzzzzzzz:
                      \$next\ssss  = 5'h02;
                  12'b1zzzzzzzzzzz:
                      \$next\ssss  = 5'h01;
                endcase
              end
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\ssss  = 5'h00;
    endcase
  end
  always @* begin
    \$next\valid_o  = valid_o;
    \$next\valid_o  = valid;
    casez (rst)
      1'h1:
          \$next\valid_o  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    \$next\end_out  = end_in;
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  assign \$11  = \$12 ;
  assign \$14  = \$15 ;
  assign \$17  = \$18 ;
  assign \$24  = \$25 ;
  assign \$27  = \$28 ;
  assign \$30  = \$31 ;
  assign \$39  = \$40 ;
  assign \$42  = \$43 ;
  assign \$45  = \$46 ;
  assign \$52  = \$53 ;
  assign \$55  = \$56 ;
  assign \$58  = \$59 ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.encode.anonymous" *)
(* generator = "nMigen" *)
module \anonymous$3 (end_in, ssss, val_in, rp_data, rst, clk, valid_out, end_out, rp_addr, enc_out, enc_ctr, valid_in);
  wire [32:0] \$1 ;
  wire [32:0] \$2 ;
  wire [5:0] \$4 ;
  wire [5:0] \$5 ;
  (* src = "encode.py:99" *)
  reg [4:0] \$next\enc_ctr ;
  (* src = "encode.py:97" *)
  reg [27:0] \$next\enc_out ;
  (* src = "encode.py:123" *)
  reg \$next\end_late ;
  (* src = "encode.py:107" *)
  reg \$next\end_out ;
  (* src = "encode.py:88" *)
  reg [4:0] \$next\rp_addr ;
  (* src = "encode.py:128" *)
  reg [4:0] \$next\ssss_late ;
  (* src = "encode.py:130" *)
  reg [11:0] \$next\val_in_late ;
  (* src = "encode.py:118" *)
  reg \$next\valid_late ;
  (* src = "encode.py:103" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 5'h00 *)
  (* src = "encode.py:99" *)
  output [4:0] enc_ctr;
  reg [4:0] enc_ctr = 5'h00;
  (* init = 28'h0000000 *)
  (* src = "encode.py:97" *)
  output [27:0] enc_out;
  reg [27:0] enc_out = 28'h0000000;
  (* src = "encode.py:106" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "encode.py:123" *)
  reg end_late = 1'h0;
  (* init = 1'h0 *)
  (* src = "encode.py:107" *)
  output end_out;
  reg end_out = 1'h0;
  (* src = "encode.py:88" *)
  output [4:0] rp_addr;
  (* src = "encode.py:89" *)
  input [32:0] rp_data;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "encode.py:94" *)
  input [4:0] ssss;
  (* init = 5'h00 *)
  (* src = "encode.py:128" *)
  reg [4:0] ssss_late = 5'h00;
  (* src = "encode.py:92" *)
  input [11:0] val_in;
  (* init = 12'h000 *)
  (* src = "encode.py:130" *)
  reg [11:0] val_in_late = 12'h000;
  (* src = "encode.py:102" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "encode.py:118" *)
  reg valid_late = 1'h0;
  (* init = 1'h0 *)
  (* src = "encode.py:103" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$2  = rp_data | (* src = "encode.py:156" *) val_in_late;
  assign \$5  = rp_data[32:28] + (* src = "encode.py:157" *) ssss_late[3:0];
  always @(posedge clk)
      enc_ctr <= \$next\enc_ctr ;
  always @(posedge clk)
      enc_out <= \$next\enc_out ;
  always @(posedge clk)
      val_in_late <= \$next\val_in_late ;
  always @(posedge clk)
      ssss_late <= \$next\ssss_late ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      end_late <= \$next\end_late ;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      valid_late <= \$next\valid_late ;
  always @* begin
    \$next\valid_late  = valid_late;
    \$next\valid_late  = valid_in;
    casez (rst)
      1'h1:
          \$next\valid_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    \$next\valid_out  = valid_late;
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_late  = end_late;
    \$next\end_late  = end_in;
    casez (rst)
      1'h1:
          \$next\end_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    \$next\end_out  = end_late;
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\ssss_late  = ssss_late;
    \$next\ssss_late  = ssss;
    casez (rst)
      1'h1:
          \$next\ssss_late  = 5'h00;
    endcase
  end
  always @* begin
    \$next\val_in_late  = val_in_late;
    \$next\val_in_late  = val_in;
    casez (rst)
      1'h1:
          \$next\val_in_late  = 12'h000;
    endcase
  end
  always @* begin
    \$next\rp_addr  = 5'h00;
    \$next\rp_addr  = ssss;
  end
  always @* begin
    \$next\enc_out  = enc_out;
    casez (valid_late)
      1'h1:
          \$next\enc_out  = \$1 [27:0];
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out  = 28'h0000000;
    endcase
  end
  always @* begin
    \$next\enc_ctr  = enc_ctr;
    casez (valid_late)
      1'h1:
          \$next\enc_ctr  = \$4 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\enc_ctr  = 5'h00;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
  assign rp_addr = \$next\rp_addr ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.encode.anonymous" *)
(* generator = "nMigen" *)
module \anonymous$4 (end_in, ssss, val_in, rp_data, rst, clk, rp_addr, enc_out, enc_ctr, valid_in);
  wire [32:0] \$1 ;
  wire [32:0] \$2 ;
  wire [5:0] \$4 ;
  wire [5:0] \$5 ;
  (* src = "encode.py:99" *)
  reg [4:0] \$next\enc_ctr ;
  (* src = "encode.py:97" *)
  reg [27:0] \$next\enc_out ;
  (* src = "encode.py:123" *)
  reg \$next\end_late ;
  (* src = "encode.py:107" *)
  reg \$next\end_out ;
  (* src = "encode.py:88" *)
  reg [4:0] \$next\rp_addr ;
  (* src = "encode.py:128" *)
  reg [4:0] \$next\ssss_late ;
  (* src = "encode.py:130" *)
  reg [11:0] \$next\val_in_late ;
  (* src = "encode.py:118" *)
  reg \$next\valid_late ;
  (* src = "encode.py:103" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 5'h00 *)
  (* src = "encode.py:99" *)
  output [4:0] enc_ctr;
  reg [4:0] enc_ctr = 5'h00;
  (* init = 28'h0000000 *)
  (* src = "encode.py:97" *)
  output [27:0] enc_out;
  reg [27:0] enc_out = 28'h0000000;
  (* src = "encode.py:106" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "encode.py:123" *)
  reg end_late = 1'h0;
  (* init = 1'h0 *)
  (* src = "encode.py:107" *)
  reg end_out = 1'h0;
  (* src = "encode.py:88" *)
  output [4:0] rp_addr;
  (* src = "encode.py:89" *)
  input [32:0] rp_data;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "encode.py:94" *)
  input [4:0] ssss;
  (* init = 5'h00 *)
  (* src = "encode.py:128" *)
  reg [4:0] ssss_late = 5'h00;
  (* src = "encode.py:92" *)
  input [11:0] val_in;
  (* init = 12'h000 *)
  (* src = "encode.py:130" *)
  reg [11:0] val_in_late = 12'h000;
  (* src = "encode.py:102" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "encode.py:118" *)
  reg valid_late = 1'h0;
  (* init = 1'h0 *)
  (* src = "encode.py:103" *)
  reg valid_out = 1'h0;
  assign \$2  = rp_data | (* src = "encode.py:156" *) val_in_late;
  assign \$5  = rp_data[32:28] + (* src = "encode.py:157" *) ssss_late[3:0];
  always @(posedge clk)
      enc_ctr <= \$next\enc_ctr ;
  always @(posedge clk)
      enc_out <= \$next\enc_out ;
  always @(posedge clk)
      val_in_late <= \$next\val_in_late ;
  always @(posedge clk)
      ssss_late <= \$next\ssss_late ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      end_late <= \$next\end_late ;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      valid_late <= \$next\valid_late ;
  always @* begin
    \$next\valid_late  = valid_late;
    \$next\valid_late  = valid_in;
    casez (rst)
      1'h1:
          \$next\valid_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    \$next\valid_out  = valid_late;
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_late  = end_late;
    \$next\end_late  = end_in;
    casez (rst)
      1'h1:
          \$next\end_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    \$next\end_out  = end_late;
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\ssss_late  = ssss_late;
    \$next\ssss_late  = ssss;
    casez (rst)
      1'h1:
          \$next\ssss_late  = 5'h00;
    endcase
  end
  always @* begin
    \$next\val_in_late  = val_in_late;
    \$next\val_in_late  = val_in;
    casez (rst)
      1'h1:
          \$next\val_in_late  = 12'h000;
    endcase
  end
  always @* begin
    \$next\rp_addr  = 5'h00;
    \$next\rp_addr  = ssss;
  end
  always @* begin
    \$next\enc_out  = enc_out;
    casez (valid_late)
      1'h1:
          \$next\enc_out  = \$1 [27:0];
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out  = 28'h0000000;
    endcase
  end
  always @* begin
    \$next\enc_ctr  = enc_ctr;
    casez (valid_late)
      1'h1:
          \$next\enc_ctr  = \$4 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\enc_ctr  = 5'h00;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
  assign rp_addr = \$next\rp_addr ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.merge.anonymous" *)
(* generator = "nMigen" *)
module \anonymous$5 (enc_in_ctr1, enc_in_ctr2, enc_in1, enc_in2, end_in, rst, clk, enc_out_ctr, enc_out, valid_out, end_out, valid_in);
  wire [5:0] \$1 ;
  wire [58:0] \$3 ;
  wire [58:0] \$4 ;
  wire [58:0] \$6 ;
  (* src = "merge.py:49" *)
  reg [55:0] \$next\enc_out ;
  (* src = "merge.py:50" *)
  reg [5:0] \$next\enc_out_ctr ;
  (* src = "merge.py:58" *)
  reg \$next\end_out ;
  (* src = "merge.py:54" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "merge.py:43" *)
  input [27:0] enc_in1;
  (* src = "merge.py:46" *)
  input [27:0] enc_in2;
  (* src = "merge.py:44" *)
  input [4:0] enc_in_ctr1;
  (* src = "merge.py:47" *)
  input [4:0] enc_in_ctr2;
  (* init = 56'h00000000000000 *)
  (* src = "merge.py:49" *)
  output [55:0] enc_out;
  reg [55:0] enc_out = 56'h00000000000000;
  (* init = 6'h00 *)
  (* src = "merge.py:50" *)
  output [5:0] enc_out_ctr;
  reg [5:0] enc_out_ctr = 6'h00;
  (* src = "merge.py:57" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "merge.py:58" *)
  output end_out;
  reg end_out = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "merge.py:53" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "merge.py:54" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$1  = enc_in_ctr1 + (* src = "merge.py:74" *) enc_in_ctr2;
  assign \$4  = enc_in1 <<< (* src = "merge.py:75" *) enc_in_ctr2;
  assign \$6  = \$4  | (* src = "merge.py:75" *) enc_in2;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      enc_out <= \$next\enc_out ;
  always @(posedge clk)
      enc_out_ctr <= \$next\enc_out_ctr ;
  always @* begin
    \$next\enc_out_ctr  = enc_out_ctr;
    casez (valid_in)
      1'h1:
          \$next\enc_out_ctr  = \$1 ;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out_ctr  = 6'h00;
    endcase
  end
  always @* begin
    \$next\enc_out  = enc_out;
    casez (valid_in)
      1'h1:
          \$next\enc_out  = \$3 [55:0];
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out  = 56'h00000000000000;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    \$next\valid_out  = valid_in;
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    \$next\end_out  = end_in;
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  assign \$3  = \$6 ;
endmodule

(* \nmigen.hierarchy  = "top.top.auto_reset" *)
(* generator = "nMigen" *)
module auto_reset(hs2_in, end_in, rst, clk, reset_out, hs1_in);
  wire \$1 ;
  wire \$3 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "auto_reset.py:43" *)
  reg \$next\reset_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "auto_reset.py:34" *)
  input end_in;
  (* src = "auto_reset.py:37" *)
  input hs1_in;
  (* src = "auto_reset.py:40" *)
  input hs2_in;
  (* init = 1'h0 *)
  (* src = "auto_reset.py:43" *)
  output reset_out;
  reg reset_out = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  assign \$9  = \$5  & (* src = "auto_reset.py:54" *) \$7 ;
  assign \$1  = hs1_in == (* src = "auto_reset.py:54" *) 1'h1;
  assign \$3  = hs2_in == (* src = "auto_reset.py:54" *) 1'h1;
  assign \$5  = \$1  & (* src = "auto_reset.py:54" *) \$3 ;
  assign \$7  = end_in == (* src = "auto_reset.py:54" *) 1'h1;
  always @(posedge clk)
      reset_out <= \$next\reset_out ;
  always @* begin
    \$next\reset_out  = reset_out;
    casez (\$9 )
      1'h1:
          \$next\reset_out  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\reset_out  = 1'h0;
    endcase
  end
endmodule

(* \nmigen.hierarchy  = "top.axihp_reader" *)
(* generator = "nMigen" *)
module axihp_reader(enable, addr_empty, addr_in, m_axi_ri__rvalid, data_full, m_axi_ri__rlast, m_axi_ri__rresp, m_axi_ri__rdata, m_axi_aclk_, rst, clk, m_axi_ro__araddr, m_axi_ro__arvalid, addr_enable, reader_error, data_out, m_axi_ro__rready, data_enable, inactive, m_axi_ro__arid, m_axi_ro__arlen, m_axi_ro__arburst, m_axi_ro__arsize, m_axi_ro__arprot, reader_active, m_axi_ri__arready);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire [4:0] \$51 ;
  wire [4:0] \$52 ;
  wire [4:0] \$54 ;
  wire [4:0] \$55 ;
  wire \$57 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "axihp_reader.py:69" *)
  reg [3:0] \$next\active ;
  (* src = "axihp_reader.py:25" *)
  reg \$next\addr_clk ;
  (* src = "axihp_reader.py:75" *)
  reg \$next\addr_en ;
  (* src = "axihp_reader.py:26" *)
  reg \$next\addr_enable ;
  (* src = "axihp_reader.py:66" *)
  reg [3:0] \$next\arlen_c ;
  (* src = "axihp_reader.py:70" *)
  reg \$next\arvalid ;
  (* src = "axihp_reader.py:20" *)
  reg \$next\data_clk ;
  (* src = "axihp_reader.py:74" *)
  reg \$next\data_en ;
  (* src = "axihp_reader.py:21" *)
  reg \$next\data_enable ;
  (* src = "axihp_reader.py:22" *)
  reg [63:0] \$next\data_out ;
  (* src = "axihp_reader.py:15" *)
  reg \$next\inactive ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [31:0] \$next\m_axi_ro__araddr ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [1:0] \$next\m_axi_ro__arburst ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [5:0] \$next\m_axi_ro__arid ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [3:0] \$next\m_axi_ro__arlen ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [2:0] \$next\m_axi_ro__arprot ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [1:0] \$next\m_axi_ro__arsize ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\m_axi_ro__arvalid ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\m_axi_ro__rready ;
  (* src = "axihp_reader.py:31" *)
  reg [3:0] \$next\reader_active ;
  (* src = "axihp_reader.py:30" *)
  reg \$next\reader_error ;
  (* src = "axihp_reader.py:72" *)
  reg \$next\rready ;
  (* init = 1'h0 *)
  reg \$verilog_initial_trigger  = 1'h0;
  (* init = 4'h0 *)
  (* src = "axihp_reader.py:69" *)
  reg [3:0] active = 4'h0;
  (* src = "axihp_reader.py:25" *)
  wire addr_clk;
  (* src = "axihp_reader.py:28" *)
  input addr_empty;
  (* src = "axihp_reader.py:75" *)
  wire addr_en;
  (* src = "axihp_reader.py:26" *)
  output addr_enable;
  (* src = "axihp_reader.py:27" *)
  input [31:0] addr_in;
  (* src = "axihp_reader.py:66" *)
  wire [3:0] arlen_c;
  (* init = 1'h0 *)
  (* src = "axihp_reader.py:70" *)
  reg arvalid = 1'h0;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "axihp_reader.py:20" *)
  wire data_clk;
  (* src = "axihp_reader.py:74" *)
  wire data_en;
  (* src = "axihp_reader.py:21" *)
  output data_enable;
  (* src = "axihp_reader.py:23" *)
  input data_full;
  (* src = "axihp_reader.py:22" *)
  output [63:0] data_out;
  (* src = "axihp_reader.py:14" *)
  input enable;
  (* src = "axihp_reader.py:15" *)
  output inactive;
  (* src = "axihp_reader.py:12" *)
  input m_axi_aclk_;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_ri__arready;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [63:0] m_axi_ri__rdata;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_ri__rlast;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [1:0] m_axi_ri__rresp;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_ri__rvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [31:0] m_axi_ro__araddr;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] m_axi_ro__arburst;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [5:0] m_axi_ro__arid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [3:0] m_axi_ro__arlen;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [2:0] m_axi_ro__arprot;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] m_axi_ro__arsize;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_ro__arvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_ro__rready;
  (* src = "axihp_reader.py:31" *)
  output [3:0] reader_active;
  (* src = "axihp_reader.py:30" *)
  output reader_error;
  (* init = 1'h0 *)
  (* src = "axihp_reader.py:72" *)
  reg rready = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  assign \$9  = enable == (* src = "axihp_reader.py:88" *) 1'h1;
  assign \$11  = addr_empty == (* src = "axihp_reader.py:88" *) 1'h0;
  assign \$13  = \$9  & (* src = "axihp_reader.py:88" *) \$11 ;
  assign \$15  = active[3] == (* src = "axihp_reader.py:88" *) 1'h0;
  assign \$17  = \$13  & (* src = "axihp_reader.py:88" *) \$15 ;
  assign \$1  = arvalid == (* src = "axihp_reader.py:83" *) 1'h1;
  assign \$19  = rready == (* src = "axihp_reader.py:107" *) 1'h1;
  assign \$21  = m_axi_ri__rvalid == (* src = "axihp_reader.py:107" *) 1'h1;
  assign \$23  = \$19  & (* src = "axihp_reader.py:107" *) \$21 ;
  assign \$25  = rready == (* src = "axihp_reader.py:110" *) 1'h0;
  assign \$27  = data_full == (* src = "axihp_reader.py:112" *) 1'h0;
  assign \$29  = active != (* src = "axihp_reader.py:112" *) 1'h0;
  assign \$31  = \$27  & (* src = "axihp_reader.py:112" *) \$29 ;
  assign \$33  = data_en == (* src = "axihp_reader.py:121" *) 1'h1;
  assign \$35  = m_axi_ri__rresp != (* src = "axihp_reader.py:121" *) 1'h0;
  assign \$37  = \$33  & (* src = "axihp_reader.py:121" *) \$35 ;
  assign \$3  = m_axi_ri__arready == (* src = "axihp_reader.py:83" *) 1'h1;
  assign \$39  = addr_en == (* src = "axihp_reader.py:133" *) 1'h1;
  assign \$41  = m_axi_ri__rlast == (* src = "axihp_reader.py:133" *) 1'h0;
  assign \$43  = \$39  & (* src = "axihp_reader.py:133" *) \$41 ;
  assign \$45  = addr_en == (* src = "axihp_reader.py:137" *) 1'h0;
  assign \$47  = m_axi_ri__rlast == (* src = "axihp_reader.py:137" *) 1'h1;
  assign \$49  = \$45  & (* src = "axihp_reader.py:137" *) \$47 ;
  assign \$52  = active + (* src = "axihp_reader.py:134" *) 1'h1;
  assign \$55  = active - (* src = "axihp_reader.py:138" *) 1'h1;
  assign \$57  = active == (* src = "axihp_reader.py:140" *) 1'h0;
  assign \$5  = \$1  & (* src = "axihp_reader.py:83" *) \$3 ;
  assign \$7  = arvalid == (* src = "axihp_reader.py:86" *) 1'h0;
  always @(posedge clk)
      active <= \$next\active ;
  always @(posedge clk)
      rready <= \$next\rready ;
  always @(posedge clk)
      arvalid <= \$next\arvalid ;
  always @* begin
    \$next\arlen_c  = 4'h0;
    \$next\arlen_c  = 4'hf;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\addr_en  = 1'h0;
    \$next\addr_en  = \$5 ;
  end
  always @* begin
    \$next\m_axi_ro__rready  = 1'h0;
    \$next\m_axi_ro__rready  = rready;
  end
  always @* begin
    \$next\data_enable  = 1'h0;
    \$next\data_enable  = data_en;
  end
  always @* begin
    \$next\active  = active;
    casez ({ \$49 , \$43  })
      2'bz1:
          \$next\active  = \$51 [3:0];
      2'b1z:
          \$next\active  = \$54 [3:0];
    endcase
    casez (rst)
      1'h1:
          \$next\active  = 4'h0;
    endcase
  end
  always @* begin
    \$next\inactive  = 1'h0;
    \$next\inactive  = \$57 ;
  end
  always @* begin
    \$next\m_axi_ro__arid  = 6'h00;
    \$next\m_axi_ro__arid  = 6'h00;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\m_axi_ro__arlen  = 4'h0;
    \$next\m_axi_ro__arlen  = arlen_c;
  end
  always @* begin
    \$next\m_axi_ro__arburst  = 2'h0;
    \$next\m_axi_ro__arburst  = 2'h1;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\m_axi_ro__arsize  = 2'h0;
    \$next\m_axi_ro__arsize  = 2'h3;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\m_axi_ro__arprot  = 3'h0;
    \$next\m_axi_ro__arprot  = 3'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\data_clk  = 1'h0;
    \$next\data_clk  = m_axi_aclk_;
  end
  always @* begin
    \$next\arvalid  = arvalid;
    casez (\$7 )
      1'h1:
          casez (\$17 )
            1'h1:
                \$next\arvalid  = 1'h1;
          endcase
    endcase
    casez (arvalid)
      1'h1:
          casez (m_axi_ri__arready)
            1'h1:
                \$next\arvalid  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\arvalid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\addr_clk  = 1'h0;
    \$next\addr_clk  = m_axi_aclk_;
  end
  always @* begin
    \$next\reader_active  = 4'h0;
    \$next\reader_active  = active;
  end
  always @* begin
    \$next\m_axi_ro__araddr  = 32'd0;
    \$next\m_axi_ro__araddr  = addr_in;
  end
  always @* begin
    \$next\m_axi_ro__arvalid  = 1'h0;
    \$next\m_axi_ro__arvalid  = arvalid;
  end
  always @* begin
    \$next\addr_enable  = 1'h0;
    \$next\addr_enable  = addr_en;
  end
  always @* begin
    \$next\data_en  = 1'h0;
    \$next\data_en  = \$23 ;
  end
  always @* begin
    \$next\rready  = rready;
    casez (\$25 )
      1'h1:
          casez (\$31 )
            1'h1:
                \$next\rready  = 1'h1;
          endcase
      1'hz:
          casez (m_axi_ri__rlast)
            1'h1:
                \$next\rready  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\rready  = 1'h0;
    endcase
  end
  always @* begin
    \$next\reader_error  = 1'h0;
    \$next\reader_error  = \$37 ;
  end
  always @* begin
    \$next\data_out  = 64'h0000000000000000;
    \$next\data_out  = m_axi_ri__rdata;
  end
  assign \$51  = \$52 ;
  assign \$54  = \$55 ;
  assign reader_active = \$next\reader_active ;
  assign addr_clk = \$next\addr_clk ;
  assign data_clk = \$next\data_clk ;
  assign m_axi_ro__arprot = \$next\m_axi_ro__arprot ;
  assign m_axi_ro__arsize = \$next\m_axi_ro__arsize ;
  assign m_axi_ro__arburst = \$next\m_axi_ro__arburst ;
  assign m_axi_ro__arlen = \$next\m_axi_ro__arlen ;
  assign m_axi_ro__arid = \$next\m_axi_ro__arid ;
  assign inactive = \$next\inactive ;
  assign data_enable = \$next\data_enable ;
  assign m_axi_ro__rready = \$next\m_axi_ro__rready ;
  assign data_out = \$next\data_out ;
  assign reader_error = \$next\reader_error ;
  assign data_en = \$next\data_en ;
  assign addr_enable = \$next\addr_enable ;
  assign m_axi_ro__arvalid = \$next\m_axi_ro__arvalid ;
  assign m_axi_ro__araddr = \$next\m_axi_ro__araddr ;
  assign addr_en = \$next\addr_en ;
  assign arlen_c = \$next\arlen_c ;
endmodule

(* \nmigen.hierarchy  = "top.axihp_writer" *)
(* generator = "nMigen" *)
module axihp_writer(enable, addr_empty, addr_in, m_axi_wi__wready, data_empty, data_in, m_axi_wi__bvalid, m_axi_wi__bresp, write_strobe, m_axi_aclk, rst, clk, m_axi_wo__awaddr, m_axi_wo__awvalid, addr_enable, m_axi_wo__wdata, m_axi_wo__wvalid, m_axi_wo__wlast, data_enable, m_axi_wo__bready, writer_error, inactive, m_axi_wo__awid, m_axi_wo__wid, m_axi_wo__awlen, m_axi_wo__awburst, m_axi_wo__awsize, m_axi_wo__wstrb, m_axi_wo__awprot, writer_active, writer_unconf, m_axi_wi__awready);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire [4:0] \$21 ;
  wire [4:0] \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire [4:0] \$68 ;
  wire [4:0] \$69 ;
  wire \$7 ;
  wire [4:0] \$71 ;
  wire [4:0] \$72 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$80 ;
  wire \$82 ;
  wire \$84 ;
  wire [4:0] \$86 ;
  wire [4:0] \$87 ;
  wire [4:0] \$89 ;
  wire \$9 ;
  wire [4:0] \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  (* src = "axihp_writer.py:79" *)
  reg [3:0] \$next\active ;
  (* src = "axihp_writer.py:20" *)
  reg \$next\addr_clk ;
  (* src = "axihp_writer.py:88" *)
  reg \$next\addr_en ;
  (* src = "axihp_writer.py:21" *)
  reg \$next\addr_enable ;
  (* src = "axihp_writer.py:76" *)
  reg [3:0] \$next\awlen_c ;
  (* src = "axihp_writer.py:82" *)
  reg \$next\awvalid ;
  (* src = "axihp_writer.py:85" *)
  reg \$next\bready ;
  (* src = "axihp_writer.py:121" *)
  reg [3:0] \$next\counter ;
  (* src = "axihp_writer.py:25" *)
  reg \$next\data_clk ;
  (* src = "axihp_writer.py:87" *)
  reg \$next\data_en ;
  (* src = "axihp_writer.py:26" *)
  reg \$next\data_enable ;
  (* src = "axihp_writer.py:15" *)
  reg \$next\inactive ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [31:0] \$next\m_axi_wo__awaddr ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [1:0] \$next\m_axi_wo__awburst ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [5:0] \$next\m_axi_wo__awid ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [3:0] \$next\m_axi_wo__awlen ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [2:0] \$next\m_axi_wo__awprot ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [1:0] \$next\m_axi_wo__awsize ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\m_axi_wo__awvalid ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\m_axi_wo__bready ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [63:0] \$next\m_axi_wo__wdata ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [5:0] \$next\m_axi_wo__wid ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\m_axi_wo__wlast ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [7:0] \$next\m_axi_wo__wstrb ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\m_axi_wo__wvalid ;
  (* src = "axihp_writer.py:89" *)
  reg \$next\resp_en ;
  (* src = "axihp_writer.py:80" *)
  reg [3:0] \$next\unconf ;
  (* src = "axihp_writer.py:84" *)
  reg \$next\wlast ;
  (* src = "axihp_writer.py:33" *)
  reg [3:0] \$next\writer_active ;
  (* src = "axihp_writer.py:32" *)
  reg \$next\writer_error ;
  (* src = "axihp_writer.py:34" *)
  reg [3:0] \$next\writer_unconf ;
  (* src = "axihp_writer.py:83" *)
  reg \$next\wvalid ;
  (* init = 1'h0 *)
  reg \$verilog_initial_trigger  = 1'h0;
  (* init = 4'h0 *)
  (* src = "axihp_writer.py:79" *)
  reg [3:0] active = 4'h0;
  (* src = "axihp_writer.py:20" *)
  wire addr_clk;
  (* src = "axihp_writer.py:23" *)
  input addr_empty;
  (* src = "axihp_writer.py:88" *)
  wire addr_en;
  (* src = "axihp_writer.py:21" *)
  output addr_enable;
  (* src = "axihp_writer.py:22" *)
  input [31:0] addr_in;
  (* src = "axihp_writer.py:76" *)
  wire [3:0] awlen_c;
  (* init = 1'h0 *)
  (* src = "axihp_writer.py:82" *)
  reg awvalid = 1'h0;
  (* init = 1'h0 *)
  (* src = "axihp_writer.py:85" *)
  reg bready = 1'h0;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 4'h0 *)
  (* src = "axihp_writer.py:121" *)
  reg [3:0] counter = 4'h0;
  (* src = "axihp_writer.py:25" *)
  wire data_clk;
  (* src = "axihp_writer.py:28" *)
  input data_empty;
  (* src = "axihp_writer.py:87" *)
  wire data_en;
  (* src = "axihp_writer.py:26" *)
  output data_enable;
  (* src = "axihp_writer.py:27" *)
  input [63:0] data_in;
  (* src = "axihp_writer.py:14" *)
  input enable;
  (* src = "axihp_writer.py:15" *)
  output inactive;
  (* src = "axihp_writer.py:12" *)
  input m_axi_aclk;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_wi__awready;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [1:0] m_axi_wi__bresp;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_wi__bvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_wi__wready;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [31:0] m_axi_wo__awaddr;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] m_axi_wo__awburst;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [5:0] m_axi_wo__awid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [3:0] m_axi_wo__awlen;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [2:0] m_axi_wo__awprot;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] m_axi_wo__awsize;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_wo__awvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_wo__bready;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [63:0] m_axi_wo__wdata;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [5:0] m_axi_wo__wid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_wo__wlast;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [7:0] m_axi_wo__wstrb;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_wo__wvalid;
  (* src = "axihp_writer.py:89" *)
  wire resp_en;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* init = 4'h0 *)
  (* src = "axihp_writer.py:80" *)
  reg [3:0] unconf = 4'h0;
  (* init = 1'h0 *)
  (* src = "axihp_writer.py:84" *)
  reg wlast = 1'h0;
  (* src = "axihp_writer.py:30" *)
  input [7:0] write_strobe;
  (* src = "axihp_writer.py:33" *)
  output [3:0] writer_active;
  (* src = "axihp_writer.py:32" *)
  output writer_error;
  (* src = "axihp_writer.py:34" *)
  output [3:0] writer_unconf;
  (* init = 1'h0 *)
  (* src = "axihp_writer.py:83" *)
  reg wvalid = 1'h0;
  assign \$9  = enable == (* src = "axihp_writer.py:101" *) 1'h1;
  assign \$11  = addr_empty == (* src = "axihp_writer.py:101" *) 1'h0;
  assign \$13  = \$9  & (* src = "axihp_writer.py:101" *) \$11 ;
  assign \$15  = active[3] == (* src = "axihp_writer.py:101" *) 1'h0;
  assign \$17  = \$13  & (* src = "axihp_writer.py:101" *) \$15 ;
  assign \$1  = awvalid == (* src = "axihp_writer.py:96" *) 1'h1;
  assign \$19  = counter == (* src = "axihp_writer.py:123" *) 4'hf;
  assign \$22  = counter + (* src = "axihp_writer.py:131" *) 1'h1;
  assign \$24  = counter == (* src = "axihp_writer.py:123" *) 4'hf;
  assign \$26  = wvalid == (* src = "axihp_writer.py:134" *) 1'h1;
  assign \$28  = m_axi_wi__wready == (* src = "axihp_writer.py:134" *) 1'h1;
  assign \$30  = \$26  & (* src = "axihp_writer.py:134" *) \$28 ;
  assign \$32  = wvalid == (* src = "axihp_writer.py:137" *) 1'h0;
  assign \$34  = data_empty == (* src = "axihp_writer.py:139" *) 1'h0;
  assign \$36  = active != (* src = "axihp_writer.py:139" *) 1'h0;
  assign \$38  = \$34  & (* src = "axihp_writer.py:139" *) \$36 ;
  assign \$3  = m_axi_wi__awready == (* src = "axihp_writer.py:96" *) 1'h1;
  assign \$40  = bready == (* src = "axihp_writer.py:159" *) 1'h1;
  assign \$42  = m_axi_wi__bvalid == (* src = "axihp_writer.py:159" *) 1'h1;
  assign \$44  = \$40  & (* src = "axihp_writer.py:159" *) \$42 ;
  assign \$46  = bready == (* src = "axihp_writer.py:162" *) 1'h0;
  assign \$48  = unconf == (* src = "axihp_writer.py:169" *) 1'h0;
  assign \$50  = resp_en == (* src = "axihp_writer.py:174" *) 1'h1;
  assign \$52  = m_axi_wi__bresp != (* src = "axihp_writer.py:174" *) 1'h0;
  assign \$54  = \$50  & (* src = "axihp_writer.py:174" *) \$52 ;
  assign \$56  = addr_en == (* src = "axihp_writer.py:183" *) 1'h1;
  assign \$58  = wlast == (* src = "axihp_writer.py:183" *) 1'h0;
  assign \$5  = \$1  & (* src = "axihp_writer.py:96" *) \$3 ;
  assign \$60  = \$56  & (* src = "axihp_writer.py:183" *) \$58 ;
  assign \$62  = addr_en == (* src = "axihp_writer.py:187" *) 1'h0;
  assign \$64  = wlast == (* src = "axihp_writer.py:187" *) 1'h1;
  assign \$66  = \$62  & (* src = "axihp_writer.py:187" *) \$64 ;
  assign \$69  = active + (* src = "axihp_writer.py:185" *) 1'h1;
  assign \$72  = active - (* src = "axihp_writer.py:189" *) 1'h1;
  assign \$74  = addr_en == (* src = "axihp_writer.py:192" *) 1'h1;
  assign \$76  = resp_en == (* src = "axihp_writer.py:192" *) 1'h0;
  assign \$78  = \$74  & (* src = "axihp_writer.py:192" *) \$76 ;
  assign \$7  = awvalid == (* src = "axihp_writer.py:99" *) 1'h0;
  assign \$80  = addr_en == (* src = "axihp_writer.py:196" *) 1'h0;
  assign \$82  = resp_en == (* src = "axihp_writer.py:196" *) 1'h1;
  assign \$84  = \$80  & (* src = "axihp_writer.py:196" *) \$82 ;
  assign \$87  = unconf + (* src = "axihp_writer.py:194" *) 1'h1;
  assign \$90  = unconf - (* src = "axihp_writer.py:198" *) 1'h1;
  assign \$92  = active == (* src = "axihp_writer.py:200" *) 1'h0;
  assign \$94  = unconf == (* src = "axihp_writer.py:200" *) 1'h0;
  assign \$96  = \$92  & (* src = "axihp_writer.py:200" *) \$94 ;
  always @(posedge clk)
      unconf <= \$next\unconf ;
  always @(posedge clk)
      active <= \$next\active ;
  always @(posedge clk)
      bready <= \$next\bready ;
  always @(posedge clk)
      wvalid <= \$next\wvalid ;
  always @(posedge clk)
      wlast <= \$next\wlast ;
  always @(posedge clk)
      counter <= \$next\counter ;
  always @(posedge clk)
      awvalid <= \$next\awvalid ;
  always @* begin
    \$next\awlen_c  = 4'h0;
    \$next\awlen_c  = 4'hf;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\addr_en  = 1'h0;
    \$next\addr_en  = \$5 ;
  end
  always @* begin
    \$next\m_axi_wo__wdata  = 64'h0000000000000000;
    \$next\m_axi_wo__wdata  = data_in;
  end
  always @* begin
    \$next\m_axi_wo__wvalid  = 1'h0;
    \$next\m_axi_wo__wvalid  = wvalid;
  end
  always @* begin
    \$next\m_axi_wo__wlast  = 1'h0;
    \$next\m_axi_wo__wlast  = wlast;
  end
  always @* begin
    \$next\data_enable  = 1'h0;
    \$next\data_enable  = data_en;
  end
  always @* begin
    \$next\resp_en  = 1'h0;
    \$next\resp_en  = \$44 ;
  end
  always @* begin
    \$next\bready  = bready;
    casez (\$46 )
      1'h1:
          casez (enable)
            1'h1:
                \$next\bready  = 1'h1;
          endcase
      1'hz:
          casez (\$48 )
            1'h1:
                \$next\bready  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\bready  = 1'h0;
    endcase
  end
  always @* begin
    \$next\m_axi_wo__bready  = 1'h0;
    \$next\m_axi_wo__bready  = bready;
  end
  always @* begin
    \$next\writer_error  = 1'h0;
    \$next\writer_error  = \$54 ;
  end
  always @* begin
    \$next\active  = active;
    casez ({ \$66 , \$60  })
      2'bz1:
          \$next\active  = \$68 [3:0];
      2'b1z:
          \$next\active  = \$71 [3:0];
    endcase
    casez (rst)
      1'h1:
          \$next\active  = 4'h0;
    endcase
  end
  always @* begin
    \$next\unconf  = unconf;
    casez ({ \$84 , \$78  })
      2'bz1:
          \$next\unconf  = \$86 [3:0];
      2'b1z:
          \$next\unconf  = \$89 [3:0];
    endcase
    casez (rst)
      1'h1:
          \$next\unconf  = 4'h0;
    endcase
  end
  always @* begin
    \$next\awvalid  = awvalid;
    casez (\$7 )
      1'h1:
          casez (\$17 )
            1'h1:
                \$next\awvalid  = 1'h1;
          endcase
    endcase
    casez (awvalid)
      1'h1:
          casez (m_axi_wi__awready)
            1'h1:
                \$next\awvalid  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\awvalid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\inactive  = 1'h0;
    \$next\inactive  = \$96 ;
  end
  always @* begin
    \$next\m_axi_wo__awid  = 6'h00;
    \$next\m_axi_wo__awid  = 6'h00;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\m_axi_wo__wid  = 6'h00;
    \$next\m_axi_wo__wid  = 6'h00;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\m_axi_wo__awlen  = 4'h0;
    \$next\m_axi_wo__awlen  = awlen_c;
  end
  always @* begin
    \$next\m_axi_wo__awburst  = 2'h0;
    \$next\m_axi_wo__awburst  = 2'h1;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\m_axi_wo__awsize  = 2'h0;
    \$next\m_axi_wo__awsize  = 2'h3;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\m_axi_wo__wstrb  = 8'h00;
    \$next\m_axi_wo__wstrb  = write_strobe;
  end
  always @* begin
    \$next\m_axi_wo__awprot  = 3'h0;
    \$next\m_axi_wo__awprot  = 3'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\data_clk  = 1'h0;
    \$next\data_clk  = m_axi_aclk;
  end
  always @* begin
    \$next\addr_clk  = 1'h0;
    \$next\addr_clk  = m_axi_aclk;
  end
  always @* begin
    \$next\m_axi_wo__awaddr  = 32'd0;
    \$next\m_axi_wo__awaddr  = addr_in;
  end
  always @* begin
    \$next\writer_active  = 4'h0;
    \$next\writer_active  = active;
  end
  always @* begin
    \$next\writer_unconf  = 4'h0;
    \$next\writer_unconf  = unconf;
  end
  always @* begin
    \$next\m_axi_wo__awvalid  = 1'h0;
    \$next\m_axi_wo__awvalid  = awvalid;
  end
  always @* begin
    \$next\addr_enable  = 1'h0;
    \$next\addr_enable  = addr_en;
  end
  always @* begin
    \$next\counter  = counter;
    casez (data_en)
      1'h1:
          casez (\$19 )
            1'h1:
                \$next\counter  = 4'h0;
            1'hz:
                \$next\counter  = \$21 [3:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\counter  = 4'h0;
    endcase
  end
  always @* begin
    \$next\wlast  = wlast;
    casez (data_en)
      1'h1:
          casez (\$24 )
            1'h1:
                \$next\wlast  = 1'h1;
            1'hz:
                \$next\wlast  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\wlast  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_en  = 1'h0;
    \$next\data_en  = \$30 ;
  end
  always @* begin
    \$next\wvalid  = wvalid;
    casez (\$32 )
      1'h1:
          casez (\$38 )
            1'h1:
                \$next\wvalid  = 1'h1;
          endcase
      1'hz:
          casez (wlast)
            1'h1:
                \$next\wvalid  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\wvalid  = 1'h0;
    endcase
  end
  assign \$21  = \$22 ;
  assign \$68  = \$69 ;
  assign \$71  = \$72 ;
  assign \$86  = \$87 ;
  assign \$89  = \$90 ;
  assign writer_unconf = \$next\writer_unconf ;
  assign writer_active = \$next\writer_active ;
  assign addr_clk = \$next\addr_clk ;
  assign data_clk = \$next\data_clk ;
  assign m_axi_wo__awprot = \$next\m_axi_wo__awprot ;
  assign m_axi_wo__wstrb = \$next\m_axi_wo__wstrb ;
  assign m_axi_wo__awsize = \$next\m_axi_wo__awsize ;
  assign m_axi_wo__awburst = \$next\m_axi_wo__awburst ;
  assign m_axi_wo__awlen = \$next\m_axi_wo__awlen ;
  assign m_axi_wo__wid = \$next\m_axi_wo__wid ;
  assign m_axi_wo__awid = \$next\m_axi_wo__awid ;
  assign inactive = \$next\inactive ;
  assign writer_error = \$next\writer_error ;
  assign m_axi_wo__bready = \$next\m_axi_wo__bready ;
  assign resp_en = \$next\resp_en ;
  assign data_enable = \$next\data_enable ;
  assign m_axi_wo__wlast = \$next\m_axi_wo__wlast ;
  assign m_axi_wo__wvalid = \$next\m_axi_wo__wvalid ;
  assign m_axi_wo__wdata = \$next\m_axi_wo__wdata ;
  assign data_en = \$next\data_en ;
  assign addr_enable = \$next\addr_enable ;
  assign m_axi_wo__awvalid = \$next\m_axi_wo__awvalid ;
  assign m_axi_wo__awaddr = \$next\m_axi_wo__awaddr ;
  assign addr_en = \$next\addr_en ;
  assign awlen_c = \$next\awlen_c ;
endmodule

(* \nmigen.hierarchy  = "top.b16_b64" *)
(* generator = "nMigen" *)
module b16_b64(end_in, i_busy, data_in, rst, clk, end_out, data_out, valid_out, o_busy, valid_in);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire [3:0] \$23 ;
  wire [3:0] \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$7 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire \$76 ;
  wire \$78 ;
  wire \$80 ;
  wire \$82 ;
  wire \$84 ;
  wire \$9 ;
  (* src = "b16_b64.py:67" *)
  reg \$next\buff_chs ;
  (* src = "b16_b64.py:59" *)
  reg [63:0] \$next\buffer1 ;
  (* src = "b16_b64.py:60" *)
  reg \$next\buffer1_valid ;
  (* src = "b16_b64.py:63" *)
  reg [63:0] \$next\buffer2 ;
  (* src = "b16_b64.py:64" *)
  reg \$next\buffer2_valid ;
  (* src = "b16_b64.py:80" *)
  reg [2:0] \$next\counter ;
  (* src = "b16_b64.py:37" *)
  reg [63:0] \$next\data_out ;
  (* src = "b16_b64.py:44" *)
  reg \$next\end_out ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [3:0] \$next\fsm_state ;
  (* src = "b16_b64.py:70" *)
  reg \$next\is_valid ;
  (* src = "b16_b64.py:46" *)
  reg \$next\o_busy ;
  (* src = "b16_b64.py:74" *)
  reg \$next\reg_end ;
  (* src = "b16_b64.py:41" *)
  reg \$next\valid_out ;
  (* init = 1'h0 *)
  (* src = "b16_b64.py:67" *)
  reg buff_chs = 1'h0;
  (* init = 64'h0000000000000000 *)
  (* src = "b16_b64.py:59" *)
  reg [63:0] buffer1 = 64'h0000000000000000;
  (* init = 1'h0 *)
  (* src = "b16_b64.py:60" *)
  reg buffer1_valid = 1'h0;
  (* init = 64'h0000000000000000 *)
  (* src = "b16_b64.py:63" *)
  reg [63:0] buffer2 = 64'h0000000000000000;
  (* init = 1'h0 *)
  (* src = "b16_b64.py:64" *)
  reg buffer2_valid = 1'h0;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 3'h0 *)
  (* src = "b16_b64.py:80" *)
  reg [2:0] counter = 3'h0;
  (* src = "b16_b64.py:34" *)
  input [15:0] data_in;
  (* init = 64'h0000000000000000 *)
  (* src = "b16_b64.py:37" *)
  output [63:0] data_out;
  reg [63:0] data_out = 64'h0000000000000000;
  (* src = "b16_b64.py:43" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "b16_b64.py:44" *)
  output end_out;
  reg end_out = 1'h0;
  (* init = 4'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [3:0] fsm_state = 4'h0;
  (* src = "b16_b64.py:47" *)
  input i_busy;
  (* src = "b16_b64.py:70" *)
  wire is_valid;
  (* init = 1'h0 *)
  (* src = "b16_b64.py:46" *)
  output o_busy;
  reg o_busy = 1'h0;
  (* init = 1'h0 *)
  (* src = "b16_b64.py:74" *)
  reg reg_end = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "b16_b64.py:40" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "b16_b64.py:41" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$9  = o_busy == (* src = "b16_b64.py:76" *) 1'h0;
  assign \$11  = \$7  & (* src = "b16_b64.py:76" *) \$9 ;
  assign \$13  = reg_end == (* src = "b16_b64.py:81" *) 1'h1;
  assign \$15  = valid_out == (* src = "b16_b64.py:81" *) 1'h1;
  assign \$17  = \$13  & (* src = "b16_b64.py:81" *) \$15 ;
  assign \$1  = valid_out == (* src = "b16_b64.py:96" *) 1'h1;
  assign \$19  = i_busy == (* src = "b16_b64.py:81" *) 1'h0;
  assign \$21  = \$17  & (* src = "b16_b64.py:81" *) \$19 ;
  assign \$24  = counter + (* src = "b16_b64.py:82" *) 1'h1;
  assign \$26  = reg_end == (* src = "b16_b64.py:83" *) 1'h1;
  assign \$28  = counter == (* src = "b16_b64.py:83" *) 3'h7;
  assign \$30  = \$26  & (* src = "b16_b64.py:83" *) \$28 ;
  assign \$32  = buff_chs == (* src = "b16_b64.py:87" *) 1'h0;
  assign \$34  = buff_chs == (* src = "b16_b64.py:89" *) 1'h1;
  assign \$36  = buffer1_valid == (* src = "b16_b64.py:93" *) 1'h1;
  assign \$38  = buffer2_valid == (* src = "b16_b64.py:93" *) 1'h1;
  assign \$3  = i_busy == (* src = "b16_b64.py:96" *) 1'h0;
  assign \$40  = \$36  | (* src = "b16_b64.py:93" *) \$38 ;
  assign \$42  = is_valid == (* src = "b16_b64.py:93" *) 1'h1;
  assign \$44  = \$40  & (* src = "b16_b64.py:93" *) \$42 ;
  assign \$46  = valid_out == (* src = "b16_b64.py:96" *) 1'h1;
  assign \$48  = i_busy == (* src = "b16_b64.py:96" *) 1'h0;
  assign \$50  = \$46  & (* src = "b16_b64.py:96" *) \$48 ;
  assign \$52  = buff_chs == (* src = "b16_b64.py:98" *) 1'h0;
  assign \$54  = valid_out == (* src = "b16_b64.py:96" *) 1'h1;
  assign \$56  = i_busy == (* src = "b16_b64.py:96" *) 1'h0;
  assign \$58  = \$54  & (* src = "b16_b64.py:96" *) \$56 ;
  assign \$5  = \$1  & (* src = "b16_b64.py:96" *) \$3 ;
  assign \$60  = buff_chs == (* src = "b16_b64.py:99" *) 1'h0;
  assign \$62  = valid_out == (* src = "b16_b64.py:96" *) 1'h1;
  assign \$64  = i_busy == (* src = "b16_b64.py:96" *) 1'h0;
  assign \$66  = \$62  & (* src = "b16_b64.py:96" *) \$64 ;
  assign \$68  = buff_chs == (* src = "b16_b64.py:101" *) 1'h1;
  assign \$70  = buffer1_valid == (* src = "b16_b64.py:110" *) 1'h0;
  assign \$72  = buffer2_valid == (* src = "b16_b64.py:137" *) 1'h0;
  assign \$74  = buffer2_valid == (* src = "b16_b64.py:148" *) 1'h0;
  assign \$76  = buffer1_valid == (* src = "b16_b64.py:175" *) 1'h0;
  assign \$78  = buffer1_valid == (* src = "b16_b64.py:110" *) 1'h0;
  assign \$7  = valid_in == (* src = "b16_b64.py:76" *) 1'h1;
  assign \$80  = buffer2_valid == (* src = "b16_b64.py:137" *) 1'h0;
  assign \$82  = buffer2_valid == (* src = "b16_b64.py:148" *) 1'h0;
  assign \$84  = buffer1_valid == (* src = "b16_b64.py:175" *) 1'h0;
  always @(posedge clk)
      buffer2 <= \$next\buffer2 ;
  always @(posedge clk)
      buffer1 <= \$next\buffer1 ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      o_busy <= \$next\o_busy ;
  always @(posedge clk)
      buffer2_valid <= \$next\buffer2_valid ;
  always @(posedge clk)
      buffer1_valid <= \$next\buffer1_valid ;
  always @(posedge clk)
      buff_chs <= \$next\buff_chs ;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      data_out <= \$next\data_out ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      counter <= \$next\counter ;
  always @(posedge clk)
      reg_end <= \$next\reg_end ;
  always @* begin
    \$next\is_valid  = 1'h0;
    \$next\is_valid  = 1'h1;
    casez (\$5 )
      1'h1:
          \$next\is_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\reg_end  = reg_end;
    casez (\$11 )
      1'h1:
          \$next\reg_end  = end_in;
    endcase
    casez (rst)
      1'h1:
          \$next\reg_end  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      4'h0:
          casez (\$78 )
            1'h1:
                \$next\fsm_state  = 4'h1;
          endcase
      4'h1:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 4'h2;
          endcase
      4'h2:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 4'h3;
          endcase
      4'h3:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 4'h4;
          endcase
      4'h4:
          casez (valid_in)
            1'h1:
                casez (\$80 )
                  1'h1:
                      \$next\fsm_state  = 4'h5;
                  1'hz:
                      \$next\fsm_state  = 4'h6;
                endcase
          endcase
      4'h6:
          casez (\$82 )
            1'h1:
                \$next\fsm_state  = 4'h5;
          endcase
      4'h5:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 4'h7;
          endcase
      4'h7:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 4'h8;
          endcase
      4'h8:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 4'h9;
          endcase
      4'h9:
          casez (valid_in)
            1'h1:
                casez (\$84 )
                  1'h1:
                      \$next\fsm_state  = 4'h1;
                  1'hz:
                      \$next\fsm_state  = 4'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 4'h0;
    endcase
  end
  always @* begin
    \$next\buffer1  = buffer1;
    casez (fsm_state)
      4'h1:
          casez (valid_in)
            1'h1:
                \$next\buffer1 [63:48] = data_in;
          endcase
      4'h2:
          casez (valid_in)
            1'h1:
                \$next\buffer1 [47:32] = data_in;
          endcase
      4'h3:
          casez (valid_in)
            1'h1:
                \$next\buffer1 [31:16] = data_in;
          endcase
      4'h4:
          casez (valid_in)
            1'h1:
                \$next\buffer1 [15:0] = data_in;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buffer1  = 64'h0000000000000000;
    endcase
  end
  always @* begin
    \$next\buffer2  = buffer2;
    casez (fsm_state)
      4'h5:
          casez (valid_in)
            1'h1:
                \$next\buffer2 [63:48] = data_in;
          endcase
      4'h7:
          casez (valid_in)
            1'h1:
                \$next\buffer2 [47:32] = data_in;
          endcase
      4'h8:
          casez (valid_in)
            1'h1:
                \$next\buffer2 [31:16] = data_in;
          endcase
      4'h9:
          casez (valid_in)
            1'h1:
                \$next\buffer2 [15:0] = data_in;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buffer2  = 64'h0000000000000000;
    endcase
  end
  always @* begin
    \$next\counter  = counter;
    casez (\$21 )
      1'h1:
          \$next\counter  = \$23 [2:0];
    endcase
    casez (rst)
      1'h1:
          \$next\counter  = 3'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    casez (\$30 )
      1'h1:
          \$next\end_out  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_out  = data_out;
    casez (\$32 )
      1'h1:
          \$next\data_out  = buffer1;
    endcase
    casez (\$34 )
      1'h1:
          \$next\data_out  = buffer2;
    endcase
    casez (rst)
      1'h1:
          \$next\data_out  = 64'h0000000000000000;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    \$next\valid_out  = \$44 ;
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buff_chs  = buff_chs;
    casez (\$50 )
      1'h1:
          \$next\buff_chs  = \$52 ;
    endcase
    casez (rst)
      1'h1:
          \$next\buff_chs  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buffer1_valid  = buffer1_valid;
    casez (\$58 )
      1'h1:
          casez (\$60 )
            1'h1:
                \$next\buffer1_valid  = 1'h0;
          endcase
    endcase
    casez (fsm_state)
      4'h4:
          casez (valid_in)
            1'h1:
                \$next\buffer1_valid  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buffer1_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buffer2_valid  = buffer2_valid;
    casez (\$66 )
      1'h1:
          casez (\$68 )
            1'h1:
                \$next\buffer2_valid  = 1'h0;
          endcase
    endcase
    casez (fsm_state)
      4'h9:
          casez (valid_in)
            1'h1:
                \$next\buffer2_valid  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buffer2_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\o_busy  = o_busy;
    casez (fsm_state)
      4'h0:
          casez (\$70 )
            1'h1:
                \$next\o_busy  = 1'h0;
          endcase
      4'h4:
          casez (valid_in)
            1'h1:
                casez (\$72 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\o_busy  = 1'h1;
                endcase
          endcase
      4'h6:
          casez (\$74 )
            1'h1:
                \$next\o_busy  = 1'h0;
          endcase
      4'h9:
          casez (valid_in)
            1'h1:
                casez (\$76 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\o_busy  = 1'h1;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\o_busy  = 1'h0;
    endcase
  end
  assign \$23  = \$24 ;
  assign is_valid = \$next\is_valid ;
endmodule

(* \nmigen.hierarchy  = "top.b64_b32" *)
(* generator = "nMigen" *)
module b64_b32(data_in, i_busy, rst, clk, o_busy, valid_out, data_out, valid_in);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$2 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$30 ;
  wire \$32 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  (* src = "b64_b32.py:105" *)
  reg [31:0] \$next\buff ;
  (* src = "b64_b32.py:38" *)
  reg [31:0] \$next\data_out ;
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [31:0] \$next\fifo32_din ;
  (* src = "nmigen/lib/fifo.py:71" *)
  reg \$next\fifo32_re ;
  (* src = "nmigen/lib/fifo.py:139" *)
  reg \$next\fifo32_replace ;
  (* src = "nmigen/lib/fifo.py:67" *)
  reg \$next\fifo32_we ;
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [63:0] \$next\fifo64_din ;
  (* src = "nmigen/lib/fifo.py:71" *)
  reg \$next\fifo64_re ;
  (* src = "nmigen/lib/fifo.py:139" *)
  reg \$next\fifo64_replace ;
  (* src = "nmigen/lib/fifo.py:67" *)
  reg \$next\fifo64_we ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg \$next\fsm_state$1 ;
  (* src = "b64_b32.py:44" *)
  reg \$next\o_busy ;
  (* src = "b64_b32.py:68" *)
  reg [63:0] \$next\reg ;
  (* src = "b64_b32.py:42" *)
  reg \$next\valid_out ;
  (* init = 32'd0 *)
  (* src = "b64_b32.py:105" *)
  reg [31:0] buff = 32'd0;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "b64_b32.py:35" *)
  input [63:0] data_in;
  (* src = "b64_b32.py:38" *)
  output [31:0] data_out;
  (* init = 32'd0 *)
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [31:0] fifo32_din = 32'd0;
  (* src = "nmigen/lib/fifo.py:69" *)
  wire [31:0] fifo32_dout;
  (* src = "nmigen/lib/fifo.py:71" *)
  wire fifo32_re;
  (* src = "nmigen/lib/fifo.py:70" *)
  wire fifo32_readable;
  (* init = 1'h0 *)
  (* src = "nmigen/lib/fifo.py:139" *)
  reg fifo32_replace = 1'h0;
  (* init = 1'h0 *)
  (* src = "nmigen/lib/fifo.py:67" *)
  reg fifo32_we = 1'h0;
  (* src = "nmigen/lib/fifo.py:66" *)
  wire fifo32_writable;
  (* init = 64'h0000000000000000 *)
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [63:0] fifo64_din = 64'h0000000000000000;
  (* src = "nmigen/lib/fifo.py:69" *)
  wire [63:0] fifo64_dout;
  (* init = 1'h0 *)
  (* src = "nmigen/lib/fifo.py:71" *)
  reg fifo64_re = 1'h0;
  (* src = "nmigen/lib/fifo.py:70" *)
  wire fifo64_readable;
  (* init = 1'h0 *)
  (* src = "nmigen/lib/fifo.py:139" *)
  reg fifo64_replace = 1'h0;
  (* init = 1'h0 *)
  (* src = "nmigen/lib/fifo.py:67" *)
  reg fifo64_we = 1'h0;
  (* src = "nmigen/lib/fifo.py:66" *)
  wire fifo64_writable;
  (* init = 2'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* init = 1'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg \fsm_state$1  = 1'h0;
  (* src = "b64_b32.py:45" *)
  input i_busy;
  (* init = 1'h0 *)
  (* src = "b64_b32.py:44" *)
  output o_busy;
  reg o_busy = 1'h0;
  (* init = 64'h0000000000000000 *)
  (* src = "b64_b32.py:68" *)
  reg [63:0] \reg  = 64'h0000000000000000;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "b64_b32.py:41" *)
  input valid_in;
  (* src = "b64_b32.py:42" *)
  output valid_out;
  assign \$10  = fifo64_readable == (* src = "b64_b32.py:111" *) 1'h1;
  assign \$12  = \$8  & (* src = "b64_b32.py:111" *) \$10 ;
  assign \$14  = fifo32_writable == (* src = "b64_b32.py:111" *) 1'h1;
  assign \$16  = fifo64_readable == (* src = "b64_b32.py:111" *) 1'h1;
  assign \$18  = \$14  & (* src = "b64_b32.py:111" *) \$16 ;
  assign \$20  = fifo32_writable == (* src = "b64_b32.py:111" *) 1'h1;
  assign \$22  = fifo64_readable == (* src = "b64_b32.py:111" *) 1'h1;
  assign \$24  = \$20  & (* src = "b64_b32.py:111" *) \$22 ;
  assign \$26  = fifo32_writable == (* src = "b64_b32.py:111" *) 1'h1;
  assign \$28  = fifo64_readable == (* src = "b64_b32.py:111" *) 1'h1;
  assign \$2  = fifo32_writable == (* src = "b64_b32.py:111" *) 1'h1;
  assign \$30  = \$26  & (* src = "b64_b32.py:111" *) \$28 ;
  assign \$32  = i_busy == (* src = "b64_b32.py:131" *) 1'h0;
  assign \$4  = fifo64_readable == (* src = "b64_b32.py:111" *) 1'h1;
  assign \$6  = \$2  & (* src = "b64_b32.py:111" *) \$4 ;
  assign \$8  = fifo32_writable == (* src = "b64_b32.py:111" *) 1'h1;
  always @(posedge clk)
      \fsm_state$1  <= \$next\fsm_state$1 ;
  always @(posedge clk)
      fifo64_re <= \$next\fifo64_re ;
  always @(posedge clk)
      fifo32_we <= \$next\fifo32_we ;
  always @(posedge clk)
      buff <= \$next\buff ;
  always @(posedge clk)
      fifo32_din <= \$next\fifo32_din ;
  always @(posedge clk)
      \reg  <= \$next\reg ;
  always @(posedge clk)
      fifo64_din <= \$next\fifo64_din ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      o_busy <= \$next\o_busy ;
  always @(posedge clk)
      fifo64_we <= \$next\fifo64_we ;
  always @(posedge clk)
      fifo64_replace <= \$next\fifo64_replace ;
  always @(posedge clk)
      fifo32_replace <= \$next\fifo32_replace ;
  fifo32 fifo32 (
    .clk(clk),
    .din(fifo32_din),
    .dout(fifo32_dout),
    .re(fifo32_re),
    .readable(fifo32_readable),
    .replace(fifo32_replace),
    .rst(rst),
    .we(fifo32_we),
    .writable(fifo32_writable)
  );
  fifo64 fifo64 (
    .clk(clk),
    .din(fifo64_din),
    .dout(fifo64_dout),
    .re(fifo64_re),
    .readable(fifo64_readable),
    .replace(fifo64_replace),
    .rst(rst),
    .we(fifo64_we),
    .writable(fifo64_writable)
  );
  always @* begin
    \$next\fifo32_replace  = fifo32_replace;
    \$next\fifo32_replace  = 1'h0;
    casez (rst)
      1'h1:
          \$next\fifo32_replace  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fifo64_replace  = fifo64_replace;
    \$next\fifo64_replace  = 1'h0;
    casez (rst)
      1'h1:
          \$next\fifo64_replace  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fifo64_re  = fifo64_re;
    casez (\fsm_state$1 )
      1'h0:
          casez ({ fifo32_writable, \$24  })
            2'bz1:
                \$next\fifo64_re  = 1'h1;
          endcase
      1'h1:
          \$next\fifo64_re  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\fifo64_re  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state$1  = \fsm_state$1 ;
    casez (\fsm_state$1 )
      1'h0:
          casez ({ fifo32_writable, \$30  })
            2'bz1:
                \$next\fsm_state$1  = 1'h1;
          endcase
      1'h1:
          casez (fifo32_writable)
            1'h1:
                \$next\fsm_state$1  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state$1  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = fifo32_readable;
  end
  always @* begin
    \$next\data_out  = 32'd0;
    \$next\data_out  = fifo32_dout;
  end
  always @* begin
    \$next\fifo32_re  = 1'h0;
    \$next\fifo32_re  = \$32 ;
  end
  always @* begin
    \$next\fifo64_we  = fifo64_we;
    casez (fsm_state)
      2'h0:
          \$next\fifo64_we  = 1'h0;
      2'h1:
          casez (valid_in)
            1'h1:
                casez (fifo64_writable)
                  1'h1:
                      \$next\fifo64_we  = 1'h1;
                endcase
          endcase
      2'h2:
          casez (fifo64_writable)
            1'h1:
                \$next\fifo64_we  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fifo64_we  = 1'h0;
    endcase
  end
  always @* begin
    \$next\o_busy  = o_busy;
    casez (fsm_state)
      2'h0:
          \$next\o_busy  = 1'h0;
      2'h1:
          casez (valid_in)
            1'h1:
                casez (fifo64_writable)
                  1'h1:
                      \$next\o_busy  = 1'h1;
                  1'hz:
                      \$next\o_busy  = 1'h1;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\o_busy  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          \$next\fsm_state  = 2'h1;
      2'h1:
          casez (valid_in)
            1'h1:
                casez (fifo64_writable)
                  1'h1:
                      \$next\fsm_state  = 2'h0;
                  1'hz:
                      \$next\fsm_state  = 2'h2;
                endcase
          endcase
      2'h2:
          casez (fifo64_writable)
            1'h1:
                \$next\fsm_state  = 2'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\fifo64_din  = fifo64_din;
    casez (fsm_state)
      2'h1:
          casez (valid_in)
            1'h1:
                casez (fifo64_writable)
                  1'h1:
                      \$next\fifo64_din  = data_in;
                endcase
          endcase
      2'h2:
          casez (fifo64_writable)
            1'h1:
                \$next\fifo64_din  = \reg ;
          endcase
    endcase
  end
  always @* begin
    \$next\reg  = \reg ;
    casez (fsm_state)
      2'h1:
          casez (valid_in)
            1'h1:
                casez (fifo64_writable)
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\reg  = data_in;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\reg  = 64'h0000000000000000;
    endcase
  end
  always @* begin
    \$next\fifo32_din  = fifo32_din;
    casez (\fsm_state$1 )
      1'h0:
          casez ({ fifo32_writable, \$6  })
            2'bz1:
                \$next\fifo32_din  = fifo64_dout[63:32];
          endcase
      1'h1:
          casez (fifo32_writable)
            1'h1:
                \$next\fifo32_din  = buff;
          endcase
    endcase
  end
  always @* begin
    \$next\buff  = buff;
    casez (\fsm_state$1 )
      1'h0:
          casez ({ fifo32_writable, \$12  })
            2'bz1:
                \$next\buff  = fifo64_dout[31:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buff  = 32'd0;
    endcase
  end
  always @* begin
    \$next\fifo32_we  = fifo32_we;
    casez (\fsm_state$1 )
      1'h0:
          casez ({ fifo32_writable, \$18  })
            2'bz1:
                \$next\fifo32_we  = 1'h1;
            2'b1z:
                \$next\fifo32_we  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fifo32_we  = 1'h0;
    endcase
  end
  assign fifo32_re = \$next\fifo32_re ;
  assign data_out = \$next\data_out ;
  assign valid_out = \$next\valid_out ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.converter" *)
(* generator = "nMigen" *)
module converter(valid_out, enc_out, enc_out_ctr, out_end, rst, clk, valid_in, latch_output, enc_in, enc_in_ctr, in_end, close_full);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire [29:0] \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire [6:0] \$51 ;
  wire [6:0] \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "converter.py:66" *)
  reg [29:0] \$next\enc_in ;
  (* src = "converter.py:67" *)
  reg [4:0] \$next\enc_in_ctr ;
  (* src = "converter.py:95" *)
  reg [5:0] \$next\enc_out_ctr_reg ;
  (* src = "converter.py:90" *)
  reg [29:0] \$next\enc_out_latch ;
  (* src = "converter.py:94" *)
  reg [55:0] \$next\enc_out_reg ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "converter.py:68" *)
  reg \$next\in_end ;
  (* src = "converter.py:59" *)
  reg \$next\latch_output ;
  (* src = "converter.py:91" *)
  reg \$next\out_end_latch ;
  (* src = "converter.py:96" *)
  reg \$next\out_end_reg ;
  (* src = "converter.py:69" *)
  reg \$next\valid_in ;
  (* src = "converter.py:97" *)
  reg \$next\valid_out_reg ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "converter.py:70" *)
  input close_full;
  (* init = 30'h00000000 *)
  (* src = "converter.py:66" *)
  output [29:0] enc_in;
  reg [29:0] enc_in = 30'h00000000;
  (* init = 5'h00 *)
  (* src = "converter.py:67" *)
  output [4:0] enc_in_ctr;
  reg [4:0] enc_in_ctr = 5'h00;
  (* src = "converter.py:60" *)
  input [55:0] enc_out;
  (* src = "converter.py:61" *)
  input [5:0] enc_out_ctr;
  (* init = 6'h00 *)
  (* src = "converter.py:95" *)
  reg [5:0] enc_out_ctr_reg = 6'h00;
  (* init = 30'h00000000 *)
  (* src = "converter.py:90" *)
  reg [29:0] enc_out_latch = 30'h00000000;
  (* init = 56'h00000000000000 *)
  (* src = "converter.py:94" *)
  reg [55:0] enc_out_reg = 56'h00000000000000;
  (* init = 2'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* init = 1'h0 *)
  (* src = "converter.py:68" *)
  output in_end;
  reg in_end = 1'h0;
  (* init = 1'h0 *)
  (* src = "converter.py:59" *)
  output latch_output;
  reg latch_output = 1'h0;
  (* src = "converter.py:62" *)
  input out_end;
  (* init = 1'h0 *)
  (* src = "converter.py:91" *)
  reg out_end_latch = 1'h0;
  (* init = 1'h0 *)
  (* src = "converter.py:96" *)
  reg out_end_reg = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "converter.py:69" *)
  output valid_in;
  reg valid_in = 1'h0;
  (* src = "converter.py:63" *)
  input valid_out;
  (* init = 1'h0 *)
  (* src = "converter.py:97" *)
  reg valid_out_reg = 1'h0;
  assign \$9  = valid_out & (* src = "converter.py:121" *) \$7 ;
  assign \$11  = enc_out_ctr_reg <= (* src = "converter.py:158" *) 5'h1e;
  assign \$13  = close_full == (* src = "converter.py:113" *) 1'h0;
  assign \$15  = valid_out_reg & (* src = "converter.py:113" *) \$13 ;
  assign \$17  = close_full == (* src = "converter.py:121" *) 1'h0;
  assign \$1  = enc_out_ctr_reg <= (* src = "converter.py:158" *) 5'h1e;
  assign \$19  = valid_out & (* src = "converter.py:121" *) \$17 ;
  assign \$21  = close_full == (* src = "converter.py:113" *) 1'h0;
  assign \$23  = valid_out_reg & (* src = "converter.py:113" *) \$21 ;
  assign \$25  = close_full == (* src = "converter.py:121" *) 1'h0;
  assign \$27  = valid_out & (* src = "converter.py:121" *) \$25 ;
  assign \$29  = enc_out_ctr_reg <= (* src = "converter.py:158" *) 5'h1e;
  assign \$31  = enc_out_ctr_reg <= (* src = "converter.py:192" *) 6'h38;
  assign \$33  = close_full == (* src = "converter.py:113" *) 1'h0;
  assign \$35  = valid_out_reg & (* src = "converter.py:113" *) \$33 ;
  assign \$37  = close_full == (* src = "converter.py:121" *) 1'h0;
  assign \$3  = close_full == (* src = "converter.py:113" *) 1'h0;
  assign \$39  = valid_out & (* src = "converter.py:121" *) \$37 ;
  assign \$41  = enc_out_ctr_reg <= (* src = "converter.py:158" *) 5'h1e;
  assign \$43  = enc_out_ctr_reg <= (* src = "converter.py:192" *) 6'h38;
  assign \$45  = + (* src = "nmigen/hdl/ast.py:123" *) enc_out_reg[55:30];
  assign \$47  = enc_out_ctr_reg <= (* src = "converter.py:158" *) 5'h1e;
  assign \$49  = enc_out_ctr_reg <= (* src = "converter.py:192" *) 6'h38;
  assign \$52  = enc_out_ctr_reg - (* src = "converter.py:195" *) 5'h1e;
  assign \$54  = enc_out_ctr_reg <= (* src = "converter.py:158" *) 5'h1e;
  assign \$56  = enc_out_ctr_reg <= (* src = "converter.py:158" *) 5'h1e;
  assign \$58  = enc_out_ctr_reg <= (* src = "converter.py:158" *) 5'h1e;
  assign \$5  = valid_out_reg & (* src = "converter.py:113" *) \$3 ;
  assign \$7  = close_full == (* src = "converter.py:121" *) 1'h0;
  always @(posedge clk)
      out_end_latch <= \$next\out_end_latch ;
  always @(posedge clk)
      enc_out_latch <= \$next\enc_out_latch ;
  always @(posedge clk)
      in_end <= \$next\in_end ;
  always @(posedge clk)
      enc_in_ctr <= \$next\enc_in_ctr ;
  always @(posedge clk)
      enc_in <= \$next\enc_in ;
  always @(posedge clk)
      valid_out_reg <= \$next\valid_out_reg ;
  always @(posedge clk)
      out_end_reg <= \$next\out_end_reg ;
  always @(posedge clk)
      enc_out_ctr_reg <= \$next\enc_out_ctr_reg ;
  always @(posedge clk)
      enc_out_reg <= \$next\enc_out_reg ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      latch_output <= \$next\latch_output ;
  always @(posedge clk)
      valid_in <= \$next\valid_in ;
  always @* begin
    \$next\valid_in  = valid_in;
    casez (fsm_state)
      2'h0:
          \$next\valid_in  = 1'h0;
      2'h2:
          \$next\valid_in  = 1'h0;
      2'h1:
          casez (valid_out_reg)
            1'h1:
                casez (\$1 )
                  1'h1:
                      \$next\valid_in  = 1'h1;
                  1'hz:
                      \$next\valid_in  = 1'h1;
                endcase
            1'hz:
                \$next\valid_in  = 1'h0;
          endcase
      2'h3:
          \$next\valid_in  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_in  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_output  = latch_output;
    casez (fsm_state)
      2'h0:
        begin
          \$next\latch_output  = 1'h0;
          casez ({ \$9 , \$5  })
            2'bz1:
                \$next\latch_output  = 1'h1;
            2'b1z:
                \$next\latch_output  = 1'h1;
          endcase
        end
      2'h1:
          casez (valid_out_reg)
            1'h1:
                casez (\$11 )
                  1'h1:
                      casez (close_full)
                        1'h1:
                            \$next\latch_output  = 1'h0;
                      endcase
                  1'hz:
                      \$next\latch_output  = 1'h0;
                endcase
          endcase
      2'h3:
          casez ({ \$19 , \$15  })
            2'bz1:
                \$next\latch_output  = 1'h1;
            2'b1z:
                \$next\latch_output  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\latch_output  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_out_latch  = enc_out_latch;
    casez (fsm_state)
      2'h1:
          casez (valid_out_reg)
            1'h1:
                casez (\$56 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\enc_out_latch  = enc_out_reg[29:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out_latch  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\out_end_latch  = out_end_latch;
    casez (fsm_state)
      2'h1:
          casez (valid_out_reg)
            1'h1:
                casez (\$58 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\out_end_latch  = out_end_reg;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\out_end_latch  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez ({ \$27 , \$23  })
            2'bz1:
                \$next\fsm_state  = 2'h1;
            2'b1z:
                \$next\fsm_state  = 2'h2;
            2'hz:
                \$next\fsm_state  = 2'h0;
          endcase
      2'h2:
          \$next\fsm_state  = 2'h1;
      2'h1:
          casez (valid_out_reg)
            1'h1:
                casez (\$29 )
                  1'h1:
                      casez (close_full)
                        1'h1:
                            \$next\fsm_state  = 2'h0;
                      endcase
                  1'hz:
                      casez (\$31 )
                        1'h1:
                            \$next\fsm_state  = 2'h3;
                      endcase
                endcase
          endcase
      2'h3:
          casez ({ \$39 , \$35  })
            2'bz1:
                \$next\fsm_state  = 2'h1;
            2'b1z:
                \$next\fsm_state  = 2'h2;
            2'hz:
                \$next\fsm_state  = 2'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\enc_out_reg  = enc_out_reg;
    casez (fsm_state)
      2'h2:
          \$next\enc_out_reg  = enc_out;
      2'h1:
          \$next\enc_out_reg  = enc_out;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out_reg  = 56'h00000000000000;
    endcase
  end
  always @* begin
    \$next\enc_out_ctr_reg  = enc_out_ctr_reg;
    casez (fsm_state)
      2'h2:
          \$next\enc_out_ctr_reg  = enc_out_ctr;
      2'h1:
          \$next\enc_out_ctr_reg  = enc_out_ctr;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out_ctr_reg  = 6'h00;
    endcase
  end
  always @* begin
    \$next\out_end_reg  = out_end_reg;
    casez (fsm_state)
      2'h2:
          \$next\out_end_reg  = out_end;
      2'h1:
          \$next\out_end_reg  = out_end;
    endcase
    casez (rst)
      1'h1:
          \$next\out_end_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_out_reg  = valid_out_reg;
    casez (fsm_state)
      2'h2:
          \$next\valid_out_reg  = valid_out;
      2'h1:
          \$next\valid_out_reg  = valid_out;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_out_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_in  = enc_in;
    casez (fsm_state)
      2'h1:
          casez (valid_out_reg)
            1'h1:
                casez (\$41 )
                  1'h1:
                      \$next\enc_in  = enc_out_reg[29:0];
                  1'hz:
                      casez (\$43 )
                        1'h1:
                            \$next\enc_in  = \$45 ;
                      endcase
                endcase
          endcase
      2'h3:
          \$next\enc_in  = enc_out_latch;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\enc_in_ctr  = enc_in_ctr;
    casez (fsm_state)
      2'h1:
          casez (valid_out_reg)
            1'h1:
                casez (\$47 )
                  1'h1:
                      \$next\enc_in_ctr  = enc_out_ctr_reg[4:0];
                  1'hz:
                    begin
                      \$next\enc_in_ctr  = 5'h1e;
                      casez (\$49 )
                        1'h1:
                            \$next\enc_in_ctr  = \$51 [4:0];
                      endcase
                    end
                endcase
          endcase
      2'h3:
          \$next\enc_in_ctr  = 5'h1e;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_ctr  = 5'h00;
    endcase
  end
  always @* begin
    \$next\in_end  = in_end;
    casez (fsm_state)
      2'h1:
          casez (valid_out_reg)
            1'h1:
                casez (\$54 )
                  1'h1:
                      \$next\in_end  = out_end_reg;
                  1'hz:
                      \$next\in_end  = 1'h0;
                endcase
          endcase
      2'h3:
          \$next\in_end  = out_end_latch;
    endcase
    casez (rst)
      1'h1:
          \$next\in_end  = 1'h0;
    endcase
  end
  assign \$51  = \$52 ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.converter_fifo" *)
(* generator = "nMigen" *)
module converter_fifo(enc_in, enc_in_ctr, in_end, latch_output, rst, clk, valid_out, enc_out, enc_out_ctr, out_end, close_full, valid_in);
  wire \$1 ;
  (* src = "converter_fifo.py:61" *)
  reg \$next\close_full ;
  (* src = "converter_fifo.py:65" *)
  reg [29:0] \$next\enc_out ;
  (* src = "converter_fifo.py:66" *)
  reg [4:0] \$next\enc_out_ctr ;
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [35:0] \$next\fifo_din ;
  (* src = "nmigen/lib/fifo.py:71" *)
  reg \$next\fifo_re ;
  (* src = "nmigen/lib/fifo.py:67" *)
  reg \$next\fifo_we ;
  (* src = "converter_fifo.py:67" *)
  reg \$next\out_end ;
  (* src = "converter_fifo.py:68" *)
  reg \$next\valid_out ;
  (* src = "converter_fifo.py:60" *)
  reg \$next\writable ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 1'h0 *)
  (* src = "converter_fifo.py:61" *)
  output close_full;
  reg close_full = 1'h0;
  (* src = "converter_fifo.py:56" *)
  input [29:0] enc_in;
  (* src = "converter_fifo.py:57" *)
  input [4:0] enc_in_ctr;
  (* src = "converter_fifo.py:65" *)
  output [29:0] enc_out;
  (* src = "converter_fifo.py:66" *)
  output [4:0] enc_out_ctr;
  (* src = "nmigen/lib/fifo.py:65" *)
  wire [35:0] fifo_din;
  (* src = "nmigen/lib/fifo.py:69" *)
  wire [35:0] fifo_dout;
  (* src = "nmigen/lib/fifo.py:238" *)
  wire [9:0] fifo_level;
  (* src = "nmigen/lib/fifo.py:71" *)
  wire fifo_re;
  (* src = "nmigen/lib/fifo.py:70" *)
  wire fifo_readable;
  (* src = "nmigen/lib/fifo.py:67" *)
  wire fifo_we;
  (* src = "nmigen/lib/fifo.py:66" *)
  wire fifo_writable;
  (* src = "converter_fifo.py:58" *)
  input in_end;
  (* src = "converter_fifo.py:64" *)
  input latch_output;
  (* src = "converter_fifo.py:67" *)
  output out_end;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "converter_fifo.py:59" *)
  input valid_in;
  (* src = "converter_fifo.py:68" *)
  output valid_out;
  (* src = "converter_fifo.py:60" *)
  wire writable;
  assign \$1  = fifo_level >= (* src = "converter_fifo.py:100" *) 9'h1fb;
  always @(posedge clk)
      close_full <= \$next\close_full ;
  \fifo$6  fifo (
    .clk(clk),
    .din(fifo_din),
    .dout(fifo_dout),
    .level(fifo_level),
    .re(fifo_re),
    .readable(fifo_readable),
    .rst(rst),
    .we(fifo_we),
    .writable(fifo_writable)
  );
  always @* begin
    \$next\fifo_we  = 1'h0;
    \$next\fifo_we  = valid_in;
  end
  always @* begin
    \$next\fifo_din  = 36'h000000000;
    \$next\fifo_din  = { in_end, enc_in_ctr, enc_in };
  end
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = fifo_writable;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = fifo_readable;
  end
  always @* begin
    \$next\enc_out  = 30'h00000000;
    \$next\enc_out  = fifo_dout[29:0];
  end
  always @* begin
    \$next\enc_out_ctr  = 5'h00;
    \$next\enc_out_ctr  = fifo_dout[34:30];
  end
  always @* begin
    \$next\out_end  = 1'h0;
    \$next\out_end  = fifo_dout[35];
  end
  always @* begin
    \$next\fifo_re  = 1'h0;
    \$next\fifo_re  = latch_output;
  end
  always @* begin
    \$next\close_full  = close_full;
    \$next\close_full  = \$1 ;
    casez (rst)
      1'h1:
          \$next\close_full  = 1'h0;
    endcase
  end
  assign fifo_re = \$next\fifo_re ;
  assign out_end = \$next\out_end ;
  assign enc_out_ctr = \$next\enc_out_ctr ;
  assign enc_out = \$next\enc_out ;
  assign valid_out = \$next\valid_out ;
  assign writable = \$next\writable ;
  assign fifo_din = \$next\fifo_din ;
  assign fifo_we = \$next\fifo_we ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.difference" *)
(* generator = "nMigen" *)
module difference(pixel_in, predic_in, \pixel_in$1 , \predic_in$2 , end_in, rst, clk, val_out, \val_out$3 , \val_out$4 , \val_out$5 , valid_out, end_out, valid_in);
  wire [13:0] \$10 ;
  wire [12:0] \$11 ;
  wire [13:0] \$13 ;
  wire [13:0] \$15 ;
  wire [12:0] \$16 ;
  wire [13:0] \$18 ;
  wire [12:0] \$6 ;
  wire [12:0] \$8 ;
  (* src = "difference.py:72" *)
  reg \$next\end_out ;
  (* src = "difference.py:61" *)
  reg [12:0] \$next\val_out ;
  (* src = "difference.py:61" *)
  reg [12:0] \$next\val_out$3 ;
  (* src = "difference.py:64" *)
  reg [12:0] \$next\val_out$4 ;
  (* src = "difference.py:64" *)
  reg [12:0] \$next\val_out$5 ;
  (* src = "difference.py:68" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "difference.py:71" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "difference.py:72" *)
  output end_out;
  reg end_out = 1'h0;
  (* src = "difference.py:55" *)
  input [11:0] pixel_in;
  (* src = "difference.py:55" *)
  input [11:0] \pixel_in$1 ;
  (* src = "difference.py:58" *)
  input [11:0] predic_in;
  (* src = "difference.py:58" *)
  input [11:0] \predic_in$2 ;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* init = 13'h0000 *)
  (* src = "difference.py:61" *)
  output [12:0] val_out;
  reg [12:0] val_out = 13'h0000;
  (* init = 13'h0000 *)
  (* src = "difference.py:61" *)
  output [12:0] \val_out$3 ;
  reg [12:0] \val_out$3  = 13'h0000;
  (* init = 13'h0000 *)
  (* src = "difference.py:64" *)
  output [12:0] \val_out$4 ;
  reg [12:0] \val_out$4  = 13'h0000;
  (* init = 13'h0000 *)
  (* src = "difference.py:64" *)
  output [12:0] \val_out$5 ;
  reg [12:0] \val_out$5  = 13'h0000;
  (* src = "difference.py:67" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "difference.py:68" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$11  = pixel_in - (* src = "difference.py:90" *) predic_in;
  assign \$13  = \$11  - (* src = "difference.py:90" *) 1'h1;
  assign \$16  = \pixel_in$1  - (* src = "difference.py:90" *) \predic_in$2 ;
  assign \$18  = \$16  - (* src = "difference.py:90" *) 1'h1;
  assign \$6  = pixel_in - (* src = "difference.py:89" *) predic_in;
  assign \$8  = \pixel_in$1  - (* src = "difference.py:89" *) \predic_in$2 ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      \val_out$5  <= \$next\val_out$5 ;
  always @(posedge clk)
      \val_out$4  <= \$next\val_out$4 ;
  always @(posedge clk)
      \val_out$3  <= \$next\val_out$3 ;
  always @(posedge clk)
      val_out <= \$next\val_out ;
  always @* begin
    \$next\val_out  = val_out;
    casez (valid_in)
      1'h1:
          \$next\val_out  = \$6 ;
    endcase
    casez (rst)
      1'h1:
          \$next\val_out  = 13'h0000;
    endcase
  end
  always @* begin
    \$next\val_out$3  = \val_out$3 ;
    casez (valid_in)
      1'h1:
          \$next\val_out$3  = \$8 ;
    endcase
    casez (rst)
      1'h1:
          \$next\val_out$3  = 13'h0000;
    endcase
  end
  always @* begin
    \$next\val_out$4  = \val_out$4 ;
    casez (valid_in)
      1'h1:
          \$next\val_out$4  = \$10 [12:0];
    endcase
    casez (rst)
      1'h1:
          \$next\val_out$4  = 13'h0000;
    endcase
  end
  always @* begin
    \$next\val_out$5  = \val_out$5 ;
    casez (valid_in)
      1'h1:
          \$next\val_out$5  = \$15 [12:0];
    endcase
    casez (rst)
      1'h1:
          \$next\val_out$5  = 13'h0000;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    \$next\valid_out  = valid_in;
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    \$next\end_out  = end_in;
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  assign \$10  = \$13 ;
  assign \$15  = \$18 ;
endmodule

(* \nmigen.hierarchy  = "top.dma_axi_lite" *)
(* generator = "nMigen" *)
module dma_axi_lite(s_axi_wi___awvalid, s_axi_ri___araddr, in1, in2, in3, in4, in5, in6, in7, in8, in9, s_axi_ri___rready, s_axi_wi___awaddr, s_axi_wi___wvalid, s_axi_wi___wdata, s_axi_wi___wstrb, s_axi_wi___bready, rst, clk, read_addr, write_addr, start, s_axi_ro___arready, s_axi_ro___rvalid, s_axi_wo___awready, s_axi_wo___wready, s_axi_wo___bvalid, s_axi_ro___rdata, s_axi_ro___rresp, s_axi_wo___bresp, s_axi_ri___arvalid);
  wire [31:0] \$1 ;
  wire [31:0] \$3 ;
  (* src = "dma_axi_lite.py:110" *)
  reg [31:0] \$next\addr_v ;
  (* src = "dma_axi_lite.py:112" *)
  reg \$next\arready_v ;
  (* src = "dma_axi_lite.py:115" *)
  reg \$next\awready_v ;
  (* src = "dma_axi_lite.py:134" *)
  reg \$next\basic_enable ;
  (* src = "dma_axi_lite.py:135" *)
  reg [3:0] \$next\basic_index ;
  (* src = "dma_axi_lite.py:122" *)
  reg [1:0] \$next\bresp_v ;
  (* src = "dma_axi_lite.py:117" *)
  reg \$next\bvalid_v ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [2:0] \$next\fsm_state ;
  (* src = "dma_axi_lite.py:119" *)
  reg [31:0] \$next\rdata_v ;
  (* src = "dma_axi_lite.py:59" *)
  reg [31:0] \$next\read_addr ;
  (* src = "dma_axi_lite.py:120" *)
  reg [1:0] \$next\rresp_v ;
  (* src = "dma_axi_lite.py:113" *)
  reg \$next\rvalid_v ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\s_axi_ro___arready ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [31:0] \$next\s_axi_ro___rdata ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [1:0] \$next\s_axi_ro___rresp ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\s_axi_ro___rvalid ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\s_axi_wo___awready ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg [1:0] \$next\s_axi_wo___bresp ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\s_axi_wo___bvalid ;
  (* src = "nmigen/hdl/rec.py:84" *)
  reg \$next\s_axi_wo___wready ;
  (* src = "dma_axi_lite.py:63" *)
  reg [31:0] \$next\start ;
  (* src = "dma_axi_lite.py:125" *)
  reg [31:0] \$next\wdata_v ;
  (* src = "dma_axi_lite.py:116" *)
  reg \$next\wready_v ;
  (* src = "dma_axi_lite.py:60" *)
  reg [31:0] \$next\write_addr ;
  (* src = "dma_axi_lite.py:126" *)
  reg [3:0] \$next\wstrb_v ;
  (* init = 32'd0 *)
  (* src = "dma_axi_lite.py:110" *)
  reg [31:0] addr_v = 32'd0;
  (* init = 1'h0 *)
  (* src = "dma_axi_lite.py:112" *)
  reg arready_v = 1'h0;
  (* init = 1'h0 *)
  (* src = "dma_axi_lite.py:115" *)
  reg awready_v = 1'h0;
  (* src = "dma_axi_lite.py:134" *)
  wire basic_enable;
  (* src = "dma_axi_lite.py:135" *)
  wire [3:0] basic_index;
  (* init = 2'h0 *)
  (* src = "dma_axi_lite.py:122" *)
  reg [1:0] bresp_v = 2'h0;
  (* init = 1'h0 *)
  (* src = "dma_axi_lite.py:117" *)
  reg bvalid_v = 1'h0;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 3'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [2:0] fsm_state = 3'h0;
  (* src = "dma_axi_lite.py:66" *)
  input [31:0] in1;
  (* src = "dma_axi_lite.py:67" *)
  input [31:0] in2;
  (* src = "dma_axi_lite.py:68" *)
  input [31:0] in3;
  (* src = "dma_axi_lite.py:69" *)
  input [31:0] in4;
  (* src = "dma_axi_lite.py:70" *)
  input [31:0] in5;
  (* src = "dma_axi_lite.py:71" *)
  input [31:0] in6;
  (* src = "dma_axi_lite.py:72" *)
  input [31:0] in7;
  (* src = "dma_axi_lite.py:73" *)
  input [31:0] in8;
  (* src = "dma_axi_lite.py:74" *)
  input [31:0] in9;
  (* init = 32'd0 *)
  (* src = "dma_axi_lite.py:119" *)
  reg [31:0] rdata_v = 32'd0;
  (* init = 32'd0 *)
  (* src = "dma_axi_lite.py:59" *)
  output [31:0] read_addr;
  reg [31:0] read_addr = 32'd0;
  (* init = 2'h0 *)
  (* src = "dma_axi_lite.py:120" *)
  reg [1:0] rresp_v = 2'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "dma_axi_lite.py:113" *)
  reg rvalid_v = 1'h0;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [31:0] s_axi_ri___araddr;
  (* src = "nmigen/hdl/rec.py:84" *)
  input s_axi_ri___arvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  input s_axi_ri___rready;
  (* src = "nmigen/hdl/rec.py:84" *)
  output s_axi_ro___arready;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [31:0] s_axi_ro___rdata;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] s_axi_ro___rresp;
  (* src = "nmigen/hdl/rec.py:84" *)
  output s_axi_ro___rvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [31:0] s_axi_wi___awaddr;
  (* src = "nmigen/hdl/rec.py:84" *)
  input s_axi_wi___awvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  input s_axi_wi___bready;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [31:0] s_axi_wi___wdata;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [3:0] s_axi_wi___wstrb;
  (* src = "nmigen/hdl/rec.py:84" *)
  input s_axi_wi___wvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output s_axi_wo___awready;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] s_axi_wo___bresp;
  (* src = "nmigen/hdl/rec.py:84" *)
  output s_axi_wo___bvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output s_axi_wo___wready;
  (* init = 32'd0 *)
  (* src = "dma_axi_lite.py:63" *)
  output [31:0] start;
  reg [31:0] start = 32'd0;
  (* src = "dma_axi_lite.py:125" *)
  wire [31:0] wdata_v;
  (* init = 1'h0 *)
  (* src = "dma_axi_lite.py:116" *)
  reg wready_v = 1'h0;
  (* init = 32'd0 *)
  (* src = "dma_axi_lite.py:60" *)
  output [31:0] write_addr;
  reg [31:0] write_addr = 32'd0;
  (* src = "dma_axi_lite.py:126" *)
  wire [3:0] wstrb_v;
  assign \$1  = s_axi_ri___araddr >>> (* src = "dma_axi_lite.py:225" *) 2'h2;
  assign \$3  = s_axi_wi___awaddr >>> (* src = "dma_axi_lite.py:248" *) 2'h2;
  always @(posedge clk)
      write_addr <= \$next\write_addr ;
  always @(posedge clk)
      read_addr <= \$next\read_addr ;
  always @(posedge clk)
      bresp_v <= \$next\bresp_v ;
  always @(posedge clk)
      wready_v <= \$next\wready_v ;
  always @(posedge clk)
      awready_v <= \$next\awready_v ;
  always @(posedge clk)
      rresp_v <= \$next\rresp_v ;
  always @(posedge clk)
      rdata_v <= \$next\rdata_v ;
  always @(posedge clk)
      arready_v <= \$next\arready_v ;
  always @(posedge clk)
      addr_v <= \$next\addr_v ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      bvalid_v <= \$next\bvalid_v ;
  always @(posedge clk)
      rvalid_v <= \$next\rvalid_v ;
  always @(posedge clk)
      start <= \$next\start ;
  always @* begin
    \$next\wdata_v  = 32'd0;
    \$next\wdata_v  = 32'd0;
    casez (fsm_state)
      3'h4:
          casez (s_axi_wi___wvalid)
            1'h1:
                \$next\wdata_v  = s_axi_wi___wdata;
          endcase
    endcase
  end
  always @* begin
    \$next\wstrb_v  = 4'h0;
    \$next\wstrb_v  = 4'h0;
    casez (fsm_state)
      3'h4:
          casez (s_axi_wi___wvalid)
            1'h1:
                \$next\wstrb_v  = s_axi_wi___wstrb;
          endcase
    endcase
  end
  always @* begin
    \$next\rresp_v  = rresp_v;
    casez (fsm_state)
      3'h3:
          casez (basic_enable)
            1'h1:
                \$next\rresp_v  = 2'h0;
            1'hz:
                \$next\rresp_v  = 2'h3;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\rresp_v  = 2'h0;
    endcase
  end
  always @* begin
    \$next\awready_v  = awready_v;
    casez (fsm_state)
      3'h2:
          \$next\awready_v  = 1'h1;
      3'h4:
          \$next\awready_v  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\awready_v  = 1'h0;
    endcase
  end
  always @* begin
    \$next\wready_v  = wready_v;
    casez (fsm_state)
      3'h4:
          \$next\wready_v  = 1'h1;
      3'h5:
          \$next\wready_v  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\wready_v  = 1'h0;
    endcase
  end
  always @* begin
    \$next\bresp_v  = bresp_v;
    casez (fsm_state)
      3'h4:
          casez (s_axi_wi___wvalid)
            1'h1:
                casez (basic_enable)
                  1'h1:
                    begin
                      \$next\bresp_v  = 2'h0;
                      casez (wstrb_v[0])
                        1'h1:
                            casez (basic_index)
                              4'h3:
                                  \$next\bresp_v  = 2'h2;
                              4'h4:
                                  \$next\bresp_v  = 2'h2;
                              4'h5:
                                  \$next\bresp_v  = 2'h2;
                              4'h6:
                                  \$next\bresp_v  = 2'h2;
                              4'h7:
                                  \$next\bresp_v  = 2'h2;
                              4'h8:
                                  \$next\bresp_v  = 2'h2;
                              4'h9:
                                  \$next\bresp_v  = 2'h2;
                              4'ha:
                                  \$next\bresp_v  = 2'h2;
                              4'hb:
                                  \$next\bresp_v  = 2'h2;
                            endcase
                      endcase
                      casez (wstrb_v[1])
                        1'h1:
                            casez (basic_index)
                              4'h3:
                                  \$next\bresp_v  = 2'h2;
                              4'h4:
                                  \$next\bresp_v  = 2'h2;
                              4'h5:
                                  \$next\bresp_v  = 2'h2;
                              4'h6:
                                  \$next\bresp_v  = 2'h2;
                              4'h7:
                                  \$next\bresp_v  = 2'h2;
                              4'h8:
                                  \$next\bresp_v  = 2'h2;
                              4'h9:
                                  \$next\bresp_v  = 2'h2;
                              4'ha:
                                  \$next\bresp_v  = 2'h2;
                              4'hb:
                                  \$next\bresp_v  = 2'h2;
                            endcase
                      endcase
                      casez (wstrb_v[2])
                        1'h1:
                            casez (basic_index)
                              4'h3:
                                  \$next\bresp_v  = 2'h2;
                              4'h4:
                                  \$next\bresp_v  = 2'h2;
                              4'h5:
                                  \$next\bresp_v  = 2'h2;
                              4'h6:
                                  \$next\bresp_v  = 2'h2;
                              4'h7:
                                  \$next\bresp_v  = 2'h2;
                              4'h8:
                                  \$next\bresp_v  = 2'h2;
                              4'h9:
                                  \$next\bresp_v  = 2'h2;
                              4'ha:
                                  \$next\bresp_v  = 2'h2;
                              4'hb:
                                  \$next\bresp_v  = 2'h2;
                            endcase
                      endcase
                      casez (wstrb_v[3])
                        1'h1:
                            casez (basic_index)
                              4'h3:
                                  \$next\bresp_v  = 2'h2;
                              4'h4:
                                  \$next\bresp_v  = 2'h2;
                              4'h5:
                                  \$next\bresp_v  = 2'h2;
                              4'h6:
                                  \$next\bresp_v  = 2'h2;
                              4'h7:
                                  \$next\bresp_v  = 2'h2;
                              4'h8:
                                  \$next\bresp_v  = 2'h2;
                              4'h9:
                                  \$next\bresp_v  = 2'h2;
                              4'ha:
                                  \$next\bresp_v  = 2'h2;
                              4'hb:
                                  \$next\bresp_v  = 2'h2;
                            endcase
                      endcase
                    end
                  1'hz:
                      \$next\bresp_v  = 2'h3;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\bresp_v  = 2'h0;
    endcase
  end
  always @* begin
    \$next\read_addr  = read_addr;
    casez (fsm_state)
      3'h4:
          casez (s_axi_wi___wvalid)
            1'h1:
                casez (basic_enable)
                  1'h1:
                    begin
                      casez (wstrb_v[0])
                        1'h1:
                            casez (basic_index)
                              4'h0:
                                  \$next\read_addr [7:0] = wdata_v[7:0];
                            endcase
                      endcase
                      casez (wstrb_v[1])
                        1'h1:
                            casez (basic_index)
                              4'h0:
                                  \$next\read_addr [15:8] = wdata_v[15:8];
                            endcase
                      endcase
                      casez (wstrb_v[2])
                        1'h1:
                            casez (basic_index)
                              4'h0:
                                  \$next\read_addr [23:16] = wdata_v[23:16];
                            endcase
                      endcase
                      casez (wstrb_v[3])
                        1'h1:
                            casez (basic_index)
                              4'h0:
                                  \$next\read_addr [31:24] = wdata_v[31:24];
                            endcase
                      endcase
                    end
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\read_addr  = 32'd0;
    endcase
  end
  always @* begin
    \$next\write_addr  = write_addr;
    casez (fsm_state)
      3'h4:
          casez (s_axi_wi___wvalid)
            1'h1:
                casez (basic_enable)
                  1'h1:
                    begin
                      casez (wstrb_v[0])
                        1'h1:
                            casez (basic_index)
                              4'h1:
                                  \$next\write_addr [7:0] = wdata_v[7:0];
                            endcase
                      endcase
                      casez (wstrb_v[1])
                        1'h1:
                            casez (basic_index)
                              4'h1:
                                  \$next\write_addr [15:8] = wdata_v[15:8];
                            endcase
                      endcase
                      casez (wstrb_v[2])
                        1'h1:
                            casez (basic_index)
                              4'h1:
                                  \$next\write_addr [23:16] = wdata_v[23:16];
                            endcase
                      endcase
                      casez (wstrb_v[3])
                        1'h1:
                            casez (basic_index)
                              4'h1:
                                  \$next\write_addr [31:24] = wdata_v[31:24];
                            endcase
                      endcase
                    end
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\write_addr  = 32'd0;
    endcase
  end
  always @* begin
    \$next\start  = start;
    casez (fsm_state)
      3'h4:
          casez (s_axi_wi___wvalid)
            1'h1:
                casez (basic_enable)
                  1'h1:
                    begin
                      casez (wstrb_v[0])
                        1'h1:
                            casez (basic_index)
                              4'h2:
                                  \$next\start [7:0] = wdata_v[7:0];
                            endcase
                      endcase
                      casez (wstrb_v[1])
                        1'h1:
                            casez (basic_index)
                              4'h2:
                                  \$next\start [15:8] = wdata_v[15:8];
                            endcase
                      endcase
                      casez (wstrb_v[2])
                        1'h1:
                            casez (basic_index)
                              4'h2:
                                  \$next\start [23:16] = wdata_v[23:16];
                            endcase
                      endcase
                      casez (wstrb_v[3])
                        1'h1:
                            casez (basic_index)
                              4'h2:
                                  \$next\start [31:24] = wdata_v[31:24];
                            endcase
                      endcase
                    end
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\start  = 32'd0;
    endcase
  end
  always @* begin
    \$next\s_axi_ro___arready  = 1'h0;
    \$next\s_axi_ro___arready  = arready_v;
  end
  always @* begin
    \$next\s_axi_ro___rvalid  = 1'h0;
    \$next\s_axi_ro___rvalid  = rvalid_v;
  end
  always @* begin
    \$next\s_axi_wo___awready  = 1'h0;
    \$next\s_axi_wo___awready  = awready_v;
  end
  always @* begin
    \$next\basic_enable  = 1'h0;
    \$next\basic_enable  = addr_v[10];
  end
  always @* begin
    \$next\s_axi_wo___wready  = 1'h0;
    \$next\s_axi_wo___wready  = wready_v;
  end
  always @* begin
    \$next\s_axi_wo___bvalid  = 1'h0;
    \$next\s_axi_wo___bvalid  = bvalid_v;
  end
  always @* begin
    \$next\s_axi_ro___rdata  = 32'd0;
    \$next\s_axi_ro___rdata  = rdata_v;
  end
  always @* begin
    \$next\s_axi_ro___rresp  = 2'h0;
    \$next\s_axi_ro___rresp  = rresp_v;
  end
  always @* begin
    \$next\s_axi_wo___bresp  = 2'h0;
    \$next\s_axi_wo___bresp  = bresp_v;
  end
  always @* begin
    \$next\basic_index  = 4'h0;
    \$next\basic_index  = addr_v[3:0];
  end
  always @* begin
    \$next\rvalid_v  = rvalid_v;
    casez (fsm_state)
      3'h0:
          \$next\rvalid_v  = 1'h0;
      3'h3:
          casez (s_axi_ri___rready)
            1'h1:
                \$next\rvalid_v  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\rvalid_v  = 1'h0;
    endcase
  end
  always @* begin
    \$next\bvalid_v  = bvalid_v;
    casez (fsm_state)
      3'h0:
          \$next\bvalid_v  = 1'h0;
      3'h5:
          casez (s_axi_wi___bready)
            1'h1:
                \$next\bvalid_v  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\bvalid_v  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez ({ s_axi_wi___awvalid, s_axi_ri___arvalid })
            2'bz1:
                \$next\fsm_state  = 3'h1;
            2'b1z:
                \$next\fsm_state  = 3'h2;
          endcase
      3'h1:
          \$next\fsm_state  = 3'h3;
      3'h3:
          casez (s_axi_ri___rready)
            1'h1:
                \$next\fsm_state  = 3'h0;
          endcase
      3'h2:
          \$next\fsm_state  = 3'h4;
      3'h4:
          casez (s_axi_wi___wvalid)
            1'h1:
                \$next\fsm_state  = 3'h5;
          endcase
      3'h5:
          casez (s_axi_wi___bready)
            1'h1:
                \$next\fsm_state  = 3'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 3'h0;
    endcase
  end
  always @* begin
    \$next\addr_v  = addr_v;
    casez (fsm_state)
      3'h1:
          \$next\addr_v  = \$1 ;
      3'h2:
          \$next\addr_v  = \$3 ;
    endcase
    casez (rst)
      1'h1:
          \$next\addr_v  = 32'd0;
    endcase
  end
  always @* begin
    \$next\arready_v  = arready_v;
    casez (fsm_state)
      3'h1:
          \$next\arready_v  = 1'h1;
      3'h3:
          \$next\arready_v  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\arready_v  = 1'h0;
    endcase
  end
  always @* begin
    \$next\rdata_v  = rdata_v;
    casez (fsm_state)
      3'h3:
          casez (basic_enable)
            1'h1:
                casez (basic_index)
                  4'h0:
                      \$next\rdata_v  = read_addr;
                  4'h1:
                      \$next\rdata_v  = write_addr;
                  4'h2:
                      \$next\rdata_v  = start;
                  4'h3:
                      \$next\rdata_v  = in1;
                  4'h4:
                      \$next\rdata_v  = in2;
                  4'h5:
                      \$next\rdata_v  = in3;
                  4'h6:
                      \$next\rdata_v  = in4;
                  4'h7:
                      \$next\rdata_v  = in5;
                  4'h8:
                      \$next\rdata_v  = in6;
                  4'h9:
                      \$next\rdata_v  = in7;
                  4'ha:
                      \$next\rdata_v  = in8;
                  4'hb:
                      \$next\rdata_v  = in9;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\rdata_v  = 32'd0;
    endcase
  end
  assign s_axi_wo___bresp = \$next\s_axi_wo___bresp ;
  assign s_axi_ro___rresp = \$next\s_axi_ro___rresp ;
  assign s_axi_ro___rdata = \$next\s_axi_ro___rdata ;
  assign s_axi_wo___bvalid = \$next\s_axi_wo___bvalid ;
  assign s_axi_wo___wready = \$next\s_axi_wo___wready ;
  assign s_axi_wo___awready = \$next\s_axi_wo___awready ;
  assign s_axi_ro___rvalid = \$next\s_axi_ro___rvalid ;
  assign s_axi_ro___arready = \$next\s_axi_ro___arready ;
  assign basic_index = \$next\basic_index ;
  assign basic_enable = \$next\basic_enable ;
  assign wstrb_v = \$next\wstrb_v ;
  assign wdata_v = \$next\wdata_v ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.encode" *)
(* generator = "nMigen" *)
module encode(end_in, valid_in, ssss, \val_in$1 , \ssss$2 , rst, clk, enc_out, enc_ctr, \enc_out$3 , \enc_ctr$4 , valid_out, end_out, val_in);
  (* src = "encode.py:184" *)
  reg [4:0] \$next\enc_ctr ;
  (* src = "encode.py:184" *)
  reg [4:0] \$next\enc_ctr$4 ;
  (* src = "encode.py:182" *)
  reg [27:0] \$next\enc_out ;
  (* src = "encode.py:182" *)
  reg [27:0] \$next\enc_out$3 ;
  (* src = "encode.py:106" *)
  reg \$next\end_in$15 ;
  (* src = "encode.py:106" *)
  reg \$next\end_in$6 ;
  (* src = "encode.py:192" *)
  reg \$next\end_out ;
  (* src = "nmigen/hdl/mem.py:81" *)
  reg [3:0] \$next\mem_r_addr ;
  (* src = "nmigen/hdl/mem.py:81" *)
  reg [3:0] \$next\mem_r_addr$25 ;
  (* src = "encode.py:89" *)
  reg [32:0] \$next\rp_data ;
  (* src = "encode.py:89" *)
  reg [32:0] \$next\rp_data$18 ;
  (* src = "encode.py:94" *)
  reg [4:0] \$next\ssss$16 ;
  (* src = "encode.py:94" *)
  reg [4:0] \$next\ssss$7 ;
  (* src = "encode.py:92" *)
  reg [11:0] \$next\val_in$17 ;
  (* src = "encode.py:92" *)
  reg [11:0] \$next\val_in$8 ;
  (* src = "encode.py:102" *)
  reg \$next\valid_in$14 ;
  (* src = "encode.py:102" *)
  reg \$next\valid_in$5 ;
  (* src = "encode.py:188" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "encode.py:184" *)
  output [4:0] enc_ctr;
  (* src = "encode.py:99" *)
  wire [4:0] \enc_ctr$12 ;
  (* src = "encode.py:99" *)
  wire [4:0] \enc_ctr$21 ;
  (* src = "encode.py:184" *)
  output [4:0] \enc_ctr$4 ;
  (* src = "encode.py:182" *)
  output [27:0] enc_out;
  (* src = "encode.py:97" *)
  wire [27:0] \enc_out$11 ;
  (* src = "encode.py:97" *)
  wire [27:0] \enc_out$20 ;
  (* src = "encode.py:182" *)
  output [27:0] \enc_out$3 ;
  (* src = "encode.py:191" *)
  input end_in;
  (* src = "encode.py:106" *)
  wire \end_in$15 ;
  (* src = "encode.py:106" *)
  wire \end_in$6 ;
  (* src = "encode.py:192" *)
  output end_out;
  (* src = "encode.py:107" *)
  wire \end_out$10 ;
  (* src = "nmigen/hdl/mem.py:81" *)
  wire [3:0] mem_r_addr;
  (* src = "nmigen/hdl/mem.py:81" *)
  wire [3:0] \mem_r_addr$25 ;
  (* src = "nmigen/hdl/mem.py:83" *)
  wire [32:0] mem_r_data;
  (* src = "nmigen/hdl/mem.py:83" *)
  wire [32:0] \mem_r_data$26 ;
  (* src = "encode.py:88" *)
  wire [4:0] rp_addr;
  (* src = "encode.py:88" *)
  wire [4:0] \rp_addr$19 ;
  (* src = "encode.py:89" *)
  wire [32:0] rp_data;
  (* src = "encode.py:89" *)
  wire [32:0] \rp_data$18 ;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "encode.py:179" *)
  input [4:0] ssss;
  (* src = "encode.py:94" *)
  wire [4:0] \ssss$16 ;
  (* src = "encode.py:179" *)
  input [4:0] \ssss$2 ;
  (* src = "encode.py:94" *)
  wire [4:0] \ssss$7 ;
  (* src = "encode.py:177" *)
  input [11:0] val_in;
  (* src = "encode.py:177" *)
  input [11:0] \val_in$1 ;
  (* src = "encode.py:92" *)
  wire [11:0] \val_in$17 ;
  (* src = "encode.py:92" *)
  wire [11:0] \val_in$8 ;
  (* src = "encode.py:187" *)
  input valid_in;
  (* src = "encode.py:102" *)
  wire \valid_in$14 ;
  (* src = "encode.py:102" *)
  wire \valid_in$5 ;
  (* src = "encode.py:188" *)
  output valid_out;
  (* src = "encode.py:103" *)
  wire \valid_out$9 ;
  \anonymous$3  \$13  (
    .clk(clk),
    .enc_ctr(\enc_ctr$12 ),
    .enc_out(\enc_out$11 ),
    .end_in(\end_in$6 ),
    .end_out(\end_out$10 ),
    .rp_addr(rp_addr),
    .rp_data(rp_data),
    .rst(rst),
    .ssss(\ssss$7 ),
    .val_in(\val_in$8 ),
    .valid_in(\valid_in$5 ),
    .valid_out(\valid_out$9 )
  );
  \anonymous$4  \$22  (
    .clk(clk),
    .enc_ctr(\enc_ctr$21 ),
    .enc_out(\enc_out$20 ),
    .end_in(\end_in$15 ),
    .rp_addr(\rp_addr$19 ),
    .rp_data(\rp_data$18 ),
    .rst(rst),
    .ssss(\ssss$16 ),
    .val_in(\val_in$17 ),
    .valid_in(\valid_in$14 )
  );
  reg [32:0] mem [12:0];
  initial begin
    mem[0] = 33'h04000000e;
    mem[1] = 33'h030000000;
    mem[2] = 33'h030000004;
    mem[3] = 33'h030000010;
    mem[4] = 33'h030000030;
    mem[5] = 33'h030000080;
    mem[6] = 33'h030000140;
    mem[7] = 33'h030000300;
    mem[8] = 33'h050001e00;
    mem[9] = 33'h060007c00;
    mem[10] = 33'h07001f800;
    mem[11] = 33'h08007f000;
    mem[12] = 33'h0901fe000;
  end
  reg [3:0] _0_;
  reg [3:0] _1_;
  always @(posedge clk) begin
    _0_ <= \$next\mem_r_addr$25 ;
    _1_ <= \$next\mem_r_addr ;
  end
  assign \mem_r_data$26  = mem[_0_];
  assign mem_r_data = mem[_1_];
  always @* begin
    \$next\val_in$8  = 12'h000;
    \$next\val_in$8  = val_in;
  end
  always @* begin
    \$next\end_in$6  = 1'h0;
    \$next\end_in$6  = end_in;
  end
  always @* begin
    \$next\valid_in$14  = 1'h0;
    \$next\valid_in$14  = valid_in;
  end
  always @* begin
    \$next\ssss$16  = 5'h00;
    \$next\ssss$16  = \ssss$2 ;
  end
  always @* begin
    \$next\mem_r_addr$25  = 4'h0;
    \$next\mem_r_addr$25  = \rp_addr$19 [3:0];
  end
  always @* begin
    \$next\rp_data$18  = 33'h000000000;
    \$next\rp_data$18  = \mem_r_data$26 ;
  end
  always @* begin
    \$next\enc_out$3  = 28'h0000000;
    \$next\enc_out$3  = \enc_out$20 ;
  end
  always @* begin
    \$next\enc_ctr$4  = 5'h00;
    \$next\enc_ctr$4  = \enc_ctr$21 ;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = \valid_out$9 ;
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = \end_out$10 ;
  end
  always @* begin
    \$next\valid_in$5  = 1'h0;
    \$next\valid_in$5  = valid_in;
  end
  always @* begin
    \$next\ssss$7  = 5'h00;
    \$next\ssss$7  = ssss;
  end
  always @* begin
    \$next\mem_r_addr  = 4'h0;
    \$next\mem_r_addr  = rp_addr[3:0];
  end
  always @* begin
    \$next\rp_data  = 33'h000000000;
    \$next\rp_data  = mem_r_data;
  end
  always @* begin
    \$next\enc_out  = 28'h0000000;
    \$next\enc_out  = \enc_out$11 ;
  end
  always @* begin
    \$next\enc_ctr  = 5'h00;
    \$next\enc_ctr  = \enc_ctr$12 ;
  end
  always @* begin
    \$next\val_in$17  = 12'h000;
    \$next\val_in$17  = \val_in$1 ;
  end
  always @* begin
    \$next\end_in$15  = 1'h0;
    \$next\end_in$15  = end_in;
  end
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign \enc_ctr$4  = \$next\enc_ctr$4 ;
  assign \enc_out$3  = \$next\enc_out$3 ;
  assign \rp_data$18  = \$next\rp_data$18 ;
  assign \mem_r_addr$25  = \$next\mem_r_addr$25 ;
  assign \ssss$16  = \$next\ssss$16 ;
  assign \valid_in$14  = \$next\valid_in$14 ;
  assign \end_in$15  = \$next\end_in$15 ;
  assign \val_in$17  = \$next\val_in$17 ;
  assign enc_ctr = \$next\enc_ctr ;
  assign enc_out = \$next\enc_out ;
  assign rp_data = \$next\rp_data ;
  assign mem_r_addr = \$next\mem_r_addr ;
  assign \ssss$7  = \$next\ssss$7 ;
  assign \valid_in$5  = \$next\valid_in$5 ;
  assign \end_in$6  = \$next\end_in$6 ;
  assign \val_in$8  = \$next\val_in$8 ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.lj92_pipeline_fifo.fifo" *)
(* generator = "nMigen" *)
module fifo(we, re, rst, clk, dout, readable, level, din);
  wire \$1 ;
  wire \$3 ;
  wire \$5 ;
  wire [9:0] \$7 ;
  (* src = "nmigen/lib/fifo.py:69" *)
  reg [62:0] \$next\dout ;
  (* src = "nmigen/lib/fifo.py:238" *)
  reg [9:0] \$next\level ;
  (* src = "nmigen/lib/fifo.py:70" *)
  reg \$next\readable ;
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [62:0] \$next\unbuffered_din ;
  (* src = "nmigen/lib/fifo.py:71" *)
  reg \$next\unbuffered_re ;
  (* src = "nmigen/lib/fifo.py:139" *)
  reg \$next\unbuffered_replace ;
  (* src = "nmigen/lib/fifo.py:67" *)
  reg \$next\unbuffered_we ;
  (* src = "nmigen/lib/fifo.py:66" *)
  reg \$next\writable ;
  (* init = 1'h0 *)
  reg \$verilog_initial_trigger  = 1'h0;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "nmigen/lib/fifo.py:65" *)
  input [62:0] din;
  (* src = "nmigen/lib/fifo.py:69" *)
  output [62:0] dout;
  (* src = "nmigen/lib/fifo.py:238" *)
  output [9:0] level;
  (* src = "nmigen/lib/fifo.py:71" *)
  input re;
  (* init = 1'h0 *)
  (* src = "nmigen/lib/fifo.py:70" *)
  output readable;
  reg readable = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "nmigen/lib/fifo.py:65" *)
  wire [62:0] unbuffered_din;
  (* src = "nmigen/lib/fifo.py:69" *)
  wire [62:0] unbuffered_dout;
  (* src = "nmigen/lib/fifo.py:138" *)
  wire [8:0] unbuffered_level;
  (* src = "nmigen/lib/fifo.py:71" *)
  wire unbuffered_re;
  (* src = "nmigen/lib/fifo.py:70" *)
  wire unbuffered_readable;
  (* src = "nmigen/lib/fifo.py:139" *)
  wire unbuffered_replace;
  (* src = "nmigen/lib/fifo.py:67" *)
  wire unbuffered_we;
  (* src = "nmigen/lib/fifo.py:66" *)
  wire unbuffered_writable;
  (* src = "nmigen/lib/fifo.py:67" *)
  input we;
  (* src = "nmigen/lib/fifo.py:66" *)
  wire writable;
  assign \$1  = ~ (* src = "nmigen/lib/fifo.py:256" *) readable;
  assign \$3  = \$1  | (* src = "nmigen/lib/fifo.py:256" *) re;
  assign \$5  = unbuffered_readable & (* src = "nmigen/lib/fifo.py:256" *) \$3 ;
  assign \$7  = unbuffered_level + (* src = "nmigen/lib/fifo.py:263" *) readable;
  always @(posedge clk)
      readable <= \$next\readable ;
  unbuffered unbuffered (
    .clk(clk),
    .din(unbuffered_din),
    .dout(unbuffered_dout),
    .level(unbuffered_level),
    .re(unbuffered_re),
    .readable(unbuffered_readable),
    .replace(unbuffered_replace),
    .rst(rst),
    .we(unbuffered_we),
    .writable(unbuffered_writable)
  );
  always @* begin
    \$next\unbuffered_din  = 63'h0000000000000000;
    \$next\unbuffered_din  = din;
  end
  always @* begin
    \$next\unbuffered_we  = 1'h0;
    \$next\unbuffered_we  = we;
  end
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = unbuffered_writable;
  end
  always @* begin
    \$next\unbuffered_replace  = 1'h0;
    \$next\unbuffered_replace  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\dout  = 63'h0000000000000000;
    \$next\dout  = unbuffered_dout;
  end
  always @* begin
    \$next\unbuffered_re  = 1'h0;
    \$next\unbuffered_re  = \$5 ;
  end
  always @* begin
    \$next\readable  = readable;
    casez ({ re, unbuffered_re })
      2'bz1:
          \$next\readable  = 1'h1;
      2'b1z:
          \$next\readable  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\readable  = 1'h0;
    endcase
  end
  always @* begin
    \$next\level  = 10'h000;
    \$next\level  = \$7 ;
  end
  assign level = \$next\level ;
  assign unbuffered_re = \$next\unbuffered_re ;
  assign dout = \$next\dout ;
  assign unbuffered_replace = \$next\unbuffered_replace ;
  assign writable = \$next\writable ;
  assign unbuffered_we = \$next\unbuffered_we ;
  assign unbuffered_din = \$next\unbuffered_din ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.converter_fifo.fifo" *)
(* generator = "nMigen" *)
module \fifo$6 (we, re, rst, clk, writable, dout, readable, level, din);
  wire \$1 ;
  wire \$3 ;
  wire \$5 ;
  wire [9:0] \$7 ;
  (* src = "nmigen/lib/fifo.py:69" *)
  reg [35:0] \$next\dout ;
  (* src = "nmigen/lib/fifo.py:238" *)
  reg [9:0] \$next\level ;
  (* src = "nmigen/lib/fifo.py:70" *)
  reg \$next\readable ;
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [35:0] \$next\unbuffered_din ;
  (* src = "nmigen/lib/fifo.py:71" *)
  reg \$next\unbuffered_re ;
  (* src = "nmigen/lib/fifo.py:139" *)
  reg \$next\unbuffered_replace ;
  (* src = "nmigen/lib/fifo.py:67" *)
  reg \$next\unbuffered_we ;
  (* src = "nmigen/lib/fifo.py:66" *)
  reg \$next\writable ;
  (* init = 1'h0 *)
  reg \$verilog_initial_trigger  = 1'h0;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "nmigen/lib/fifo.py:65" *)
  input [35:0] din;
  (* src = "nmigen/lib/fifo.py:69" *)
  output [35:0] dout;
  (* src = "nmigen/lib/fifo.py:238" *)
  output [9:0] level;
  (* src = "nmigen/lib/fifo.py:71" *)
  input re;
  (* init = 1'h0 *)
  (* src = "nmigen/lib/fifo.py:70" *)
  output readable;
  reg readable = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "nmigen/lib/fifo.py:65" *)
  wire [35:0] unbuffered_din;
  (* src = "nmigen/lib/fifo.py:69" *)
  wire [35:0] unbuffered_dout;
  (* src = "nmigen/lib/fifo.py:138" *)
  wire [8:0] unbuffered_level;
  (* src = "nmigen/lib/fifo.py:71" *)
  wire unbuffered_re;
  (* src = "nmigen/lib/fifo.py:70" *)
  wire unbuffered_readable;
  (* src = "nmigen/lib/fifo.py:139" *)
  wire unbuffered_replace;
  (* src = "nmigen/lib/fifo.py:67" *)
  wire unbuffered_we;
  (* src = "nmigen/lib/fifo.py:66" *)
  wire unbuffered_writable;
  (* src = "nmigen/lib/fifo.py:67" *)
  input we;
  (* src = "nmigen/lib/fifo.py:66" *)
  output writable;
  assign \$1  = ~ (* src = "nmigen/lib/fifo.py:256" *) readable;
  assign \$3  = \$1  | (* src = "nmigen/lib/fifo.py:256" *) re;
  assign \$5  = unbuffered_readable & (* src = "nmigen/lib/fifo.py:256" *) \$3 ;
  assign \$7  = unbuffered_level + (* src = "nmigen/lib/fifo.py:263" *) readable;
  always @(posedge clk)
      readable <= \$next\readable ;
  \unbuffered$7  unbuffered (
    .clk(clk),
    .din(unbuffered_din),
    .dout(unbuffered_dout),
    .level(unbuffered_level),
    .re(unbuffered_re),
    .readable(unbuffered_readable),
    .replace(unbuffered_replace),
    .rst(rst),
    .we(unbuffered_we),
    .writable(unbuffered_writable)
  );
  always @* begin
    \$next\unbuffered_din  = 36'h000000000;
    \$next\unbuffered_din  = din;
  end
  always @* begin
    \$next\unbuffered_we  = 1'h0;
    \$next\unbuffered_we  = we;
  end
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = unbuffered_writable;
  end
  always @* begin
    \$next\unbuffered_replace  = 1'h0;
    \$next\unbuffered_replace  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\dout  = 36'h000000000;
    \$next\dout  = unbuffered_dout;
  end
  always @* begin
    \$next\unbuffered_re  = 1'h0;
    \$next\unbuffered_re  = \$5 ;
  end
  always @* begin
    \$next\readable  = readable;
    casez ({ re, unbuffered_re })
      2'bz1:
          \$next\readable  = 1'h1;
      2'b1z:
          \$next\readable  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\readable  = 1'h0;
    endcase
  end
  always @* begin
    \$next\level  = 10'h000;
    \$next\level  = \$7 ;
  end
  assign level = \$next\level ;
  assign unbuffered_re = \$next\unbuffered_re ;
  assign dout = \$next\dout ;
  assign unbuffered_replace = \$next\unbuffered_replace ;
  assign writable = \$next\writable ;
  assign unbuffered_we = \$next\unbuffered_we ;
  assign unbuffered_din = \$next\unbuffered_din ;
endmodule

(* \nmigen.hierarchy  = "top.reader_fifo.fifo" *)
(* generator = "nMigen" *)
module \fifo$8 (we, replace, re, rst, clk, writable, readable, dout, level, din);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [5:0] \$19 ;
  wire \$2 ;
  wire [5:0] \$20 ;
  wire \$22 ;
  wire [5:0] \$24 ;
  wire [5:0] \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$34 ;
  wire \$37 ;
  wire [6:0] \$39 ;
  wire \$4 ;
  wire [6:0] \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$52 ;
  wire [6:0] \$54 ;
  wire [6:0] \$55 ;
  wire [5:0] \$6 ;
  wire [5:0] \$7 ;
  wire \$9 ;
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [4:0] \$next\consume ;
  (* src = "nmigen/lib/fifo.py:69" *)
  reg [64:0] \$next\dout ;
  (* src = "nmigen/lib/fifo.py:138" *)
  reg [5:0] \$next\level ;
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [4:0] \$next\produce ;
  (* src = "nmigen/hdl/mem.py:81" *)
  reg [4:0] \$next\rdport_storage_r_addr ;
  (* src = "nmigen/lib/fifo.py:70" *)
  reg \$next\readable ;
  (* src = "nmigen/lib/fifo.py:66" *)
  reg \$next\writable ;
  (* src = "nmigen/hdl/mem.py:146" *)
  reg [4:0] \$next\wrport_storage_w_addr ;
  (* src = "nmigen/hdl/mem.py:148" *)
  reg [64:0] \$next\wrport_storage_w_data ;
  (* src = "nmigen/hdl/mem.py:150" *)
  reg \$next\wrport_storage_w_en ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 5'h00 *)
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [4:0] consume = 5'h00;
  (* src = "nmigen/lib/fifo.py:65" *)
  input [64:0] din;
  (* src = "nmigen/lib/fifo.py:69" *)
  output [64:0] dout;
  (* init = 6'h00 *)
  (* src = "nmigen/lib/fifo.py:138" *)
  output [5:0] level;
  reg [5:0] level = 6'h00;
  (* init = 5'h00 *)
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [4:0] produce = 5'h00;
  (* src = "nmigen/hdl/mem.py:81" *)
  wire [4:0] rdport_storage_r_addr;
  (* src = "nmigen/hdl/mem.py:83" *)
  wire [64:0] rdport_storage_r_data;
  (* src = "nmigen/lib/fifo.py:71" *)
  input re;
  (* src = "nmigen/lib/fifo.py:70" *)
  output readable;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "nmigen/lib/fifo.py:67" *)
  input we;
  (* src = "nmigen/lib/fifo.py:66" *)
  output writable;
  (* src = "nmigen/hdl/mem.py:146" *)
  wire [4:0] wrport_storage_w_addr;
  (* src = "nmigen/hdl/mem.py:148" *)
  wire [64:0] wrport_storage_w_data;
  (* src = "nmigen/hdl/mem.py:150" *)
  wire wrport_storage_w_en;
  assign \$9  = writable | (* src = "nmigen/lib/fifo.py:161" *) replace;
  assign \$11  = we & (* src = "nmigen/lib/fifo.py:161" *) \$9 ;
  assign \$13  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$15  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$17  = \$13  & (* src = "nmigen/lib/fifo.py:149" *) \$15 ;
  assign \$20  = produce + (* src = "nmigen/lib/fifo.py:93" *) 1'h1;
  assign \$22  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$25  = consume + (* src = "nmigen/lib/fifo.py:93" *) 1'h1;
  assign \$27  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$2  = level != (* src = "nmigen/lib/fifo.py:144" *) 6'h20;
  assign \$29  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$31  = \$27  & (* src = "nmigen/lib/fifo.py:149" *) \$29 ;
  assign \$34  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$33  = ~ (* src = "nmigen/lib/fifo.py:177" *) \$34 ;
  assign \$37  = \$31  & (* src = "nmigen/lib/fifo.py:177" *) \$33 ;
  assign \$40  = level + (* src = "nmigen/lib/fifo.py:178" *) 1'h1;
  assign \$42  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$45  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$47  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$4  = level != (* src = "nmigen/lib/fifo.py:145" *) 1'h0;
  assign \$49  = \$45  & (* src = "nmigen/lib/fifo.py:149" *) \$47 ;
  assign \$44  = ~ (* src = "nmigen/lib/fifo.py:179" *) \$49 ;
  assign \$52  = \$42  & (* src = "nmigen/lib/fifo.py:179" *) \$44 ;
  assign \$55  = level - (* src = "nmigen/lib/fifo.py:180" *) 1'h1;
  assign \$7  = produce - (* src = "nmigen/lib/fifo.py:100" *) 1'h1;
  always @(posedge clk)
      level <= \$next\level ;
  always @(posedge clk)
      consume <= \$next\consume ;
  always @(posedge clk)
      produce <= \$next\produce ;
  reg [64:0] storage [31:0];
  initial begin
    storage[0] = 65'h00000000000000000;
    storage[1] = 65'h00000000000000000;
    storage[2] = 65'h00000000000000000;
    storage[3] = 65'h00000000000000000;
    storage[4] = 65'h00000000000000000;
    storage[5] = 65'h00000000000000000;
    storage[6] = 65'h00000000000000000;
    storage[7] = 65'h00000000000000000;
    storage[8] = 65'h00000000000000000;
    storage[9] = 65'h00000000000000000;
    storage[10] = 65'h00000000000000000;
    storage[11] = 65'h00000000000000000;
    storage[12] = 65'h00000000000000000;
    storage[13] = 65'h00000000000000000;
    storage[14] = 65'h00000000000000000;
    storage[15] = 65'h00000000000000000;
    storage[16] = 65'h00000000000000000;
    storage[17] = 65'h00000000000000000;
    storage[18] = 65'h00000000000000000;
    storage[19] = 65'h00000000000000000;
    storage[20] = 65'h00000000000000000;
    storage[21] = 65'h00000000000000000;
    storage[22] = 65'h00000000000000000;
    storage[23] = 65'h00000000000000000;
    storage[24] = 65'h00000000000000000;
    storage[25] = 65'h00000000000000000;
    storage[26] = 65'h00000000000000000;
    storage[27] = 65'h00000000000000000;
    storage[28] = 65'h00000000000000000;
    storage[29] = 65'h00000000000000000;
    storage[30] = 65'h00000000000000000;
    storage[31] = 65'h00000000000000000;
  end
  always @(posedge clk) begin
    if (\$next\wrport_storage_w_en ) storage[\$next\wrport_storage_w_addr ] <= \$next\wrport_storage_w_data ;
  end
  assign rdport_storage_r_data = storage[\$next\rdport_storage_r_addr ];
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = \$2 ;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = \$4 ;
  end
  always @* begin
    \$next\wrport_storage_w_addr  = 5'h00;
    \$next\wrport_storage_w_addr  = produce;
    casez (replace)
      1'h1:
          \$next\wrport_storage_w_addr  = \$6 [4:0];
    endcase
  end
  always @* begin
    \$next\wrport_storage_w_data  = 65'h00000000000000000;
    \$next\wrport_storage_w_data  = din;
  end
  always @* begin
    \$next\wrport_storage_w_en  = 1'h0;
    \$next\wrport_storage_w_en  = \$11 ;
  end
  always @* begin
    \$next\produce  = produce;
    casez (\$17 )
      1'h1:
          \$next\produce  = \$19 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\produce  = 5'h00;
    endcase
  end
  always @* begin
    \$next\rdport_storage_r_addr  = 5'h00;
    \$next\rdport_storage_r_addr  = consume;
  end
  always @* begin
    \$next\dout  = 65'h00000000000000000;
    \$next\dout  = rdport_storage_r_data;
  end
  always @* begin
    \$next\consume  = consume;
    casez (\$22 )
      1'h1:
          \$next\consume  = \$24 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\consume  = 5'h00;
    endcase
  end
  always @* begin
    \$next\level  = level;
    casez (\$37 )
      1'h1:
          \$next\level  = \$39 [5:0];
    endcase
    casez (\$52 )
      1'h1:
          \$next\level  = \$54 [5:0];
    endcase
    casez (rst)
      1'h1:
          \$next\level  = 6'h00;
    endcase
  end
  assign \$6  = \$7 ;
  assign \$19  = \$20 ;
  assign \$24  = \$25 ;
  assign \$39  = \$40 ;
  assign \$54  = \$55 ;
  assign dout = \$next\dout ;
  assign rdport_storage_r_addr = \$next\rdport_storage_r_addr ;
  assign wrport_storage_w_en = \$next\wrport_storage_w_en ;
  assign wrport_storage_w_data = \$next\wrport_storage_w_data ;
  assign wrport_storage_w_addr = \$next\wrport_storage_w_addr ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
endmodule

(* \nmigen.hierarchy  = "top.writer_fifo.fifo" *)
(* generator = "nMigen" *)
module \fifo$9 (we, replace, re, rst, clk, writable, readable, dout, level, din);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [5:0] \$19 ;
  wire \$2 ;
  wire [5:0] \$20 ;
  wire \$22 ;
  wire [5:0] \$24 ;
  wire [5:0] \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$34 ;
  wire \$37 ;
  wire [6:0] \$39 ;
  wire \$4 ;
  wire [6:0] \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$52 ;
  wire [6:0] \$54 ;
  wire [6:0] \$55 ;
  wire [5:0] \$6 ;
  wire [5:0] \$7 ;
  wire \$9 ;
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [4:0] \$next\consume ;
  (* src = "nmigen/lib/fifo.py:69" *)
  reg [64:0] \$next\dout ;
  (* src = "nmigen/lib/fifo.py:138" *)
  reg [5:0] \$next\level ;
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [4:0] \$next\produce ;
  (* src = "nmigen/hdl/mem.py:81" *)
  reg [4:0] \$next\rdport_storage_r_addr ;
  (* src = "nmigen/lib/fifo.py:70" *)
  reg \$next\readable ;
  (* src = "nmigen/lib/fifo.py:66" *)
  reg \$next\writable ;
  (* src = "nmigen/hdl/mem.py:146" *)
  reg [4:0] \$next\wrport_storage_w_addr ;
  (* src = "nmigen/hdl/mem.py:148" *)
  reg [64:0] \$next\wrport_storage_w_data ;
  (* src = "nmigen/hdl/mem.py:150" *)
  reg \$next\wrport_storage_w_en ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 5'h00 *)
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [4:0] consume = 5'h00;
  (* src = "nmigen/lib/fifo.py:65" *)
  input [64:0] din;
  (* src = "nmigen/lib/fifo.py:69" *)
  output [64:0] dout;
  (* init = 6'h00 *)
  (* src = "nmigen/lib/fifo.py:138" *)
  output [5:0] level;
  reg [5:0] level = 6'h00;
  (* init = 5'h00 *)
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [4:0] produce = 5'h00;
  (* src = "nmigen/hdl/mem.py:81" *)
  wire [4:0] rdport_storage_r_addr;
  (* src = "nmigen/hdl/mem.py:83" *)
  wire [64:0] rdport_storage_r_data;
  (* src = "nmigen/lib/fifo.py:71" *)
  input re;
  (* src = "nmigen/lib/fifo.py:70" *)
  output readable;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "nmigen/lib/fifo.py:67" *)
  input we;
  (* src = "nmigen/lib/fifo.py:66" *)
  output writable;
  (* src = "nmigen/hdl/mem.py:146" *)
  wire [4:0] wrport_storage_w_addr;
  (* src = "nmigen/hdl/mem.py:148" *)
  wire [64:0] wrport_storage_w_data;
  (* src = "nmigen/hdl/mem.py:150" *)
  wire wrport_storage_w_en;
  assign \$9  = writable | (* src = "nmigen/lib/fifo.py:161" *) replace;
  assign \$11  = we & (* src = "nmigen/lib/fifo.py:161" *) \$9 ;
  assign \$13  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$15  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$17  = \$13  & (* src = "nmigen/lib/fifo.py:149" *) \$15 ;
  assign \$20  = produce + (* src = "nmigen/lib/fifo.py:93" *) 1'h1;
  assign \$22  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$25  = consume + (* src = "nmigen/lib/fifo.py:93" *) 1'h1;
  assign \$27  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$2  = level != (* src = "nmigen/lib/fifo.py:144" *) 6'h20;
  assign \$29  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$31  = \$27  & (* src = "nmigen/lib/fifo.py:149" *) \$29 ;
  assign \$34  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$33  = ~ (* src = "nmigen/lib/fifo.py:177" *) \$34 ;
  assign \$37  = \$31  & (* src = "nmigen/lib/fifo.py:177" *) \$33 ;
  assign \$40  = level + (* src = "nmigen/lib/fifo.py:178" *) 1'h1;
  assign \$42  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$45  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$47  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$4  = level != (* src = "nmigen/lib/fifo.py:145" *) 1'h0;
  assign \$49  = \$45  & (* src = "nmigen/lib/fifo.py:149" *) \$47 ;
  assign \$44  = ~ (* src = "nmigen/lib/fifo.py:179" *) \$49 ;
  assign \$52  = \$42  & (* src = "nmigen/lib/fifo.py:179" *) \$44 ;
  assign \$55  = level - (* src = "nmigen/lib/fifo.py:180" *) 1'h1;
  assign \$7  = produce - (* src = "nmigen/lib/fifo.py:100" *) 1'h1;
  always @(posedge clk)
      level <= \$next\level ;
  always @(posedge clk)
      consume <= \$next\consume ;
  always @(posedge clk)
      produce <= \$next\produce ;
  reg [64:0] storage [31:0];
  initial begin
    storage[0] = 65'h00000000000000000;
    storage[1] = 65'h00000000000000000;
    storage[2] = 65'h00000000000000000;
    storage[3] = 65'h00000000000000000;
    storage[4] = 65'h00000000000000000;
    storage[5] = 65'h00000000000000000;
    storage[6] = 65'h00000000000000000;
    storage[7] = 65'h00000000000000000;
    storage[8] = 65'h00000000000000000;
    storage[9] = 65'h00000000000000000;
    storage[10] = 65'h00000000000000000;
    storage[11] = 65'h00000000000000000;
    storage[12] = 65'h00000000000000000;
    storage[13] = 65'h00000000000000000;
    storage[14] = 65'h00000000000000000;
    storage[15] = 65'h00000000000000000;
    storage[16] = 65'h00000000000000000;
    storage[17] = 65'h00000000000000000;
    storage[18] = 65'h00000000000000000;
    storage[19] = 65'h00000000000000000;
    storage[20] = 65'h00000000000000000;
    storage[21] = 65'h00000000000000000;
    storage[22] = 65'h00000000000000000;
    storage[23] = 65'h00000000000000000;
    storage[24] = 65'h00000000000000000;
    storage[25] = 65'h00000000000000000;
    storage[26] = 65'h00000000000000000;
    storage[27] = 65'h00000000000000000;
    storage[28] = 65'h00000000000000000;
    storage[29] = 65'h00000000000000000;
    storage[30] = 65'h00000000000000000;
    storage[31] = 65'h00000000000000000;
  end
  always @(posedge clk) begin
    if (\$next\wrport_storage_w_en ) storage[\$next\wrport_storage_w_addr ] <= \$next\wrport_storage_w_data ;
  end
  assign rdport_storage_r_data = storage[\$next\rdport_storage_r_addr ];
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = \$2 ;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = \$4 ;
  end
  always @* begin
    \$next\wrport_storage_w_addr  = 5'h00;
    \$next\wrport_storage_w_addr  = produce;
    casez (replace)
      1'h1:
          \$next\wrport_storage_w_addr  = \$6 [4:0];
    endcase
  end
  always @* begin
    \$next\wrport_storage_w_data  = 65'h00000000000000000;
    \$next\wrport_storage_w_data  = din;
  end
  always @* begin
    \$next\wrport_storage_w_en  = 1'h0;
    \$next\wrport_storage_w_en  = \$11 ;
  end
  always @* begin
    \$next\produce  = produce;
    casez (\$17 )
      1'h1:
          \$next\produce  = \$19 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\produce  = 5'h00;
    endcase
  end
  always @* begin
    \$next\rdport_storage_r_addr  = 5'h00;
    \$next\rdport_storage_r_addr  = consume;
  end
  always @* begin
    \$next\dout  = 65'h00000000000000000;
    \$next\dout  = rdport_storage_r_data;
  end
  always @* begin
    \$next\consume  = consume;
    casez (\$22 )
      1'h1:
          \$next\consume  = \$24 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\consume  = 5'h00;
    endcase
  end
  always @* begin
    \$next\level  = level;
    casez (\$37 )
      1'h1:
          \$next\level  = \$39 [5:0];
    endcase
    casez (\$52 )
      1'h1:
          \$next\level  = \$54 [5:0];
    endcase
    casez (rst)
      1'h1:
          \$next\level  = 6'h00;
    endcase
  end
  assign \$6  = \$7 ;
  assign \$19  = \$20 ;
  assign \$24  = \$25 ;
  assign \$39  = \$40 ;
  assign \$54  = \$55 ;
  assign dout = \$next\dout ;
  assign rdport_storage_r_addr = \$next\rdport_storage_r_addr ;
  assign wrport_storage_w_en = \$next\wrport_storage_w_en ;
  assign wrport_storage_w_data = \$next\wrport_storage_w_data ;
  assign wrport_storage_w_addr = \$next\wrport_storage_w_addr ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
endmodule

(* \nmigen.hierarchy  = "top.b64_b32.fifo32" *)
(* generator = "nMigen" *)
module fifo32(we, replace, re, rst, clk, writable, readable, dout, din);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [2:0] \$19 ;
  wire \$2 ;
  wire [2:0] \$20 ;
  wire \$22 ;
  wire [2:0] \$24 ;
  wire [2:0] \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$34 ;
  wire \$37 ;
  wire [3:0] \$39 ;
  wire \$4 ;
  wire [3:0] \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$52 ;
  wire [3:0] \$54 ;
  wire [3:0] \$55 ;
  wire [2:0] \$6 ;
  wire [2:0] \$7 ;
  wire \$9 ;
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [1:0] \$next\consume ;
  (* src = "nmigen/lib/fifo.py:69" *)
  reg [31:0] \$next\dout ;
  (* src = "nmigen/lib/fifo.py:138" *)
  reg [2:0] \$next\level ;
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [1:0] \$next\produce ;
  (* src = "nmigen/hdl/mem.py:81" *)
  reg [1:0] \$next\rdport_storage_r_addr ;
  (* src = "nmigen/lib/fifo.py:70" *)
  reg \$next\readable ;
  (* src = "nmigen/lib/fifo.py:66" *)
  reg \$next\writable ;
  (* src = "nmigen/hdl/mem.py:146" *)
  reg [1:0] \$next\wrport_storage_w_addr ;
  (* src = "nmigen/hdl/mem.py:148" *)
  reg [31:0] \$next\wrport_storage_w_data ;
  (* src = "nmigen/hdl/mem.py:150" *)
  reg \$next\wrport_storage_w_en ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 2'h0 *)
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [1:0] consume = 2'h0;
  (* src = "nmigen/lib/fifo.py:65" *)
  input [31:0] din;
  (* src = "nmigen/lib/fifo.py:69" *)
  output [31:0] dout;
  (* init = 3'h0 *)
  (* src = "nmigen/lib/fifo.py:138" *)
  reg [2:0] level = 3'h0;
  (* init = 2'h0 *)
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [1:0] produce = 2'h0;
  (* src = "nmigen/hdl/mem.py:81" *)
  wire [1:0] rdport_storage_r_addr;
  (* src = "nmigen/hdl/mem.py:83" *)
  wire [31:0] rdport_storage_r_data;
  (* src = "nmigen/lib/fifo.py:71" *)
  input re;
  (* src = "nmigen/lib/fifo.py:70" *)
  output readable;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "nmigen/lib/fifo.py:67" *)
  input we;
  (* src = "nmigen/lib/fifo.py:66" *)
  output writable;
  (* src = "nmigen/hdl/mem.py:146" *)
  wire [1:0] wrport_storage_w_addr;
  (* src = "nmigen/hdl/mem.py:148" *)
  wire [31:0] wrport_storage_w_data;
  (* src = "nmigen/hdl/mem.py:150" *)
  wire wrport_storage_w_en;
  assign \$9  = writable | (* src = "nmigen/lib/fifo.py:161" *) replace;
  assign \$11  = we & (* src = "nmigen/lib/fifo.py:161" *) \$9 ;
  assign \$13  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$15  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$17  = \$13  & (* src = "nmigen/lib/fifo.py:149" *) \$15 ;
  assign \$20  = produce + (* src = "nmigen/lib/fifo.py:93" *) 1'h1;
  assign \$22  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$25  = consume + (* src = "nmigen/lib/fifo.py:93" *) 1'h1;
  assign \$27  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$2  = level != (* src = "nmigen/lib/fifo.py:144" *) 3'h4;
  assign \$29  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$31  = \$27  & (* src = "nmigen/lib/fifo.py:149" *) \$29 ;
  assign \$34  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$33  = ~ (* src = "nmigen/lib/fifo.py:177" *) \$34 ;
  assign \$37  = \$31  & (* src = "nmigen/lib/fifo.py:177" *) \$33 ;
  assign \$40  = level + (* src = "nmigen/lib/fifo.py:178" *) 1'h1;
  assign \$42  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$45  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$47  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$4  = level != (* src = "nmigen/lib/fifo.py:145" *) 1'h0;
  assign \$49  = \$45  & (* src = "nmigen/lib/fifo.py:149" *) \$47 ;
  assign \$44  = ~ (* src = "nmigen/lib/fifo.py:179" *) \$49 ;
  assign \$52  = \$42  & (* src = "nmigen/lib/fifo.py:179" *) \$44 ;
  assign \$55  = level - (* src = "nmigen/lib/fifo.py:180" *) 1'h1;
  assign \$7  = produce - (* src = "nmigen/lib/fifo.py:100" *) 1'h1;
  always @(posedge clk)
      level <= \$next\level ;
  always @(posedge clk)
      consume <= \$next\consume ;
  always @(posedge clk)
      produce <= \$next\produce ;
  reg [31:0] storage [3:0];
  initial begin
    storage[0] = 32'd0;
    storage[1] = 32'd0;
    storage[2] = 32'd0;
    storage[3] = 32'd0;
  end
  always @(posedge clk) begin
    if (\$next\wrport_storage_w_en ) storage[\$next\wrport_storage_w_addr ] <= \$next\wrport_storage_w_data ;
  end
  assign rdport_storage_r_data = storage[\$next\rdport_storage_r_addr ];
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = \$2 ;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = \$4 ;
  end
  always @* begin
    \$next\wrport_storage_w_addr  = 2'h0;
    \$next\wrport_storage_w_addr  = produce;
    casez (replace)
      1'h1:
          \$next\wrport_storage_w_addr  = \$6 [1:0];
    endcase
  end
  always @* begin
    \$next\wrport_storage_w_data  = 32'd0;
    \$next\wrport_storage_w_data  = din;
  end
  always @* begin
    \$next\wrport_storage_w_en  = 1'h0;
    \$next\wrport_storage_w_en  = \$11 ;
  end
  always @* begin
    \$next\produce  = produce;
    casez (\$17 )
      1'h1:
          \$next\produce  = \$19 [1:0];
    endcase
    casez (rst)
      1'h1:
          \$next\produce  = 2'h0;
    endcase
  end
  always @* begin
    \$next\rdport_storage_r_addr  = 2'h0;
    \$next\rdport_storage_r_addr  = consume;
  end
  always @* begin
    \$next\dout  = 32'd0;
    \$next\dout  = rdport_storage_r_data;
  end
  always @* begin
    \$next\consume  = consume;
    casez (\$22 )
      1'h1:
          \$next\consume  = \$24 [1:0];
    endcase
    casez (rst)
      1'h1:
          \$next\consume  = 2'h0;
    endcase
  end
  always @* begin
    \$next\level  = level;
    casez (\$37 )
      1'h1:
          \$next\level  = \$39 [2:0];
    endcase
    casez (\$52 )
      1'h1:
          \$next\level  = \$54 [2:0];
    endcase
    casez (rst)
      1'h1:
          \$next\level  = 3'h0;
    endcase
  end
  assign \$6  = \$7 ;
  assign \$19  = \$20 ;
  assign \$24  = \$25 ;
  assign \$39  = \$40 ;
  assign \$54  = \$55 ;
  assign dout = \$next\dout ;
  assign rdport_storage_r_addr = \$next\rdport_storage_r_addr ;
  assign wrport_storage_w_en = \$next\wrport_storage_w_en ;
  assign wrport_storage_w_data = \$next\wrport_storage_w_data ;
  assign wrport_storage_w_addr = \$next\wrport_storage_w_addr ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
endmodule

(* \nmigen.hierarchy  = "top.b64_b32.fifo64" *)
(* generator = "nMigen" *)
module fifo64(we, replace, re, rst, clk, writable, readable, dout, din);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [1:0] \$19 ;
  wire \$2 ;
  wire [1:0] \$20 ;
  wire \$22 ;
  wire [1:0] \$24 ;
  wire [1:0] \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$34 ;
  wire \$37 ;
  wire [2:0] \$39 ;
  wire \$4 ;
  wire [2:0] \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$52 ;
  wire [2:0] \$54 ;
  wire [2:0] \$55 ;
  wire [1:0] \$6 ;
  wire [1:0] \$7 ;
  wire \$9 ;
  (* src = "nmigen/lib/fifo.py:156" *)
  reg \$next\consume ;
  (* src = "nmigen/lib/fifo.py:69" *)
  reg [63:0] \$next\dout ;
  (* src = "nmigen/lib/fifo.py:138" *)
  reg [1:0] \$next\level ;
  (* src = "nmigen/lib/fifo.py:155" *)
  reg \$next\produce ;
  (* src = "nmigen/hdl/mem.py:81" *)
  reg \$next\rdport_storage_r_addr ;
  (* src = "nmigen/lib/fifo.py:70" *)
  reg \$next\readable ;
  (* src = "nmigen/lib/fifo.py:66" *)
  reg \$next\writable ;
  (* src = "nmigen/hdl/mem.py:146" *)
  reg \$next\wrport_storage_w_addr ;
  (* src = "nmigen/hdl/mem.py:148" *)
  reg [63:0] \$next\wrport_storage_w_data ;
  (* src = "nmigen/hdl/mem.py:150" *)
  reg \$next\wrport_storage_w_en ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 1'h0 *)
  (* src = "nmigen/lib/fifo.py:156" *)
  reg consume = 1'h0;
  (* src = "nmigen/lib/fifo.py:65" *)
  input [63:0] din;
  (* src = "nmigen/lib/fifo.py:69" *)
  output [63:0] dout;
  (* init = 2'h0 *)
  (* src = "nmigen/lib/fifo.py:138" *)
  reg [1:0] level = 2'h0;
  (* init = 1'h0 *)
  (* src = "nmigen/lib/fifo.py:155" *)
  reg produce = 1'h0;
  (* src = "nmigen/hdl/mem.py:81" *)
  wire rdport_storage_r_addr;
  (* src = "nmigen/hdl/mem.py:83" *)
  wire [63:0] rdport_storage_r_data;
  (* src = "nmigen/lib/fifo.py:71" *)
  input re;
  (* src = "nmigen/lib/fifo.py:70" *)
  output readable;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "nmigen/lib/fifo.py:67" *)
  input we;
  (* src = "nmigen/lib/fifo.py:66" *)
  output writable;
  (* src = "nmigen/hdl/mem.py:146" *)
  wire wrport_storage_w_addr;
  (* src = "nmigen/hdl/mem.py:148" *)
  wire [63:0] wrport_storage_w_data;
  (* src = "nmigen/hdl/mem.py:150" *)
  wire wrport_storage_w_en;
  assign \$9  = writable | (* src = "nmigen/lib/fifo.py:161" *) replace;
  assign \$11  = we & (* src = "nmigen/lib/fifo.py:161" *) \$9 ;
  assign \$13  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$15  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$17  = \$13  & (* src = "nmigen/lib/fifo.py:149" *) \$15 ;
  assign \$20  = produce + (* src = "nmigen/lib/fifo.py:93" *) 1'h1;
  assign \$22  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$25  = consume + (* src = "nmigen/lib/fifo.py:93" *) 1'h1;
  assign \$27  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$2  = level != (* src = "nmigen/lib/fifo.py:144" *) 2'h2;
  assign \$29  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$31  = \$27  & (* src = "nmigen/lib/fifo.py:149" *) \$29 ;
  assign \$34  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$33  = ~ (* src = "nmigen/lib/fifo.py:177" *) \$34 ;
  assign \$37  = \$31  & (* src = "nmigen/lib/fifo.py:177" *) \$33 ;
  assign \$40  = level + (* src = "nmigen/lib/fifo.py:178" *) 1'h1;
  assign \$42  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$45  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$47  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$4  = level != (* src = "nmigen/lib/fifo.py:145" *) 1'h0;
  assign \$49  = \$45  & (* src = "nmigen/lib/fifo.py:149" *) \$47 ;
  assign \$44  = ~ (* src = "nmigen/lib/fifo.py:179" *) \$49 ;
  assign \$52  = \$42  & (* src = "nmigen/lib/fifo.py:179" *) \$44 ;
  assign \$55  = level - (* src = "nmigen/lib/fifo.py:180" *) 1'h1;
  assign \$7  = produce - (* src = "nmigen/lib/fifo.py:100" *) 1'h1;
  always @(posedge clk)
      level <= \$next\level ;
  always @(posedge clk)
      consume <= \$next\consume ;
  always @(posedge clk)
      produce <= \$next\produce ;
  reg [63:0] storage [1:0];
  initial begin
    storage[0] = 64'h0000000000000000;
    storage[1] = 64'h0000000000000000;
  end
  always @(posedge clk) begin
    if (\$next\wrport_storage_w_en ) storage[\$next\wrport_storage_w_addr ] <= \$next\wrport_storage_w_data ;
  end
  assign rdport_storage_r_data = storage[\$next\rdport_storage_r_addr ];
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = \$2 ;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = \$4 ;
  end
  always @* begin
    \$next\wrport_storage_w_addr  = 1'h0;
    \$next\wrport_storage_w_addr  = produce;
    casez (replace)
      1'h1:
          \$next\wrport_storage_w_addr  = \$6 [0];
    endcase
  end
  always @* begin
    \$next\wrport_storage_w_data  = 64'h0000000000000000;
    \$next\wrport_storage_w_data  = din;
  end
  always @* begin
    \$next\wrport_storage_w_en  = 1'h0;
    \$next\wrport_storage_w_en  = \$11 ;
  end
  always @* begin
    \$next\produce  = produce;
    casez (\$17 )
      1'h1:
          \$next\produce  = \$19 [0];
    endcase
    casez (rst)
      1'h1:
          \$next\produce  = 1'h0;
    endcase
  end
  always @* begin
    \$next\rdport_storage_r_addr  = 1'h0;
    \$next\rdport_storage_r_addr  = consume;
  end
  always @* begin
    \$next\dout  = 64'h0000000000000000;
    \$next\dout  = rdport_storage_r_data;
  end
  always @* begin
    \$next\consume  = consume;
    casez (\$22 )
      1'h1:
          \$next\consume  = \$24 [0];
    endcase
    casez (rst)
      1'h1:
          \$next\consume  = 1'h0;
    endcase
  end
  always @* begin
    \$next\level  = level;
    casez (\$37 )
      1'h1:
          \$next\level  = \$39 [1:0];
    endcase
    casez (\$52 )
      1'h1:
          \$next\level  = \$54 [1:0];
    endcase
    casez (rst)
      1'h1:
          \$next\level  = 2'h0;
    endcase
  end
  assign \$6  = \$7 ;
  assign \$19  = \$20 ;
  assign \$24  = \$25 ;
  assign \$39  = \$40 ;
  assign \$54  = \$55 ;
  assign dout = \$next\dout ;
  assign rdport_storage_r_addr = \$next\rdport_storage_r_addr ;
  assign wrport_storage_w_en = \$next\wrport_storage_w_en ;
  assign wrport_storage_w_data = \$next\wrport_storage_w_data ;
  assign wrport_storage_w_addr = \$next\wrport_storage_w_addr ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
endmodule

(* \nmigen.hierarchy  = "top.top.fix_0xff" *)
(* generator = "nMigen" *)
module fix_0xff(valid_in, end_in, data_in, rst, clk, valid_out, end_out, data_out, data_out_ctr, o_busy, i_busy);
  wire \$1 ;
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$109 ;
  wire \$11 ;
  wire \$111 ;
  wire \$113 ;
  wire \$115 ;
  wire \$117 ;
  wire \$119 ;
  wire \$121 ;
  wire \$123 ;
  wire [31:0] \$125 ;
  wire [31:0] \$127 ;
  wire [31:0] \$129 ;
  wire \$13 ;
  wire \$131 ;
  wire \$133 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire [31:0] \$43 ;
  wire [31:0] \$45 ;
  wire [31:0] \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire [31:0] \$55 ;
  wire [31:0] \$57 ;
  wire [31:0] \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$9 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  (* src = "fix_0xff.py:72" *)
  reg [31:0] \$next\data_out ;
  (* src = "fix_0xff.py:73" *)
  reg [2:0] \$next\data_out_ctr ;
  (* src = "fix_0xff.py:99" *)
  reg [2:0] \$next\data_out_ctr_reg ;
  (* src = "fix_0xff.py:97" *)
  reg [31:0] \$next\data_out_reg ;
  (* src = "fix_0xff.py:100" *)
  reg \$next\data_out_valid ;
  (* src = "fix_0xff.py:82" *)
  reg \$next\end_out ;
  (* src = "fix_0xff.py:98" *)
  reg \$next\end_out_reg ;
  (* src = "fix_0xff.py:78" *)
  reg \$next\o_busy ;
  (* src = "fix_0xff.py:93" *)
  reg [7:0] \$next\ones ;
  (* src = "fix_0xff.py:77" *)
  reg \$next\valid_out ;
  (* src = "fix_0xff.py:92" *)
  reg [7:0] \$next\zeros ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "fix_0xff.py:69" *)
  input [15:0] data_in;
  (* init = 32'd0 *)
  (* src = "fix_0xff.py:72" *)
  output [31:0] data_out;
  reg [31:0] data_out = 32'd0;
  (* init = 3'h0 *)
  (* src = "fix_0xff.py:73" *)
  output [2:0] data_out_ctr;
  reg [2:0] data_out_ctr = 3'h0;
  (* init = 3'h0 *)
  (* src = "fix_0xff.py:99" *)
  reg [2:0] data_out_ctr_reg = 3'h0;
  (* init = 32'd0 *)
  (* src = "fix_0xff.py:97" *)
  reg [31:0] data_out_reg = 32'd0;
  (* init = 1'h0 *)
  (* src = "fix_0xff.py:100" *)
  reg data_out_valid = 1'h0;
  (* src = "fix_0xff.py:81" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "fix_0xff.py:82" *)
  output end_out;
  reg end_out = 1'h0;
  (* init = 1'h0 *)
  (* src = "fix_0xff.py:98" *)
  reg end_out_reg = 1'h0;
  (* src = "fix_0xff.py:79" *)
  input i_busy;
  (* init = 1'h0 *)
  (* src = "fix_0xff.py:78" *)
  output o_busy;
  reg o_busy = 1'h0;
  (* init = 8'hff *)
  (* src = "fix_0xff.py:93" *)
  reg [7:0] ones = 8'hff;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "fix_0xff.py:76" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "fix_0xff.py:77" *)
  output valid_out;
  reg valid_out = 1'h0;
  (* init = 8'h00 *)
  (* src = "fix_0xff.py:92" *)
  reg [7:0] zeros = 8'h00;
  assign \$9  = \$5  & (* src = "fix_0xff.py:135" *) \$7 ;
  assign \$99  = \$95  & (* src = "fix_0xff.py:138" *) \$97 ;
  assign \$101  = i_busy == (* src = "fix_0xff.py:106" *) 1'h0;
  assign \$103  = valid_out == (* src = "fix_0xff.py:125" *) 1'h0;
  assign \$105  = valid_in == (* src = "fix_0xff.py:135" *) 1'h1;
  assign \$107  = o_busy == (* src = "fix_0xff.py:135" *) 1'h0;
  assign \$109  = \$105  & (* src = "fix_0xff.py:135" *) \$107 ;
  assign \$111  = valid_in == (* src = "fix_0xff.py:137" *) 1'h1;
  assign \$113  = valid_out == (* src = "fix_0xff.py:137" *) 1'h1;
  assign \$115  = \$111  & (* src = "fix_0xff.py:137" *) \$113 ;
  assign \$117  = o_busy == (* src = "fix_0xff.py:141" *) 1'h0;
  assign \$11  = data_out_valid == (* src = "fix_0xff.py:107" *) 1'h0;
  assign \$119  = data_in == (* src = "fix_0xff.py:41" *) 16'hffff;
  assign \$121  = data_in[7:0] == (* src = "fix_0xff.py:47" *) 8'hff;
  assign \$123  = data_in[15:8] == (* src = "fix_0xff.py:53" *) 8'hff;
  assign \$125  = + (* src = "fix_0xff.py:49" *) { data_in[15:8], ones, zeros };
  assign \$127  = + (* src = "fix_0xff.py:55" *) { ones, zeros, data_in[7:0] };
  assign \$129  = + (* src = "fix_0xff.py:69" *) data_in;
  assign \$131  = o_busy == (* src = "fix_0xff.py:141" *) 1'h0;
  assign \$133  = data_in == (* src = "fix_0xff.py:41" *) 16'hffff;
  assign \$135  = data_in[7:0] == (* src = "fix_0xff.py:47" *) 8'hff;
  assign \$137  = data_in[15:8] == (* src = "fix_0xff.py:53" *) 8'hff;
  assign \$13  = i_busy == (* src = "fix_0xff.py:106" *) 1'h0;
  assign \$139  = o_busy == (* src = "fix_0xff.py:141" *) 1'h0;
  assign \$15  = valid_out == (* src = "fix_0xff.py:125" *) 1'h0;
  assign \$17  = valid_in == (* src = "fix_0xff.py:135" *) 1'h1;
  assign \$1  = i_busy == (* src = "fix_0xff.py:106" *) 1'h0;
  assign \$19  = o_busy == (* src = "fix_0xff.py:135" *) 1'h0;
  assign \$21  = \$17  & (* src = "fix_0xff.py:135" *) \$19 ;
  assign \$23  = data_out_valid == (* src = "fix_0xff.py:107" *) 1'h0;
  assign \$25  = i_busy == (* src = "fix_0xff.py:106" *) 1'h0;
  assign \$27  = valid_out == (* src = "fix_0xff.py:125" *) 1'h0;
  assign \$29  = valid_in == (* src = "fix_0xff.py:135" *) 1'h1;
  assign \$31  = o_busy == (* src = "fix_0xff.py:135" *) 1'h0;
  assign \$33  = \$29  & (* src = "fix_0xff.py:135" *) \$31 ;
  assign \$35  = data_out_valid == (* src = "fix_0xff.py:107" *) 1'h0;
  assign \$37  = data_in == (* src = "fix_0xff.py:41" *) 16'hffff;
  assign \$3  = valid_out == (* src = "fix_0xff.py:125" *) 1'h0;
  assign \$39  = data_in[7:0] == (* src = "fix_0xff.py:47" *) 8'hff;
  assign \$41  = data_in[15:8] == (* src = "fix_0xff.py:53" *) 8'hff;
  assign \$43  = + (* src = "fix_0xff.py:49" *) { data_in[15:8], ones, zeros };
  assign \$45  = + (* src = "fix_0xff.py:55" *) { ones, zeros, data_in[7:0] };
  assign \$47  = + (* src = "fix_0xff.py:69" *) data_in;
  assign \$49  = data_in == (* src = "fix_0xff.py:41" *) 16'hffff;
  assign \$51  = data_in[7:0] == (* src = "fix_0xff.py:47" *) 8'hff;
  assign \$53  = data_in[15:8] == (* src = "fix_0xff.py:53" *) 8'hff;
  assign \$55  = + (* src = "fix_0xff.py:49" *) { data_in[15:8], ones, zeros };
  assign \$57  = + (* src = "fix_0xff.py:55" *) { ones, zeros, data_in[7:0] };
  assign \$5  = valid_in == (* src = "fix_0xff.py:135" *) 1'h1;
  assign \$59  = + (* src = "fix_0xff.py:69" *) data_in;
  assign \$61  = i_busy == (* src = "fix_0xff.py:106" *) 1'h0;
  assign \$63  = valid_out == (* src = "fix_0xff.py:125" *) 1'h0;
  assign \$65  = valid_in == (* src = "fix_0xff.py:135" *) 1'h1;
  assign \$67  = o_busy == (* src = "fix_0xff.py:135" *) 1'h0;
  assign \$69  = \$65  & (* src = "fix_0xff.py:135" *) \$67 ;
  assign \$71  = data_out_valid == (* src = "fix_0xff.py:107" *) 1'h0;
  assign \$73  = data_in == (* src = "fix_0xff.py:41" *) 16'hffff;
  assign \$75  = data_in[7:0] == (* src = "fix_0xff.py:47" *) 8'hff;
  assign \$77  = data_in[15:8] == (* src = "fix_0xff.py:53" *) 8'hff;
  assign \$7  = o_busy == (* src = "fix_0xff.py:135" *) 1'h0;
  assign \$79  = data_in == (* src = "fix_0xff.py:41" *) 16'hffff;
  assign \$81  = data_in[7:0] == (* src = "fix_0xff.py:47" *) 8'hff;
  assign \$83  = data_in[15:8] == (* src = "fix_0xff.py:53" *) 8'hff;
  assign \$85  = i_busy == (* src = "fix_0xff.py:106" *) 1'h0;
  assign \$87  = valid_out == (* src = "fix_0xff.py:125" *) 1'h0;
  assign \$89  = valid_in == (* src = "fix_0xff.py:135" *) 1'h1;
  assign \$91  = o_busy == (* src = "fix_0xff.py:135" *) 1'h0;
  assign \$93  = \$89  & (* src = "fix_0xff.py:135" *) \$91 ;
  assign \$95  = valid_in == (* src = "fix_0xff.py:138" *) 1'h1;
  assign \$97  = valid_out == (* src = "fix_0xff.py:138" *) 1'h1;
  always @(posedge clk)
      end_out_reg <= \$next\end_out_reg ;
  always @(posedge clk)
      data_out_ctr_reg <= \$next\data_out_ctr_reg ;
  always @(posedge clk)
      data_out_reg <= \$next\data_out_reg ;
  always @(posedge clk)
      data_out_valid <= \$next\data_out_valid ;
  always @(posedge clk)
      o_busy <= \$next\o_busy ;
  always @(posedge clk)
      data_out_ctr <= \$next\data_out_ctr ;
  always @(posedge clk)
      data_out <= \$next\data_out ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      zeros <= \$next\zeros ;
  always @(posedge clk)
      ones <= \$next\ones ;
  always @* begin
    \$next\ones  = ones;
    \$next\ones  = 8'hff;
    casez (rst)
      1'h1:
          \$next\ones  = 8'hff;
    endcase
  end
  always @* begin
    \$next\zeros  = zeros;
    \$next\zeros  = 8'h00;
    casez (rst)
      1'h1:
          \$next\zeros  = 8'h00;
    endcase
  end
  always @* begin
    \$next\end_out_reg  = end_out_reg;
    casez (\$139 )
      1'h1:
          \$next\end_out_reg  = end_in;
    endcase
    casez (rst)
      1'h1:
          \$next\end_out_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    casez ({ \$9 , \$3 , \$1  })
      3'bzz1:
          casez (\$11 )
            1'h1:
                \$next\valid_out  = valid_in;
            1'hz:
                \$next\valid_out  = 1'h1;
          endcase
      3'bz1z:
          \$next\valid_out  = valid_in;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    casez ({ \$21 , \$15 , \$13  })
      3'bzz1:
          casez (\$23 )
            1'h1:
                \$next\end_out  = end_in;
            1'hz:
                \$next\end_out  = end_out_reg;
          endcase
      3'bz1z:
          \$next\end_out  = end_in;
    endcase
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_out  = data_out;
    casez ({ \$33 , \$27 , \$25  })
      3'bzz1:
          casez (\$35 )
            1'h1:
                casez ({ \$41 , \$39 , \$37  })
                  3'bzz1:
                      \$next\data_out  = { ones, zeros, ones, zeros };
                  3'bz1z:
                      \$next\data_out  = \$43 ;
                  3'b1zz:
                      \$next\data_out  = \$45 ;
                  3'hz:
                      \$next\data_out  = \$47 ;
                endcase
            1'hz:
                \$next\data_out  = data_out_reg;
          endcase
      3'bz1z:
          casez ({ \$53 , \$51 , \$49  })
            3'bzz1:
                \$next\data_out  = { ones, zeros, ones, zeros };
            3'bz1z:
                \$next\data_out  = \$55 ;
            3'b1zz:
                \$next\data_out  = \$57 ;
            3'hz:
                \$next\data_out  = \$59 ;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data_out  = 32'd0;
    endcase
  end
  always @* begin
    \$next\data_out_ctr  = data_out_ctr;
    casez ({ \$69 , \$63 , \$61  })
      3'bzz1:
          casez (\$71 )
            1'h1:
                casez ({ \$77 , \$75 , \$73  })
                  3'bzz1:
                      \$next\data_out_ctr  = 3'h4;
                  3'bz1z:
                      \$next\data_out_ctr  = 3'h3;
                  3'b1zz:
                      \$next\data_out_ctr  = 3'h3;
                  3'hz:
                      \$next\data_out_ctr  = 3'h2;
                endcase
            1'hz:
                \$next\data_out_ctr  = data_out_ctr_reg;
          endcase
      3'bz1z:
          casez ({ \$83 , \$81 , \$79  })
            3'bzz1:
                \$next\data_out_ctr  = 3'h4;
            3'bz1z:
                \$next\data_out_ctr  = 3'h3;
            3'b1zz:
                \$next\data_out_ctr  = 3'h3;
            3'hz:
                \$next\data_out_ctr  = 3'h2;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data_out_ctr  = 3'h0;
    endcase
  end
  always @* begin
    \$next\o_busy  = o_busy;
    casez ({ \$93 , \$87 , \$85  })
      3'bzz1:
          \$next\o_busy  = 1'h0;
      3'bz1z:
          \$next\o_busy  = 1'h0;
      3'b1zz:
          \$next\o_busy  = \$99 ;
    endcase
    casez (rst)
      1'h1:
          \$next\o_busy  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_out_valid  = data_out_valid;
    casez ({ \$109 , \$103 , \$101  })
      3'bzz1:
          \$next\data_out_valid  = 1'h0;
      3'bz1z:
          \$next\data_out_valid  = 1'h0;
      3'b1zz:
          \$next\data_out_valid  = \$115 ;
    endcase
    casez (rst)
      1'h1:
          \$next\data_out_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_out_reg  = data_out_reg;
    casez (\$117 )
      1'h1:
          casez ({ \$123 , \$121 , \$119  })
            3'bzz1:
                \$next\data_out_reg  = { ones, zeros, ones, zeros };
            3'bz1z:
                \$next\data_out_reg  = \$125 ;
            3'b1zz:
                \$next\data_out_reg  = \$127 ;
            3'hz:
                \$next\data_out_reg  = \$129 ;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data_out_reg  = 32'd0;
    endcase
  end
  always @* begin
    \$next\data_out_ctr_reg  = data_out_ctr_reg;
    casez (\$131 )
      1'h1:
          casez ({ \$137 , \$135 , \$133  })
            3'bzz1:
                \$next\data_out_ctr_reg  = 3'h4;
            3'bz1z:
                \$next\data_out_ctr_reg  = 3'h3;
            3'b1zz:
                \$next\data_out_ctr_reg  = 3'h3;
            3'hz:
                \$next\data_out_ctr_reg  = 3'h2;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data_out_ctr_reg  = 3'h0;
    endcase
  end
endmodule

(* \nmigen.hierarchy  = "top.top.fix_0xff2" *)
(* generator = "nMigen" *)
module fix_0xff2(valid_in, data_in_ctr, data_in, end_in, rst, clk, valid_out, data_out, o_busy, end_out, i_busy);
  wire \$1 ;
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$109 ;
  wire \$11 ;
  wire \$111 ;
  wire \$113 ;
  wire \$115 ;
  wire \$117 ;
  wire \$119 ;
  wire \$121 ;
  wire \$123 ;
  wire \$125 ;
  wire \$127 ;
  wire \$129 ;
  wire \$13 ;
  wire \$131 ;
  wire \$133 ;
  wire \$135 ;
  wire \$137 ;
  wire \$139 ;
  wire \$141 ;
  wire \$143 ;
  wire \$145 ;
  wire \$147 ;
  wire \$149 ;
  wire \$15 ;
  wire \$151 ;
  wire \$153 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire \$161 ;
  wire \$163 ;
  wire \$165 ;
  wire \$167 ;
  wire \$169 ;
  wire \$17 ;
  wire \$171 ;
  wire \$173 ;
  wire \$175 ;
  wire \$177 ;
  wire \$179 ;
  wire \$181 ;
  wire \$183 ;
  wire \$185 ;
  wire \$187 ;
  wire \$189 ;
  wire \$19 ;
  wire \$191 ;
  wire \$193 ;
  wire \$195 ;
  wire \$197 ;
  wire \$199 ;
  wire \$201 ;
  wire \$203 ;
  wire \$205 ;
  wire \$207 ;
  wire \$209 ;
  wire \$21 ;
  wire \$211 ;
  wire \$213 ;
  wire \$215 ;
  wire \$217 ;
  wire \$219 ;
  wire \$221 ;
  wire \$223 ;
  wire \$225 ;
  wire \$227 ;
  wire \$229 ;
  wire \$23 ;
  wire \$231 ;
  wire \$233 ;
  wire \$235 ;
  wire \$237 ;
  wire \$239 ;
  wire \$241 ;
  wire \$243 ;
  wire \$245 ;
  wire \$247 ;
  wire \$249 ;
  wire \$25 ;
  wire \$251 ;
  wire \$253 ;
  wire \$255 ;
  wire \$257 ;
  wire \$259 ;
  wire \$261 ;
  wire \$263 ;
  wire \$265 ;
  wire \$267 ;
  wire \$269 ;
  wire \$27 ;
  wire \$271 ;
  wire \$273 ;
  wire \$275 ;
  wire \$277 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire [23:0] \$49 ;
  wire \$5 ;
  wire [23:0] \$51 ;
  wire [23:0] \$53 ;
  wire [23:0] \$55 ;
  wire [23:0] \$57 ;
  wire [23:0] \$59 ;
  wire [23:0] \$61 ;
  wire [23:0] \$63 ;
  wire \$65 ;
  wire [23:0] \$67 ;
  wire [23:0] \$69 ;
  wire \$7 ;
  wire [23:0] \$71 ;
  wire [23:0] \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire [23:0] \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$9 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  (* src = "fix_0xff2.py:174" *)
  reg [1:0] \$next\buffer_count ;
  (* src = "fix_0xff2.py:173" *)
  reg [23:0] \$next\buffer_data ;
  (* src = "fix_0xff2.py:153" *)
  reg [15:0] \$next\data_out ;
  (* src = "fix_0xff2.py:176" *)
  reg [15:0] \$next\data_out_reg ;
  (* src = "fix_0xff2.py:178" *)
  reg \$next\data_out_valid ;
  (* src = "fix_0xff2.py:160" *)
  reg \$next\end_out ;
  (* src = "fix_0xff2.py:177" *)
  reg \$next\end_out_reg ;
  (* src = "fix_0xff2.py:180" *)
  reg \$next\end_reg ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "fix_0xff2.py:162" *)
  reg \$next\o_busy ;
  (* src = "fix_0xff2.py:157" *)
  reg \$next\valid_out ;
  (* init = 2'h0 *)
  (* src = "fix_0xff2.py:174" *)
  reg [1:0] buffer_count = 2'h0;
  (* init = 24'h000000 *)
  (* src = "fix_0xff2.py:173" *)
  reg [23:0] buffer_data = 24'h000000;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "fix_0xff2.py:149" *)
  input [31:0] data_in;
  (* src = "fix_0xff2.py:150" *)
  input [2:0] data_in_ctr;
  (* init = 16'h0000 *)
  (* src = "fix_0xff2.py:153" *)
  output [15:0] data_out;
  reg [15:0] data_out = 16'h0000;
  (* init = 16'h0000 *)
  (* src = "fix_0xff2.py:176" *)
  reg [15:0] data_out_reg = 16'h0000;
  (* init = 1'h0 *)
  (* src = "fix_0xff2.py:178" *)
  reg data_out_valid = 1'h0;
  (* src = "fix_0xff2.py:159" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "fix_0xff2.py:160" *)
  output end_out;
  reg end_out = 1'h0;
  (* init = 1'h0 *)
  (* src = "fix_0xff2.py:177" *)
  reg end_out_reg = 1'h0;
  (* init = 1'h0 *)
  (* src = "fix_0xff2.py:180" *)
  reg end_reg = 1'h0;
  (* init = 2'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "fix_0xff2.py:163" *)
  input i_busy;
  (* init = 1'h0 *)
  (* src = "fix_0xff2.py:162" *)
  output o_busy;
  reg o_busy = 1'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "fix_0xff2.py:156" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "fix_0xff2.py:157" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$9  = \$5  & (* src = "fix_0xff2.py:208" *) \$7 ;
  assign \$99  = i_busy == (* src = "fix_0xff2.py:184" *) 1'h0;
  assign \$101  = valid_out == (* src = "fix_0xff2.py:199" *) 1'h0;
  assign \$103  = valid_in == (* src = "fix_0xff2.py:208" *) 1'h1;
  assign \$105  = o_busy == (* src = "fix_0xff2.py:208" *) 1'h0;
  assign \$107  = \$103  & (* src = "fix_0xff2.py:208" *) \$105 ;
  assign \$109  = data_out_valid == (* src = "fix_0xff2.py:185" *) 1'h0;
  assign \$111  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$113  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$115  = \$111  & (* src = "fix_0xff2.py:102" *) \$113 ;
  assign \$117  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$11  = data_out_valid == (* src = "fix_0xff2.py:185" *) 1'h0;
  assign \$119  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$121  = \$117  & (* src = "fix_0xff2.py:102" *) \$119 ;
  assign \$123  = valid_in == (* src = "fix_0xff2.py:211" *) 1'h1;
  assign \$125  = valid_out == (* src = "fix_0xff2.py:211" *) 1'h1;
  assign \$127  = \$123  & (* src = "fix_0xff2.py:211" *) \$125 ;
  assign \$129  = o_busy == (* src = "fix_0xff2.py:214" *) 1'h0;
  assign \$131  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$133  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$135  = \$131  & (* src = "fix_0xff2.py:102" *) \$133 ;
  assign \$137  = i_busy == (* src = "fix_0xff2.py:218" *) 1'h0;
  assign \$13  = i_busy == (* src = "fix_0xff2.py:218" *) 1'h0;
  assign \$139  = data_out_valid == (* src = "fix_0xff2.py:219" *) 1'h0;
  assign \$141  = end_reg == (* src = "fix_0xff2.py:222" *) 1'h0;
  assign \$143  = i_busy == (* src = "fix_0xff2.py:184" *) 1'h0;
  assign \$145  = valid_out == (* src = "fix_0xff2.py:199" *) 1'h0;
  assign \$147  = valid_in == (* src = "fix_0xff2.py:208" *) 1'h1;
  assign \$149  = o_busy == (* src = "fix_0xff2.py:208" *) 1'h0;
  assign \$151  = \$147  & (* src = "fix_0xff2.py:208" *) \$149 ;
  assign \$153  = data_out_valid == (* src = "fix_0xff2.py:185" *) 1'h0;
  assign \$155  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$157  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$15  = data_out_valid == (* src = "fix_0xff2.py:219" *) 1'h0;
  assign \$159  = \$155  & (* src = "fix_0xff2.py:102" *) \$157 ;
  assign \$161  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$163  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$165  = \$161  & (* src = "fix_0xff2.py:102" *) \$163 ;
  assign \$167  = o_busy == (* src = "fix_0xff2.py:214" *) 1'h0;
  assign \$169  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$171  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$173  = \$169  & (* src = "fix_0xff2.py:102" *) \$171 ;
  assign \$175  = i_busy == (* src = "fix_0xff2.py:218" *) 1'h0;
  assign \$177  = data_out_valid == (* src = "fix_0xff2.py:219" *) 1'h0;
  assign \$17  = i_busy == (* src = "fix_0xff2.py:234" *) 1'h0;
  assign \$179  = buffer_count <= (* src = "fix_0xff2.py:140" *) 2'h2;
  assign \$181  = end_reg == (* src = "fix_0xff2.py:222" *) 1'h0;
  assign \$183  = i_busy == (* src = "fix_0xff2.py:234" *) 1'h0;
  assign \$185  = i_busy == (* src = "fix_0xff2.py:184" *) 1'h0;
  assign \$187  = valid_out == (* src = "fix_0xff2.py:199" *) 1'h0;
  assign \$189  = valid_in == (* src = "fix_0xff2.py:208" *) 1'h1;
  assign \$191  = o_busy == (* src = "fix_0xff2.py:208" *) 1'h0;
  assign \$193  = \$189  & (* src = "fix_0xff2.py:208" *) \$191 ;
  assign \$195  = data_out_valid == (* src = "fix_0xff2.py:185" *) 1'h0;
  assign \$197  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$1  = i_busy == (* src = "fix_0xff2.py:184" *) 1'h0;
  assign \$19  = i_busy == (* src = "fix_0xff2.py:184" *) 1'h0;
  assign \$199  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$201  = \$197  & (* src = "fix_0xff2.py:102" *) \$199 ;
  assign \$203  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$205  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$207  = \$203  & (* src = "fix_0xff2.py:102" *) \$205 ;
  assign \$209  = i_busy == (* src = "fix_0xff2.py:218" *) 1'h0;
  assign \$211  = data_out_valid == (* src = "fix_0xff2.py:219" *) 1'h0;
  assign \$213  = buffer_count <= (* src = "fix_0xff2.py:140" *) 2'h2;
  assign \$215  = i_busy == (* src = "fix_0xff2.py:234" *) 1'h0;
  assign \$217  = i_busy == (* src = "fix_0xff2.py:184" *) 1'h0;
  assign \$21  = valid_out == (* src = "fix_0xff2.py:199" *) 1'h0;
  assign \$219  = valid_out == (* src = "fix_0xff2.py:199" *) 1'h0;
  assign \$221  = valid_in == (* src = "fix_0xff2.py:208" *) 1'h1;
  assign \$223  = o_busy == (* src = "fix_0xff2.py:208" *) 1'h0;
  assign \$225  = \$221  & (* src = "fix_0xff2.py:208" *) \$223 ;
  assign \$227  = data_out_valid == (* src = "fix_0xff2.py:185" *) 1'h0;
  assign \$229  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$231  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$233  = \$229  & (* src = "fix_0xff2.py:102" *) \$231 ;
  assign \$235  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$237  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$23  = valid_in == (* src = "fix_0xff2.py:208" *) 1'h1;
  assign \$239  = \$235  & (* src = "fix_0xff2.py:102" *) \$237 ;
  assign \$241  = o_busy == (* src = "fix_0xff2.py:214" *) 1'h0;
  assign \$243  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$245  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$247  = \$243  & (* src = "fix_0xff2.py:102" *) \$245 ;
  assign \$249  = i_busy == (* src = "fix_0xff2.py:184" *) 1'h0;
  assign \$251  = valid_out == (* src = "fix_0xff2.py:199" *) 1'h0;
  assign \$253  = valid_in == (* src = "fix_0xff2.py:208" *) 1'h1;
  assign \$255  = o_busy == (* src = "fix_0xff2.py:208" *) 1'h0;
  assign \$257  = \$253  & (* src = "fix_0xff2.py:208" *) \$255 ;
  assign \$25  = o_busy == (* src = "fix_0xff2.py:208" *) 1'h0;
  assign \$259  = valid_in == (* src = "fix_0xff2.py:210" *) 1'h1;
  assign \$261  = valid_out == (* src = "fix_0xff2.py:210" *) 1'h1;
  assign \$263  = \$259  & (* src = "fix_0xff2.py:210" *) \$261 ;
  assign \$265  = i_busy == (* src = "fix_0xff2.py:218" *) 1'h0;
  assign \$267  = data_out_valid == (* src = "fix_0xff2.py:219" *) 1'h0;
  assign \$269  = o_busy == (* src = "fix_0xff2.py:214" *) 1'h0;
  assign \$271  = o_busy == (* src = "fix_0xff2.py:214" *) 1'h0;
  assign \$273  = buffer_count == (* src = "fix_0xff2.py:102" *) 1'h0;
  assign \$275  = data_in_ctr == (* src = "fix_0xff2.py:102" *) 2'h2;
  assign \$277  = \$273  & (* src = "fix_0xff2.py:102" *) \$275 ;
  assign \$27  = \$23  & (* src = "fix_0xff2.py:208" *) \$25 ;
  assign \$29  = data_out_valid == (* src = "fix_0xff2.py:185" *) 1'h0;
  assign \$31  = i_busy == (* src = "fix_0xff2.py:218" *) 1'h0;
  assign \$33  = data_out_valid == (* src = "fix_0xff2.py:219" *) 1'h0;
  assign \$35  = i_busy == (* src = "fix_0xff2.py:234" *) 1'h0;
  assign \$37  = i_busy == (* src = "fix_0xff2.py:184" *) 1'h0;
  assign \$3  = valid_out == (* src = "fix_0xff2.py:199" *) 1'h0;
  assign \$39  = valid_out == (* src = "fix_0xff2.py:199" *) 1'h0;
  assign \$41  = valid_in == (* src = "fix_0xff2.py:208" *) 1'h1;
  assign \$43  = o_busy == (* src = "fix_0xff2.py:208" *) 1'h0;
  assign \$45  = \$41  & (* src = "fix_0xff2.py:208" *) \$43 ;
  assign \$47  = data_out_valid == (* src = "fix_0xff2.py:185" *) 1'h0;
  assign \$49  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[7:0];
  assign \$51  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[15:0];
  assign \$53  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[7:0];
  assign \$55  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[15:0];
  assign \$57  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[7:0];
  assign \$5  = valid_in == (* src = "fix_0xff2.py:208" *) 1'h1;
  assign \$59  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[15:0];
  assign \$61  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[7:0];
  assign \$63  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[15:0];
  assign \$65  = o_busy == (* src = "fix_0xff2.py:214" *) 1'h0;
  assign \$67  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[7:0];
  assign \$69  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[15:0];
  assign \$71  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[7:0];
  assign \$73  = + (* src = "nmigen/hdl/ast.py:123" *) data_in[15:0];
  assign \$75  = i_busy == (* src = "fix_0xff2.py:218" *) 1'h0;
  assign \$77  = data_out_valid == (* src = "fix_0xff2.py:219" *) 1'h0;
  assign \$7  = o_busy == (* src = "fix_0xff2.py:208" *) 1'h0;
  assign \$79  = + (* src = "nmigen/hdl/ast.py:123" *) buffer_data[7:0];
  assign \$81  = i_busy == (* src = "fix_0xff2.py:184" *) 1'h0;
  assign \$83  = valid_out == (* src = "fix_0xff2.py:199" *) 1'h0;
  assign \$85  = valid_in == (* src = "fix_0xff2.py:208" *) 1'h1;
  assign \$87  = o_busy == (* src = "fix_0xff2.py:208" *) 1'h0;
  assign \$89  = \$85  & (* src = "fix_0xff2.py:208" *) \$87 ;
  assign \$91  = data_out_valid == (* src = "fix_0xff2.py:185" *) 1'h0;
  assign \$93  = o_busy == (* src = "fix_0xff2.py:214" *) 1'h0;
  assign \$95  = i_busy == (* src = "fix_0xff2.py:218" *) 1'h0;
  assign \$97  = data_out_valid == (* src = "fix_0xff2.py:219" *) 1'h0;
  always @(posedge clk)
      end_out_reg <= \$next\end_out_reg ;
  always @(posedge clk)
      data_out_reg <= \$next\data_out_reg ;
  always @(posedge clk)
      data_out_valid <= \$next\data_out_valid ;
  always @(posedge clk)
      end_reg <= \$next\end_reg ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      o_busy <= \$next\o_busy ;
  always @(posedge clk)
      buffer_count <= \$next\buffer_count ;
  always @(posedge clk)
      buffer_data <= \$next\buffer_data ;
  always @(posedge clk)
      data_out <= \$next\data_out ;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @* begin
    \$next\valid_out  = valid_out;
    casez (fsm_state)
      2'h0:
          casez ({ \$9 , \$3 , \$1  })
            3'bzz1:
                casez (\$11 )
                  1'h1:
                      \$next\valid_out  = valid_in;
                  1'hz:
                      \$next\valid_out  = 1'h1;
                endcase
            3'bz1z:
                \$next\valid_out  = valid_in;
          endcase
      2'h1:
          casez (\$13 )
            1'h1:
                casez (\$15 )
                  1'h1:
                      \$next\valid_out  = 1'h1;
                  1'hz:
                      \$next\valid_out  = 1'h1;
                endcase
          endcase
      2'h2:
          casez (\$17 )
            1'h1:
                casez (data_out_valid)
                  1'h1:
                      \$next\valid_out  = 1'h1;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_out  = data_out;
    casez (fsm_state)
      2'h0:
          casez ({ \$27 , \$21 , \$19  })
            3'bzz1:
                casez (\$29 )
                  1'h1:
                      casez (valid_in)
                        1'h1:
                            casez (buffer_count)
                              2'h0:
                                  casez (data_in_ctr)
                                    3'h2:
                                        \$next\data_out  = data_in[15:0];
                                    3'h3:
                                        \$next\data_out  = data_in[23:8];
                                    3'h4:
                                        \$next\data_out  = data_in[31:16];
                                  endcase
                              2'h1:
                                  casez (data_in_ctr)
                                    3'h2:
                                        \$next\data_out  = { buffer_data[7:0], data_in[15:8] };
                                    3'h3:
                                        \$next\data_out  = { buffer_data[7:0], data_in[23:16] };
                                    3'h4:
                                        \$next\data_out  = { buffer_data[7:0], data_in[31:24] };
                                  endcase
                            endcase
                      endcase
                  1'hz:
                      \$next\data_out  = data_out_reg;
                endcase
            3'bz1z:
                casez (valid_in)
                  1'h1:
                      casez (buffer_count)
                        2'h0:
                            casez (data_in_ctr)
                              3'h2:
                                  \$next\data_out  = data_in[15:0];
                              3'h3:
                                  \$next\data_out  = data_in[23:8];
                              3'h4:
                                  \$next\data_out  = data_in[31:16];
                            endcase
                        2'h1:
                            casez (data_in_ctr)
                              3'h2:
                                  \$next\data_out  = { buffer_data[7:0], data_in[15:8] };
                              3'h3:
                                  \$next\data_out  = { buffer_data[7:0], data_in[23:16] };
                              3'h4:
                                  \$next\data_out  = { buffer_data[7:0], data_in[31:24] };
                            endcase
                      endcase
                endcase
          endcase
      2'h1:
          casez (\$31 )
            1'h1:
                casez (\$33 )
                  1'h1:
                      casez (buffer_count)
                        2'h1:
                          begin
                            \$next\data_out [15:8] = buffer_data[7:0];
                            \$next\data_out [7:0] = 8'h00;
                          end
                        2'h2:
                            \$next\data_out  = buffer_data[15:0];
                        2'h3:
                            \$next\data_out  = buffer_data[23:8];
                      endcase
                  1'hz:
                      \$next\data_out  = data_out_reg;
                endcase
          endcase
      2'h2:
          casez (\$35 )
            1'h1:
                casez (data_out_valid)
                  1'h1:
                      \$next\data_out  = data_out_reg;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data_out  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\end_out_reg  = end_out_reg;
    casez (fsm_state)
      2'h0:
          casez (\$271 )
            1'h1:
                casez (valid_in)
                  1'h1:
                      casez (end_in)
                        1'h1:
                            casez (\$277 )
                              1'h1:
                                  \$next\end_out_reg  = 1'h1;
                            endcase
                      endcase
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\end_out_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buffer_data  = buffer_data;
    casez (fsm_state)
      2'h0:
        begin
          casez ({ \$45 , \$39 , \$37  })
            3'bzz1:
                casez (\$47 )
                  1'h1:
                      casez (valid_in)
                        1'h1:
                            casez (buffer_count)
                              2'h0:
                                  casez (data_in_ctr)
                                    3'h3:
                                        \$next\buffer_data  = \$49 ;
                                    3'h4:
                                        \$next\buffer_data  = \$51 ;
                                  endcase
                              2'h1:
                                  casez (data_in_ctr)
                                    3'h2:
                                        \$next\buffer_data  = \$53 ;
                                    3'h3:
                                        \$next\buffer_data  = \$55 ;
                                    3'h4:
                                        \$next\buffer_data  = data_in[23:0];
                                  endcase
                            endcase
                      endcase
                endcase
            3'bz1z:
                casez (valid_in)
                  1'h1:
                      casez (buffer_count)
                        2'h0:
                            casez (data_in_ctr)
                              3'h3:
                                  \$next\buffer_data  = \$57 ;
                              3'h4:
                                  \$next\buffer_data  = \$59 ;
                            endcase
                        2'h1:
                            casez (data_in_ctr)
                              3'h2:
                                  \$next\buffer_data  = \$61 ;
                              3'h3:
                                  \$next\buffer_data  = \$63 ;
                              3'h4:
                                  \$next\buffer_data  = data_in[23:0];
                            endcase
                      endcase
                endcase
          endcase
          casez (\$65 )
            1'h1:
                casez (valid_in)
                  1'h1:
                      casez (buffer_count)
                        2'h0:
                            casez (data_in_ctr)
                              3'h3:
                                  \$next\buffer_data  = \$67 ;
                              3'h4:
                                  \$next\buffer_data  = \$69 ;
                            endcase
                        2'h1:
                            casez (data_in_ctr)
                              3'h2:
                                  \$next\buffer_data  = \$71 ;
                              3'h3:
                                  \$next\buffer_data  = \$73 ;
                              3'h4:
                                  \$next\buffer_data  = data_in[23:0];
                            endcase
                      endcase
                endcase
          endcase
        end
      2'h1:
          casez (\$75 )
            1'h1:
                casez (\$77 )
                  1'h1:
                      casez (buffer_count)
                        2'h3:
                            \$next\buffer_data  = \$79 ;
                      endcase
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buffer_data  = 24'h000000;
    endcase
  end
  always @* begin
    \$next\buffer_count  = buffer_count;
    casez (fsm_state)
      2'h0:
        begin
          casez ({ \$89 , \$83 , \$81  })
            3'bzz1:
                casez (\$91 )
                  1'h1:
                      casez (valid_in)
                        1'h1:
                            casez (buffer_count)
                              2'h0:
                                  casez (data_in_ctr)
                                    3'h3:
                                        \$next\buffer_count  = 2'h1;
                                    3'h4:
                                        \$next\buffer_count  = 2'h2;
                                  endcase
                              2'h1:
                                  casez (data_in_ctr)
                                    3'h2:
                                        \$next\buffer_count  = 2'h1;
                                    3'h3:
                                        \$next\buffer_count  = 2'h2;
                                    3'h4:
                                        \$next\buffer_count  = 2'h3;
                                  endcase
                            endcase
                      endcase
                endcase
            3'bz1z:
                casez (valid_in)
                  1'h1:
                      casez (buffer_count)
                        2'h0:
                            casez (data_in_ctr)
                              3'h3:
                                  \$next\buffer_count  = 2'h1;
                              3'h4:
                                  \$next\buffer_count  = 2'h2;
                            endcase
                        2'h1:
                            casez (data_in_ctr)
                              3'h2:
                                  \$next\buffer_count  = 2'h1;
                              3'h3:
                                  \$next\buffer_count  = 2'h2;
                              3'h4:
                                  \$next\buffer_count  = 2'h3;
                            endcase
                      endcase
                endcase
          endcase
          casez (\$93 )
            1'h1:
                casez (valid_in)
                  1'h1:
                      casez (buffer_count)
                        2'h0:
                            casez (data_in_ctr)
                              3'h3:
                                  \$next\buffer_count  = 2'h1;
                              3'h4:
                                  \$next\buffer_count  = 2'h2;
                            endcase
                        2'h1:
                            casez (data_in_ctr)
                              3'h2:
                                  \$next\buffer_count  = 2'h1;
                              3'h3:
                                  \$next\buffer_count  = 2'h2;
                              3'h4:
                                  \$next\buffer_count  = 2'h3;
                            endcase
                      endcase
                endcase
          endcase
        end
      2'h1:
          casez (\$95 )
            1'h1:
                casez (\$97 )
                  1'h1:
                      casez (buffer_count)
                        2'h1:
                            \$next\buffer_count  = 2'h0;
                        2'h2:
                            \$next\buffer_count  = 2'h0;
                        2'h3:
                            \$next\buffer_count  = 2'h1;
                      endcase
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buffer_count  = 2'h0;
    endcase
  end
  always @* begin
    \$next\o_busy  = o_busy;
    casez (fsm_state)
      2'h0:
        begin
          casez ({ \$107 , \$101 , \$99  })
            3'bzz1:
              begin
                \$next\o_busy  = 1'h0;
                casez (\$109 )
                  1'h1:
                      casez (valid_in)
                        1'h1:
                          begin
                            casez (buffer_count)
                              2'h0:
                                  casez (data_in_ctr)
                                    3'h4:
                                        \$next\o_busy  = 1'h1;
                                  endcase
                              2'h1:
                                  casez (data_in_ctr)
                                    3'h3:
                                        \$next\o_busy  = 1'h1;
                                    3'h4:
                                        \$next\o_busy  = 1'h1;
                                  endcase
                            endcase
                            casez (end_in)
                              1'h1:
                                  casez (\$115 )
                                    1'h1:
                                        /* empty */;
                                    1'hz:
                                        \$next\o_busy  = 1'h1;
                                  endcase
                            endcase
                          end
                      endcase
                endcase
              end
            3'bz1z:
              begin
                \$next\o_busy  = 1'h0;
                casez (valid_in)
                  1'h1:
                    begin
                      casez (buffer_count)
                        2'h0:
                            casez (data_in_ctr)
                              3'h4:
                                  \$next\o_busy  = 1'h1;
                            endcase
                        2'h1:
                            casez (data_in_ctr)
                              3'h3:
                                  \$next\o_busy  = 1'h1;
                              3'h4:
                                  \$next\o_busy  = 1'h1;
                            endcase
                      endcase
                      casez (end_in)
                        1'h1:
                            casez (\$121 )
                              1'h1:
                                  /* empty */;
                              1'hz:
                                  \$next\o_busy  = 1'h1;
                            endcase
                      endcase
                    end
                endcase
              end
            3'b1zz:
                \$next\o_busy  = \$127 ;
          endcase
          casez (\$129 )
            1'h1:
                casez (valid_in)
                  1'h1:
                    begin
                      casez (buffer_count)
                        2'h0:
                            casez (data_in_ctr)
                              3'h4:
                                  \$next\o_busy  = 1'h1;
                            endcase
                        2'h1:
                            casez (data_in_ctr)
                              3'h3:
                                  \$next\o_busy  = 1'h1;
                              3'h4:
                                  \$next\o_busy  = 1'h1;
                            endcase
                      endcase
                      casez (end_in)
                        1'h1:
                            casez (\$135 )
                              1'h1:
                                  /* empty */;
                              1'hz:
                                  \$next\o_busy  = 1'h1;
                            endcase
                      endcase
                    end
                endcase
          endcase
        end
      2'h1:
          casez (\$137 )
            1'h1:
                casez (\$139 )
                  1'h1:
                      casez (\$141 )
                        1'h1:
                            \$next\o_busy  = 1'h0;
                      endcase
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\o_busy  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
        begin
          casez ({ \$151 , \$145 , \$143  })
            3'bzz1:
                casez (\$153 )
                  1'h1:
                      casez (valid_in)
                        1'h1:
                          begin
                            casez (buffer_count)
                              2'h0:
                                  casez (data_in_ctr)
                                    3'h4:
                                        \$next\fsm_state  = 2'h1;
                                  endcase
                              2'h1:
                                  casez (data_in_ctr)
                                    3'h3:
                                        \$next\fsm_state  = 2'h1;
                                    3'h4:
                                        \$next\fsm_state  = 2'h1;
                                  endcase
                            endcase
                            casez (end_in)
                              1'h1:
                                  casez (\$159 )
                                    1'h1:
                                        \$next\fsm_state  = 2'h2;
                                    1'hz:
                                        \$next\fsm_state  = 2'h1;
                                  endcase
                            endcase
                          end
                      endcase
                endcase
            3'bz1z:
                casez (valid_in)
                  1'h1:
                    begin
                      casez (buffer_count)
                        2'h0:
                            casez (data_in_ctr)
                              3'h4:
                                  \$next\fsm_state  = 2'h1;
                            endcase
                        2'h1:
                            casez (data_in_ctr)
                              3'h3:
                                  \$next\fsm_state  = 2'h1;
                              3'h4:
                                  \$next\fsm_state  = 2'h1;
                            endcase
                      endcase
                      casez (end_in)
                        1'h1:
                            casez (\$165 )
                              1'h1:
                                  \$next\fsm_state  = 2'h2;
                              1'hz:
                                  \$next\fsm_state  = 2'h1;
                            endcase
                      endcase
                    end
                endcase
          endcase
          casez (\$167 )
            1'h1:
                casez (valid_in)
                  1'h1:
                    begin
                      casez (buffer_count)
                        2'h0:
                            casez (data_in_ctr)
                              3'h4:
                                  \$next\fsm_state  = 2'h1;
                            endcase
                        2'h1:
                            casez (data_in_ctr)
                              3'h3:
                                  \$next\fsm_state  = 2'h1;
                              3'h4:
                                  \$next\fsm_state  = 2'h1;
                            endcase
                      endcase
                      casez (end_in)
                        1'h1:
                            casez (\$173 )
                              1'h1:
                                  \$next\fsm_state  = 2'h2;
                              1'hz:
                                  \$next\fsm_state  = 2'h1;
                            endcase
                      endcase
                    end
                endcase
          endcase
        end
      2'h1:
          casez (\$175 )
            1'h1:
                casez (\$177 )
                  1'h1:
                    begin
                      casez (end_reg)
                        1'h1:
                            casez (\$179 )
                              1'h1:
                                  \$next\fsm_state  = 2'h3;
                            endcase
                      endcase
                      casez (\$181 )
                        1'h1:
                            \$next\fsm_state  = 2'h0;
                      endcase
                    end
                endcase
          endcase
      2'h2:
          casez (\$183 )
            1'h1:
                \$next\fsm_state  = 2'h3;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    casez (fsm_state)
      2'h0:
          casez ({ \$193 , \$187 , \$185  })
            3'bzz1:
                casez (\$195 )
                  1'h1:
                      casez (valid_in)
                        1'h1:
                            casez (end_in)
                              1'h1:
                                  casez (\$201 )
                                    1'h1:
                                        \$next\end_out  = 1'h1;
                                  endcase
                            endcase
                      endcase
                  1'hz:
                      \$next\end_out  = end_out_reg;
                endcase
            3'bz1z:
                casez (valid_in)
                  1'h1:
                      casez (end_in)
                        1'h1:
                            casez (\$207 )
                              1'h1:
                                  \$next\end_out  = 1'h1;
                            endcase
                      endcase
                endcase
          endcase
      2'h1:
          casez (\$209 )
            1'h1:
                casez (\$211 )
                  1'h1:
                      casez (end_reg)
                        1'h1:
                            casez (\$213 )
                              1'h1:
                                  \$next\end_out  = 1'h1;
                            endcase
                      endcase
                  1'hz:
                      \$next\end_out  = end_out_reg;
                endcase
          endcase
      2'h2:
          casez (\$215 )
            1'h1:
                casez (data_out_valid)
                  1'h1:
                      \$next\end_out  = 1'h1;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_reg  = end_reg;
    casez (fsm_state)
      2'h0:
        begin
          casez ({ \$225 , \$219 , \$217  })
            3'bzz1:
                casez (\$227 )
                  1'h1:
                      casez (valid_in)
                        1'h1:
                            casez (end_in)
                              1'h1:
                                  casez (\$233 )
                                    1'h1:
                                        /* empty */;
                                    1'hz:
                                        \$next\end_reg  = 1'h1;
                                  endcase
                            endcase
                      endcase
                endcase
            3'bz1z:
                casez (valid_in)
                  1'h1:
                      casez (end_in)
                        1'h1:
                            casez (\$239 )
                              1'h1:
                                  /* empty */;
                              1'hz:
                                  \$next\end_reg  = 1'h1;
                            endcase
                      endcase
                endcase
          endcase
          casez (\$241 )
            1'h1:
                casez (valid_in)
                  1'h1:
                      casez (end_in)
                        1'h1:
                            casez (\$247 )
                              1'h1:
                                  /* empty */;
                              1'hz:
                                  \$next\end_reg  = 1'h1;
                            endcase
                      endcase
                endcase
          endcase
        end
    endcase
    casez (rst)
      1'h1:
          \$next\end_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_out_valid  = data_out_valid;
    casez (fsm_state)
      2'h0:
          casez ({ \$257 , \$251 , \$249  })
            3'bzz1:
                \$next\data_out_valid  = 1'h0;
            3'bz1z:
                \$next\data_out_valid  = 1'h0;
            3'b1zz:
                \$next\data_out_valid  = \$263 ;
          endcase
      2'h1:
          casez (\$265 )
            1'h1:
                casez (\$267 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\data_out_valid  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data_out_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_out_reg  = data_out_reg;
    casez (fsm_state)
      2'h0:
          casez (\$269 )
            1'h1:
                casez (valid_in)
                  1'h1:
                      casez (buffer_count)
                        2'h0:
                            casez (data_in_ctr)
                              3'h2:
                                  \$next\data_out_reg  = data_in[15:0];
                              3'h3:
                                  \$next\data_out_reg  = data_in[23:8];
                              3'h4:
                                  \$next\data_out_reg  = data_in[31:16];
                            endcase
                        2'h1:
                            casez (data_in_ctr)
                              3'h2:
                                  \$next\data_out_reg  = { buffer_data[7:0], data_in[15:8] };
                              3'h3:
                                  \$next\data_out_reg  = { buffer_data[7:0], data_in[23:16] };
                              3'h4:
                                  \$next\data_out_reg  = { buffer_data[7:0], data_in[31:24] };
                            endcase
                      endcase
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data_out_reg  = 16'h0000;
    endcase
  end
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.force_end" *)
(* generator = "nMigen" *)
module force_end(allowed_cycles, rst, clk, fend, valid_in);
  wire \$1 ;
  wire [25:0] \$3 ;
  wire [25:0] \$4 ;
  (* src = "force_end.py:51" *)
  reg [24:0] \$next\counter ;
  (* src = "force_end.py:41" *)
  reg \$next\fend ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "force_end.py:39" *)
  input [23:0] allowed_cycles;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 25'h0000000 *)
  (* src = "force_end.py:51" *)
  reg [24:0] counter = 25'h0000000;
  (* init = 1'h0 *)
  (* src = "force_end.py:41" *)
  output fend;
  reg fend = 1'h0;
  (* init = 2'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "force_end.py:38" *)
  input valid_in;
  assign \$1  = counter == (* src = "force_end.py:61" *) allowed_cycles;
  assign \$4  = counter + (* src = "force_end.py:60" *) 1'h1;
  always @(posedge clk)
      fend <= \$next\fend ;
  always @(posedge clk)
      counter <= \$next\counter ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 2'h1;
          endcase
      2'h1:
          casez (\$1 )
            1'h1:
                \$next\fsm_state  = 2'h2;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\counter  = counter;
    casez (fsm_state)
      2'h1:
          \$next\counter  = \$3 [24:0];
    endcase
    casez (rst)
      1'h1:
          \$next\counter  = 25'h0000000;
    endcase
  end
  always @* begin
    \$next\fend  = fend;
    casez (fsm_state)
      2'h2:
          \$next\fend  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\fend  = 1'h0;
    endcase
  end
  assign \$3  = \$4 ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.vbits_to_cbits.input_handler" *)
(* generator = "nMigen" *)
module input_handler(valid_in, enc_in, enc_in_ctr, in_end, rst, clk, latch_input, buffer, end_out, new_buff_consum, buff_consum, dec_buff);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire [107:0] \$27 ;
  wire [107:0] \$28 ;
  wire \$3 ;
  wire [107:0] \$30 ;
  wire \$32 ;
  wire [107:0] \$34 ;
  wire [107:0] \$35 ;
  wire [107:0] \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire [8:0] \$43 ;
  wire [7:0] \$44 ;
  wire [8:0] \$46 ;
  wire [7:0] \$48 ;
  wire [7:0] \$49 ;
  wire \$5 ;
  wire [7:0] \$51 ;
  wire [7:0] \$52 ;
  wire \$54 ;
  wire [8:0] \$56 ;
  wire [7:0] \$57 ;
  wire [8:0] \$59 ;
  wire [7:0] \$61 ;
  wire [7:0] \$62 ;
  wire [7:0] \$64 ;
  wire [7:0] \$65 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "vbits_to_cbits.py:171" *)
  reg \$next\buff_change ;
  (* src = "vbits_to_cbits.py:146" *)
  reg [6:0] \$next\buff_consum ;
  (* src = "vbits_to_cbits.py:166" *)
  reg [6:0] \$next\buff_free ;
  (* src = "vbits_to_cbits.py:192" *)
  reg \$next\buff_reg ;
  (* src = "vbits_to_cbits.py:145" *)
  reg [76:0] \$next\buffer ;
  (* src = "vbits_to_cbits.py:186" *)
  reg [29:0] \$next\enc_in_buff ;
  (* src = "vbits_to_cbits.py:187" *)
  reg [4:0] \$next\enc_in_ctr_buff ;
  (* src = "vbits_to_cbits.py:181" *)
  reg [4:0] \$next\enc_in_ctr_reg ;
  (* src = "vbits_to_cbits.py:180" *)
  reg [29:0] \$next\enc_in_reg ;
  (* src = "vbits_to_cbits.py:153" *)
  reg \$next\end_out ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "vbits_to_cbits.py:188" *)
  reg \$next\in_end_buff ;
  (* src = "vbits_to_cbits.py:182" *)
  reg \$next\in_end_reg ;
  (* src = "vbits_to_cbits.py:170" *)
  reg \$next\inc_buff ;
  (* src = "vbits_to_cbits.py:138" *)
  reg \$next\latch_input ;
  (* src = "vbits_to_cbits.py:147" *)
  reg [6:0] \$next\new_buff_consum ;
  (* src = "vbits_to_cbits.py:167" *)
  reg [6:0] \$next\new_buff_free ;
  (* src = "vbits_to_cbits.py:165" *)
  reg \$next\start ;
  (* src = "vbits_to_cbits.py:189" *)
  reg \$next\valid_in_buff ;
  (* src = "vbits_to_cbits.py:176" *)
  reg \$next\valid_in_late ;
  (* src = "vbits_to_cbits.py:183" *)
  reg \$next\valid_in_reg ;
  (* src = "vbits_to_cbits.py:171" *)
  wire buff_change;
  (* init = 7'h00 *)
  (* src = "vbits_to_cbits.py:146" *)
  output [6:0] buff_consum;
  reg [6:0] buff_consum = 7'h00;
  (* init = 7'h00 *)
  (* src = "vbits_to_cbits.py:166" *)
  reg [6:0] buff_free = 7'h00;
  (* src = "vbits_to_cbits.py:192" *)
  wire buff_reg;
  (* init = 77'h00000000000000000000 *)
  (* src = "vbits_to_cbits.py:145" *)
  output [76:0] buffer;
  reg [76:0] buffer = 77'h00000000000000000000;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "vbits_to_cbits.py:150" *)
  input dec_buff;
  (* src = "vbits_to_cbits.py:139" *)
  input [29:0] enc_in;
  (* init = 30'h00000000 *)
  (* src = "vbits_to_cbits.py:186" *)
  reg [29:0] enc_in_buff = 30'h00000000;
  (* src = "vbits_to_cbits.py:140" *)
  input [4:0] enc_in_ctr;
  (* init = 5'h00 *)
  (* src = "vbits_to_cbits.py:187" *)
  reg [4:0] enc_in_ctr_buff = 5'h00;
  (* init = 5'h00 *)
  (* src = "vbits_to_cbits.py:181" *)
  reg [4:0] enc_in_ctr_reg = 5'h00;
  (* init = 30'h00000000 *)
  (* src = "vbits_to_cbits.py:180" *)
  reg [29:0] enc_in_reg = 30'h00000000;
  (* init = 1'h0 *)
  (* src = "vbits_to_cbits.py:153" *)
  output end_out;
  reg end_out = 1'h0;
  (* init = 2'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "vbits_to_cbits.py:141" *)
  input in_end;
  (* init = 1'h0 *)
  (* src = "vbits_to_cbits.py:188" *)
  reg in_end_buff = 1'h0;
  (* init = 1'h0 *)
  (* src = "vbits_to_cbits.py:182" *)
  reg in_end_reg = 1'h0;
  (* src = "vbits_to_cbits.py:170" *)
  wire inc_buff;
  (* init = 1'h0 *)
  (* src = "vbits_to_cbits.py:138" *)
  output latch_input;
  reg latch_input = 1'h0;
  (* src = "vbits_to_cbits.py:147" *)
  output [6:0] new_buff_consum;
  (* src = "vbits_to_cbits.py:167" *)
  wire [6:0] new_buff_free;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "vbits_to_cbits.py:165" *)
  reg start = 1'h0;
  (* src = "vbits_to_cbits.py:142" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "vbits_to_cbits.py:189" *)
  reg valid_in_buff = 1'h0;
  (* init = 1'h0 *)
  (* src = "vbits_to_cbits.py:176" *)
  reg valid_in_late = 1'h0;
  (* init = 1'h0 *)
  (* src = "vbits_to_cbits.py:183" *)
  reg valid_in_reg = 1'h0;
  assign \$9  = enc_in_ctr_buff <= (* src = "vbits_to_cbits.py:243" *) buff_free;
  assign \$11  = enc_in_ctr_buff <= (* src = "vbits_to_cbits.py:243" *) buff_free;
  assign \$13  = enc_in_ctr_buff <= (* src = "vbits_to_cbits.py:243" *) buff_free;
  assign \$15  = enc_in_ctr_buff <= (* src = "vbits_to_cbits.py:243" *) buff_free;
  assign \$17  = enc_in_ctr_buff <= (* src = "vbits_to_cbits.py:243" *) buff_free;
  assign \$1  = enc_in_ctr_reg <= (* src = "vbits_to_cbits.py:281" *) buff_free;
  assign \$19  = enc_in_ctr_buff <= (* src = "vbits_to_cbits.py:243" *) buff_free;
  assign \$21  = enc_in_ctr_buff <= (* src = "vbits_to_cbits.py:243" *) buff_free;
  assign \$23  = enc_in_ctr_reg <= (* src = "vbits_to_cbits.py:281" *) buff_free;
  assign \$25  = enc_in_ctr_reg <= (* src = "vbits_to_cbits.py:281" *) buff_free;
  assign \$28  = buffer <<< (* src = "vbits_to_cbits.py:206" *) enc_in_ctr_reg;
  assign \$30  = \$28  | (* src = "vbits_to_cbits.py:206" *) enc_in_reg;
  assign \$32  = enc_in_ctr_reg <= (* src = "vbits_to_cbits.py:281" *) buff_free;
  assign \$35  = buffer <<< (* src = "vbits_to_cbits.py:206" *) enc_in_ctr_reg;
  assign \$37  = \$35  | (* src = "vbits_to_cbits.py:206" *) enc_in_reg;
  assign \$3  = inc_buff | (* src = "vbits_to_cbits.py:173" *) dec_buff;
  assign \$39  = enc_in_ctr_reg <= (* src = "vbits_to_cbits.py:281" *) buff_free;
  assign \$41  = inc_buff & (* src = "vbits_to_cbits.py:289" *) dec_buff;
  assign \$44  = buff_free + (* src = "vbits_to_cbits.py:290" *) 5'h10;
  assign \$46  = \$44  - (* src = "vbits_to_cbits.py:290" *) enc_in_ctr_reg;
  assign \$49  = buff_free + (* src = "vbits_to_cbits.py:293" *) 5'h10;
  assign \$52  = buff_free - (* src = "vbits_to_cbits.py:295" *) enc_in_ctr_reg;
  assign \$54  = inc_buff & (* src = "vbits_to_cbits.py:298" *) dec_buff;
  assign \$57  = buff_consum - (* src = "vbits_to_cbits.py:299" *) 5'h10;
  assign \$5  = start == (* src = "vbits_to_cbits.py:232" *) 1'h0;
  assign \$59  = \$57  + (* src = "vbits_to_cbits.py:299" *) enc_in_ctr_reg;
  assign \$62  = buff_consum - (* src = "vbits_to_cbits.py:302" *) 5'h10;
  assign \$65  = buff_consum + (* src = "vbits_to_cbits.py:304" *) enc_in_ctr_reg;
  assign \$7  = start == (* src = "vbits_to_cbits.py:232" *) 1'h0;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      buffer <= \$next\buffer ;
  always @(posedge clk)
      valid_in_buff <= \$next\valid_in_buff ;
  always @(posedge clk)
      latch_input <= \$next\latch_input ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      in_end_reg <= \$next\in_end_reg ;
  always @(posedge clk)
      enc_in_ctr_reg <= \$next\enc_in_ctr_reg ;
  always @(posedge clk)
      enc_in_reg <= \$next\enc_in_reg ;
  always @(posedge clk)
      in_end_buff <= \$next\in_end_buff ;
  always @(posedge clk)
      enc_in_ctr_buff <= \$next\enc_in_ctr_buff ;
  always @(posedge clk)
      enc_in_buff <= \$next\enc_in_buff ;
  always @(posedge clk)
      start <= \$next\start ;
  always @(posedge clk)
      buff_free <= \$next\buff_free ;
  always @(posedge clk)
      valid_in_late <= \$next\valid_in_late ;
  always @(posedge clk)
      buff_consum <= \$next\buff_consum ;
  always @(posedge clk)
      valid_in_reg <= \$next\valid_in_reg ;
  always @* begin
    \$next\inc_buff  = 1'h0;
    \$next\inc_buff  = 1'h0;
    casez (fsm_state)
      2'h1:
          \$next\inc_buff  = 1'h1;
      2'h2:
          casez (valid_in_reg)
            1'h1:
                casez (\$1 )
                  1'h1:
                      \$next\inc_buff  = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    \$next\buff_change  = 1'h0;
    \$next\buff_change  = \$3 ;
  end
  always @* begin
    \$next\enc_in_ctr_reg  = enc_in_ctr_reg;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$17 )
                  1'h1:
                      \$next\enc_in_ctr_reg  = enc_in_ctr_buff;
                endcase
          endcase
      2'h1:
          \$next\enc_in_ctr_reg  = enc_in_ctr_buff;
      2'h3:
          \$next\enc_in_ctr_reg  = enc_in_ctr;
      2'h2:
          \$next\enc_in_ctr_reg  = enc_in_ctr;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_ctr_reg  = 5'h00;
    endcase
  end
  always @* begin
    \$next\in_end_reg  = in_end_reg;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$19 )
                  1'h1:
                      \$next\in_end_reg  = in_end_buff;
                endcase
          endcase
      2'h1:
          \$next\in_end_reg  = in_end_buff;
      2'h3:
          \$next\in_end_reg  = in_end;
      2'h2:
          \$next\in_end_reg  = in_end;
    endcase
    casez (rst)
      1'h1:
          \$next\in_end_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$21 )
                  1'h1:
                      \$next\fsm_state  = 2'h1;
                endcase
            2'b1z:
                \$next\fsm_state  = 2'h2;
            2'hz:
                \$next\fsm_state  = 2'h3;
          endcase
      2'h1:
          casez (valid_in_reg)
            1'h1:
                \$next\fsm_state  = 2'h2;
            1'hz:
                \$next\fsm_state  = 2'h3;
          endcase
      2'h3:
          \$next\fsm_state  = 2'h2;
      2'h2:
          casez (valid_in_reg)
            1'h1:
                casez (\$23 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\fsm_state  = 2'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\latch_input  = latch_input;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                /* empty */;
            2'b1z:
                \$next\latch_input  = 1'h1;
            2'hz:
                \$next\latch_input  = 1'h1;
          endcase
      2'h1:
          casez (valid_in_reg)
            1'h1:
                \$next\latch_input  = 1'h1;
            1'hz:
                \$next\latch_input  = 1'h1;
          endcase
      2'h2:
          casez (valid_in_reg)
            1'h1:
                casez (\$25 )
                  1'h1:
                      \$next\latch_input  = 1'h1;
                  1'hz:
                      \$next\latch_input  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\latch_input  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_in_buff  = valid_in_buff;
    casez (fsm_state)
      2'h1:
          \$next\valid_in_buff  = 1'h0;
      2'h2:
          \$next\valid_in_buff  = valid_in_reg;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_in_buff  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buffer  = buffer;
    casez (fsm_state)
      2'h1:
          \$next\buffer  = \$27 [76:0];
      2'h2:
          casez (valid_in_reg)
            1'h1:
                casez (\$32 )
                  1'h1:
                      \$next\buffer  = \$34 [76:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buffer  = 77'h00000000000000000000;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    casez (fsm_state)
      2'h1:
          \$next\end_out  = in_end_reg;
      2'h2:
          casez (valid_in_reg)
            1'h1:
                casez (\$39 )
                  1'h1:
                      \$next\end_out  = in_end_reg;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_in_reg  = valid_in_reg;
    casez (fsm_state)
      2'h3:
          \$next\valid_in_reg  = valid_in;
      2'h2:
          \$next\valid_in_reg  = valid_in;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_in_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\new_buff_free  = 7'h00;
    casez (\$41 )
      1'h1:
          \$next\new_buff_free  = \$43 [6:0];
      1'hz:
          casez ({ inc_buff, dec_buff })
            2'bz1:
                \$next\new_buff_free  = \$48 [6:0];
            2'b1z:
                \$next\new_buff_free  = \$51 [6:0];
          endcase
    endcase
  end
  always @* begin
    \$next\new_buff_consum  = 7'h00;
    casez (\$54 )
      1'h1:
          \$next\new_buff_consum  = \$56 [6:0];
      1'hz:
          casez ({ inc_buff, dec_buff })
            2'bz1:
                \$next\new_buff_consum  = \$61 [6:0];
            2'b1z:
                \$next\new_buff_consum  = \$64 [6:0];
          endcase
    endcase
  end
  always @* begin
    \$next\valid_in_late  = valid_in_late;
    \$next\valid_in_late  = valid_in;
    casez (rst)
      1'h1:
          \$next\valid_in_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buff_consum  = buff_consum;
    casez (buff_change)
      1'h1:
          \$next\buff_consum  = new_buff_consum;
    endcase
    casez (rst)
      1'h1:
          \$next\buff_consum  = 7'h00;
    endcase
  end
  always @* begin
    \$next\buff_reg  = 1'h0;
    \$next\buff_reg  = 1'h0;
    casez (fsm_state)
      2'h3:
          \$next\buff_reg  = 1'h1;
      2'h2:
          \$next\buff_reg  = 1'h1;
    endcase
  end
  always @* begin
    \$next\buff_free  = buff_free;
    casez (\$5 )
      1'h1:
          \$next\buff_free  = 7'h4d;
    endcase
    casez (buff_change)
      1'h1:
          \$next\buff_free  = new_buff_free;
    endcase
    casez (rst)
      1'h1:
          \$next\buff_free  = 7'h00;
    endcase
  end
  always @* begin
    \$next\start  = start;
    casez (\$7 )
      1'h1:
          \$next\start  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\start  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_in_buff  = enc_in_buff;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$9 )
                  1'h1:
                      \$next\enc_in_buff  = enc_in_reg;
                endcase
          endcase
      2'h1:
          \$next\enc_in_buff  = enc_in_reg;
      2'h2:
          \$next\enc_in_buff  = enc_in_reg;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_buff  = 30'h00000000;
    endcase
  end
  always @* begin
    \$next\enc_in_ctr_buff  = enc_in_ctr_buff;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$11 )
                  1'h1:
                      \$next\enc_in_ctr_buff  = enc_in_ctr_reg;
                endcase
          endcase
      2'h1:
          \$next\enc_in_ctr_buff  = enc_in_ctr_reg;
      2'h2:
          \$next\enc_in_ctr_buff  = enc_in_ctr_reg;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_ctr_buff  = 5'h00;
    endcase
  end
  always @* begin
    \$next\in_end_buff  = in_end_buff;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$13 )
                  1'h1:
                      \$next\in_end_buff  = in_end_reg;
                endcase
          endcase
      2'h1:
          \$next\in_end_buff  = in_end_reg;
      2'h2:
          \$next\in_end_buff  = in_end_reg;
    endcase
    casez (rst)
      1'h1:
          \$next\in_end_buff  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_in_reg  = enc_in_reg;
    casez (fsm_state)
      2'h0:
          casez ({ valid_in_reg, valid_in_buff })
            2'bz1:
                casez (\$15 )
                  1'h1:
                      \$next\enc_in_reg  = enc_in_buff;
                endcase
          endcase
      2'h1:
          \$next\enc_in_reg  = enc_in_buff;
      2'h3:
          \$next\enc_in_reg  = enc_in;
      2'h2:
          \$next\enc_in_reg  = enc_in;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_reg  = 30'h00000000;
    endcase
  end
  assign \$27  = \$30 ;
  assign \$34  = \$37 ;
  assign \$43  = \$46 ;
  assign \$48  = \$49 ;
  assign \$51  = \$52 ;
  assign \$56  = \$59 ;
  assign \$61  = \$62 ;
  assign \$64  = \$65 ;
  assign new_buff_consum = \$next\new_buff_consum ;
  assign new_buff_free = \$next\new_buff_free ;
  assign buff_reg = \$next\buff_reg ;
  assign buff_change = \$next\buff_change ;
  assign inc_buff = \$next\inc_buff ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1" *)
(* generator = "nMigen" *)
module integration_1(pixel_in, \pixel_in$1 , rst, clk, full_rst, full_clk, enc_out, enc_out_ctr, valid_out, end_out, end_of_frame, fend_out, valid_in);
  (* src = "difference.py:71" *)
  reg \$next\difference_end_in ;
  (* src = "difference.py:55" *)
  reg [11:0] \$next\difference_pixel_in ;
  (* src = "difference.py:55" *)
  reg [11:0] \$next\difference_pixel_in$5 ;
  (* src = "difference.py:58" *)
  reg [11:0] \$next\difference_predic_in ;
  (* src = "difference.py:58" *)
  reg [11:0] \$next\difference_predic_in$6 ;
  (* src = "difference.py:67" *)
  reg \$next\difference_valid_in ;
  (* src = "integration_1.py:26" *)
  reg [55:0] \$next\enc_out ;
  (* src = "integration_1.py:27" *)
  reg [5:0] \$next\enc_out_ctr ;
  (* src = "encode.py:191" *)
  reg \$next\encode_end_in ;
  (* src = "encode.py:179" *)
  reg [4:0] \$next\encode_ssss ;
  (* src = "encode.py:179" *)
  reg [4:0] \$next\encode_ssss$15 ;
  (* src = "encode.py:177" *)
  reg [11:0] \$next\encode_val_in ;
  (* src = "encode.py:177" *)
  reg [11:0] \$next\encode_val_in$14 ;
  (* src = "encode.py:187" *)
  reg \$next\encode_valid_in ;
  (* src = "integration_1.py:34" *)
  reg \$next\end_out ;
  (* src = "integration_1.py:35" *)
  reg \$next\fend_out ;
  (* src = "force_end.py:39" *)
  reg [23:0] \$next\force_end_allowed_cycles ;
  (* src = "force_end.py:38" *)
  reg \$next\force_end_valid_in ;
  (* src = "merge.py:109" *)
  reg [27:0] \$next\merge_enc_in ;
  (* src = "merge.py:109" *)
  reg [27:0] \$next\merge_enc_in$18 ;
  (* src = "merge.py:110" *)
  reg [4:0] \$next\merge_enc_in_ctr ;
  (* src = "merge.py:110" *)
  reg [4:0] \$next\merge_enc_in_ctr$19 ;
  (* src = "merge.py:120" *)
  reg \$next\merge_end_in ;
  (* src = "merge.py:116" *)
  reg \$next\merge_valid_in ;
  (* src = "normalize.py:207" *)
  reg \$next\normalize_end_in ;
  (* src = "normalize.py:194" *)
  reg [12:0] \$next\normalize_val_in ;
  (* src = "normalize.py:194" *)
  reg [12:0] \$next\normalize_val_in$10 ;
  (* src = "normalize.py:203" *)
  reg \$next\normalize_valid_in ;
  (* src = "normalize.py:196" *)
  reg [12:0] \$next\normalize_vals_in_mns ;
  (* src = "normalize.py:196" *)
  reg [12:0] \$next\normalize_vals_in_mns$11 ;
  (* src = "predictor_p1_c4_pix1_2.py:80" *)
  reg \$next\predictor_end_in ;
  (* src = "predictor_p1_c4_pix1_2.py:73" *)
  reg \$next\predictor_new_row ;
  (* src = "predictor_p1_c4_pix1_2.py:64" *)
  reg [11:0] \$next\predictor_pixel_in ;
  (* src = "predictor_p1_c4_pix1_2.py:64" *)
  reg [11:0] \$next\predictor_pixel_in$2 ;
  (* src = "predictor_p1_c4_pix1_2.py:76" *)
  reg \$next\predictor_valid_in ;
  (* src = "signals.py:41" *)
  reg [15:0] \$next\signals_height ;
  (* src = "signals.py:43" *)
  reg \$next\signals_new_input ;
  (* src = "signals.py:42" *)
  reg [15:0] \$next\signals_width ;
  (* src = "integration_1.py:31" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "difference.py:71" *)
  wire difference_end_in;
  (* src = "difference.py:72" *)
  wire difference_end_out;
  (* src = "difference.py:55" *)
  wire [11:0] difference_pixel_in;
  (* src = "difference.py:55" *)
  wire [11:0] \difference_pixel_in$5 ;
  (* src = "difference.py:58" *)
  wire [11:0] difference_predic_in;
  (* src = "difference.py:58" *)
  wire [11:0] \difference_predic_in$6 ;
  (* src = "difference.py:61" *)
  wire [12:0] difference_val_out;
  (* src = "difference.py:61" *)
  wire [12:0] \difference_val_out$7 ;
  (* src = "difference.py:64" *)
  wire [12:0] \difference_val_out$8 ;
  (* src = "difference.py:64" *)
  wire [12:0] \difference_val_out$9 ;
  (* src = "difference.py:67" *)
  wire difference_valid_in;
  (* src = "difference.py:68" *)
  wire difference_valid_out;
  (* src = "integration_1.py:26" *)
  output [55:0] enc_out;
  (* src = "integration_1.py:27" *)
  output [5:0] enc_out_ctr;
  (* src = "encode.py:184" *)
  wire [4:0] encode_enc_ctr;
  (* src = "encode.py:184" *)
  wire [4:0] \encode_enc_ctr$17 ;
  (* src = "encode.py:182" *)
  wire [27:0] encode_enc_out;
  (* src = "encode.py:182" *)
  wire [27:0] \encode_enc_out$16 ;
  (* src = "encode.py:191" *)
  wire encode_end_in;
  (* src = "encode.py:192" *)
  wire encode_end_out;
  (* src = "encode.py:179" *)
  wire [4:0] encode_ssss;
  (* src = "encode.py:179" *)
  wire [4:0] \encode_ssss$15 ;
  (* src = "encode.py:177" *)
  wire [11:0] encode_val_in;
  (* src = "encode.py:177" *)
  wire [11:0] \encode_val_in$14 ;
  (* src = "encode.py:187" *)
  wire encode_valid_in;
  (* src = "encode.py:188" *)
  wire encode_valid_out;
  (* src = "signals.py:45" *)
  output end_of_frame;
  (* src = "integration_1.py:34" *)
  output end_out;
  (* src = "integration_1.py:35" *)
  output fend_out;
  (* src = "force_end.py:39" *)
  wire [23:0] force_end_allowed_cycles;
  (* src = "force_end.py:41" *)
  wire force_end_fend;
  (* src = "force_end.py:38" *)
  wire force_end_valid_in;
  (* src = "clk_domains.py:4" *)
  input full_clk;
  (* src = "clk_domains.py:4" *)
  input full_rst;
  (* src = "merge.py:109" *)
  wire [27:0] merge_enc_in;
  (* src = "merge.py:109" *)
  wire [27:0] \merge_enc_in$18 ;
  (* src = "merge.py:110" *)
  wire [4:0] merge_enc_in_ctr;
  (* src = "merge.py:110" *)
  wire [4:0] \merge_enc_in_ctr$19 ;
  (* src = "merge.py:112" *)
  wire [55:0] merge_enc_out;
  (* src = "merge.py:113" *)
  wire [5:0] merge_enc_out_ctr;
  (* src = "merge.py:120" *)
  wire merge_end_in;
  (* src = "merge.py:121" *)
  wire merge_end_out;
  (* src = "merge.py:116" *)
  wire merge_valid_in;
  (* src = "merge.py:117" *)
  wire merge_valid_out;
  (* src = "normalize.py:207" *)
  wire normalize_end_in;
  (* src = "normalize.py:208" *)
  wire normalize_end_out;
  (* src = "normalize.py:201" *)
  wire [4:0] normalize_ssss;
  (* src = "normalize.py:201" *)
  wire [4:0] \normalize_ssss$12 ;
  (* src = "normalize.py:194" *)
  wire [12:0] normalize_val_in;
  (* src = "normalize.py:194" *)
  wire [12:0] \normalize_val_in$10 ;
  (* src = "normalize.py:199" *)
  wire [11:0] normalize_val_out;
  (* src = "normalize.py:199" *)
  wire [11:0] \normalize_val_out$13 ;
  (* src = "normalize.py:203" *)
  wire normalize_valid_in;
  (* src = "normalize.py:204" *)
  wire normalize_valid_out;
  (* src = "normalize.py:196" *)
  wire [12:0] normalize_vals_in_mns;
  (* src = "normalize.py:196" *)
  wire [12:0] \normalize_vals_in_mns$11 ;
  (* src = "integration_1.py:23" *)
  input [11:0] pixel_in;
  (* src = "integration_1.py:23" *)
  input [11:0] \pixel_in$1 ;
  (* src = "predictor_p1_c4_pix1_2.py:80" *)
  wire predictor_end_in;
  (* src = "predictor_p1_c4_pix1_2.py:81" *)
  wire predictor_end_out;
  (* src = "predictor_p1_c4_pix1_2.py:73" *)
  wire predictor_new_row;
  (* src = "predictor_p1_c4_pix1_2.py:64" *)
  wire [11:0] predictor_pixel_in;
  (* src = "predictor_p1_c4_pix1_2.py:64" *)
  wire [11:0] \predictor_pixel_in$2 ;
  (* src = "predictor_p1_c4_pix1_2.py:67" *)
  wire [11:0] predictor_pixel_out;
  (* src = "predictor_p1_c4_pix1_2.py:67" *)
  wire [11:0] \predictor_pixel_out$3 ;
  (* src = "predictor_p1_c4_pix1_2.py:70" *)
  wire [11:0] predictor_predic_out;
  (* src = "predictor_p1_c4_pix1_2.py:70" *)
  wire [11:0] \predictor_predic_out$4 ;
  (* src = "predictor_p1_c4_pix1_2.py:76" *)
  wire predictor_valid_in;
  (* src = "predictor_p1_c4_pix1_2.py:77" *)
  wire predictor_valid_out;
  (* src = "register_file.py:38" *)
  wire [23:0] register_file_allowed_cycles;
  (* src = "register_file.py:36" *)
  wire [15:0] register_file_height;
  (* src = "register_file.py:37" *)
  wire [15:0] register_file_width;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "signals.py:41" *)
  wire [15:0] signals_height;
  (* src = "signals.py:43" *)
  wire signals_new_input;
  (* src = "signals.py:46" *)
  wire signals_new_row;
  (* src = "signals.py:42" *)
  wire [15:0] signals_width;
  (* src = "integration_1.py:30" *)
  input valid_in;
  (* src = "integration_1.py:31" *)
  output valid_out;
  difference difference (
    .clk(clk),
    .end_in(difference_end_in),
    .end_out(difference_end_out),
    .pixel_in(difference_pixel_in),
    .\pixel_in$1 (\difference_pixel_in$5 ),
    .predic_in(difference_predic_in),
    .\predic_in$2 (\difference_predic_in$6 ),
    .rst(rst),
    .val_out(difference_val_out),
    .\val_out$3 (\difference_val_out$7 ),
    .\val_out$4 (\difference_val_out$8 ),
    .\val_out$5 (\difference_val_out$9 ),
    .valid_in(difference_valid_in),
    .valid_out(difference_valid_out)
  );
  encode encode (
    .clk(clk),
    .enc_ctr(encode_enc_ctr),
    .\enc_ctr$4 (\encode_enc_ctr$17 ),
    .enc_out(encode_enc_out),
    .\enc_out$3 (\encode_enc_out$16 ),
    .end_in(encode_end_in),
    .end_out(encode_end_out),
    .rst(rst),
    .ssss(encode_ssss),
    .\ssss$2 (\encode_ssss$15 ),
    .val_in(encode_val_in),
    .\val_in$1 (\encode_val_in$14 ),
    .valid_in(encode_valid_in),
    .valid_out(encode_valid_out)
  );
  force_end force_end (
    .allowed_cycles(force_end_allowed_cycles),
    .clk(clk),
    .fend(force_end_fend),
    .rst(rst),
    .valid_in(force_end_valid_in)
  );
  merge merge (
    .clk(clk),
    .enc_in(merge_enc_in),
    .\enc_in$1 (\merge_enc_in$18 ),
    .enc_in_ctr(merge_enc_in_ctr),
    .\enc_in_ctr$2 (\merge_enc_in_ctr$19 ),
    .enc_out(merge_enc_out),
    .enc_out_ctr(merge_enc_out_ctr),
    .end_in(merge_end_in),
    .end_out(merge_end_out),
    .rst(rst),
    .valid_in(merge_valid_in),
    .valid_out(merge_valid_out)
  );
  normalize normalize (
    .clk(clk),
    .end_in(normalize_end_in),
    .end_out(normalize_end_out),
    .rst(rst),
    .ssss(normalize_ssss),
    .\ssss$3 (\normalize_ssss$12 ),
    .val_in(normalize_val_in),
    .\val_in$1 (\normalize_val_in$10 ),
    .val_out(normalize_val_out),
    .\val_out$4 (\normalize_val_out$13 ),
    .valid_in(normalize_valid_in),
    .valid_out(normalize_valid_out),
    .vals_in_mns(normalize_vals_in_mns),
    .\vals_in_mns$2 (\normalize_vals_in_mns$11 )
  );
  predictor predictor (
    .clk(clk),
    .end_in(predictor_end_in),
    .end_out(predictor_end_out),
    .new_row(predictor_new_row),
    .pixel_in(predictor_pixel_in),
    .\pixel_in$1 (\predictor_pixel_in$2 ),
    .pixel_out(predictor_pixel_out),
    .\pixel_out$2 (\predictor_pixel_out$3 ),
    .predic_out(predictor_predic_out),
    .\predic_out$3 (\predictor_predic_out$4 ),
    .rst(rst),
    .valid_in(predictor_valid_in),
    .valid_out(predictor_valid_out)
  );
  register_file register_file (
    .allowed_cycles(register_file_allowed_cycles),
    .full_clk(full_clk),
    .full_rst(full_rst),
    .height(register_file_height),
    .width(register_file_width)
  );
  signals signals (
    .clk(clk),
    .end_of_frame(end_of_frame),
    .height(signals_height),
    .new_input(signals_new_input),
    .new_row(signals_new_row),
    .rst(rst),
    .width(signals_width)
  );
  always @* begin
    \$next\signals_height  = 16'h0000;
    \$next\signals_height  = register_file_height;
  end
  always @* begin
    \$next\signals_width  = 16'h0000;
    \$next\signals_width  = register_file_width;
  end
  always @* begin
    \$next\predictor_valid_in  = 1'h0;
    \$next\predictor_valid_in  = valid_in;
  end
  always @* begin
    \$next\difference_pixel_in  = 12'h000;
    \$next\difference_pixel_in  = predictor_pixel_out;
  end
  always @* begin
    \$next\difference_pixel_in$5  = 12'h000;
    \$next\difference_pixel_in$5  = \predictor_pixel_out$3 ;
  end
  always @* begin
    \$next\difference_predic_in  = 12'h000;
    \$next\difference_predic_in  = predictor_predic_out;
  end
  always @* begin
    \$next\difference_predic_in$6  = 12'h000;
    \$next\difference_predic_in$6  = \predictor_predic_out$4 ;
  end
  always @* begin
    \$next\difference_valid_in  = 1'h0;
    \$next\difference_valid_in  = predictor_valid_out;
  end
  always @* begin
    \$next\difference_end_in  = 1'h0;
    \$next\difference_end_in  = predictor_end_out;
  end
  always @* begin
    \$next\normalize_val_in  = 13'h0000;
    \$next\normalize_val_in  = difference_val_out;
  end
  always @* begin
    \$next\normalize_val_in$10  = 13'h0000;
    \$next\normalize_val_in$10  = \difference_val_out$7 ;
  end
  always @* begin
    \$next\normalize_vals_in_mns  = 13'h0000;
    \$next\normalize_vals_in_mns  = \difference_val_out$8 ;
  end
  always @* begin
    \$next\force_end_allowed_cycles  = 24'h000000;
    \$next\force_end_allowed_cycles  = register_file_allowed_cycles;
  end
  always @* begin
    \$next\normalize_vals_in_mns$11  = 13'h0000;
    \$next\normalize_vals_in_mns$11  = \difference_val_out$9 ;
  end
  always @* begin
    \$next\normalize_valid_in  = 1'h0;
    \$next\normalize_valid_in  = difference_valid_out;
  end
  always @* begin
    \$next\normalize_end_in  = 1'h0;
    \$next\normalize_end_in  = difference_end_out;
  end
  always @* begin
    \$next\encode_val_in  = 12'h000;
    \$next\encode_val_in  = normalize_val_out;
  end
  always @* begin
    \$next\encode_val_in$14  = 12'h000;
    \$next\encode_val_in$14  = \normalize_val_out$13 ;
  end
  always @* begin
    \$next\encode_ssss  = 5'h00;
    \$next\encode_ssss  = normalize_ssss;
  end
  always @* begin
    \$next\encode_ssss$15  = 5'h00;
    \$next\encode_ssss$15  = \normalize_ssss$12 ;
  end
  always @* begin
    \$next\encode_valid_in  = 1'h0;
    \$next\encode_valid_in  = normalize_valid_out;
  end
  always @* begin
    \$next\encode_end_in  = 1'h0;
    \$next\encode_end_in  = normalize_end_out;
  end
  always @* begin
    \$next\merge_enc_in  = 28'h0000000;
    \$next\merge_enc_in  = encode_enc_out;
  end
  always @* begin
    \$next\force_end_valid_in  = 1'h0;
    \$next\force_end_valid_in  = valid_in;
  end
  always @* begin
    \$next\merge_enc_in$18  = 28'h0000000;
    \$next\merge_enc_in$18  = \encode_enc_out$16 ;
  end
  always @* begin
    \$next\merge_enc_in_ctr  = 5'h00;
    \$next\merge_enc_in_ctr  = encode_enc_ctr;
  end
  always @* begin
    \$next\merge_enc_in_ctr$19  = 5'h00;
    \$next\merge_enc_in_ctr$19  = \encode_enc_ctr$17 ;
  end
  always @* begin
    \$next\merge_valid_in  = 1'h0;
    \$next\merge_valid_in  = encode_valid_out;
  end
  always @* begin
    \$next\merge_end_in  = 1'h0;
    \$next\merge_end_in  = encode_end_out;
  end
  always @* begin
    \$next\enc_out  = 56'h00000000000000;
    \$next\enc_out  = merge_enc_out;
  end
  always @* begin
    \$next\enc_out_ctr  = 6'h00;
    \$next\enc_out_ctr  = merge_enc_out_ctr;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = merge_valid_out;
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = merge_end_out;
  end
  always @* begin
    \$next\fend_out  = 1'h0;
    \$next\fend_out  = force_end_fend;
  end
  always @* begin
    \$next\signals_new_input  = 1'h0;
    \$next\signals_new_input  = valid_in;
  end
  always @* begin
    \$next\predictor_pixel_in  = 12'h000;
    \$next\predictor_pixel_in  = pixel_in;
  end
  always @* begin
    \$next\predictor_pixel_in$2  = 12'h000;
    \$next\predictor_pixel_in$2  = \pixel_in$1 ;
  end
  always @* begin
    \$next\predictor_new_row  = 1'h0;
    \$next\predictor_new_row  = signals_new_row;
  end
  always @* begin
    \$next\predictor_end_in  = 1'h0;
    \$next\predictor_end_in  = end_of_frame;
  end
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign enc_out_ctr = \$next\enc_out_ctr ;
  assign enc_out = \$next\enc_out ;
  assign merge_end_in = \$next\merge_end_in ;
  assign merge_valid_in = \$next\merge_valid_in ;
  assign \merge_enc_in_ctr$19  = \$next\merge_enc_in_ctr$19 ;
  assign merge_enc_in_ctr = \$next\merge_enc_in_ctr ;
  assign \merge_enc_in$18  = \$next\merge_enc_in$18 ;
  assign merge_enc_in = \$next\merge_enc_in ;
  assign encode_end_in = \$next\encode_end_in ;
  assign encode_valid_in = \$next\encode_valid_in ;
  assign \encode_ssss$15  = \$next\encode_ssss$15 ;
  assign encode_ssss = \$next\encode_ssss ;
  assign \encode_val_in$14  = \$next\encode_val_in$14 ;
  assign encode_val_in = \$next\encode_val_in ;
  assign normalize_end_in = \$next\normalize_end_in ;
  assign normalize_valid_in = \$next\normalize_valid_in ;
  assign \normalize_vals_in_mns$11  = \$next\normalize_vals_in_mns$11 ;
  assign normalize_vals_in_mns = \$next\normalize_vals_in_mns ;
  assign \normalize_val_in$10  = \$next\normalize_val_in$10 ;
  assign normalize_val_in = \$next\normalize_val_in ;
  assign difference_end_in = \$next\difference_end_in ;
  assign difference_valid_in = \$next\difference_valid_in ;
  assign \difference_predic_in$6  = \$next\difference_predic_in$6 ;
  assign difference_predic_in = \$next\difference_predic_in ;
  assign \difference_pixel_in$5  = \$next\difference_pixel_in$5 ;
  assign difference_pixel_in = \$next\difference_pixel_in ;
  assign predictor_valid_in = \$next\predictor_valid_in ;
  assign predictor_end_in = \$next\predictor_end_in ;
  assign predictor_new_row = \$next\predictor_new_row ;
  assign \predictor_pixel_in$2  = \$next\predictor_pixel_in$2 ;
  assign predictor_pixel_in = \$next\predictor_pixel_in ;
  assign signals_new_input = \$next\signals_new_input ;
  assign fend_out = \$next\fend_out ;
  assign force_end_valid_in = \$next\force_end_valid_in ;
  assign force_end_allowed_cycles = \$next\force_end_allowed_cycles ;
  assign signals_width = \$next\signals_width ;
  assign signals_height = \$next\signals_height ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2" *)
(* generator = "nMigen" *)
module integration_2(pixel_in, \pixel_in$1 , latch_output, rst, clk, full_rst, full_clk, nready, enc_out, enc_out_ctr, valid_out, out_end, fend_out, valid_in);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire [3:0] \$29 ;
  wire \$3 ;
  wire [3:0] \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$5 ;
  wire [55:0] \$50 ;
  wire [5:0] \$52 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "converter.py:70" *)
  reg \$next\converter_close_full ;
  (* src = "converter.py:60" *)
  reg [55:0] \$next\converter_enc_out ;
  (* src = "converter.py:61" *)
  reg [5:0] \$next\converter_enc_out_ctr ;
  (* src = "converter_fifo.py:56" *)
  reg [29:0] \$next\converter_fifo_enc_in ;
  (* src = "converter_fifo.py:57" *)
  reg [4:0] \$next\converter_fifo_enc_in_ctr ;
  (* src = "converter_fifo.py:58" *)
  reg \$next\converter_fifo_in_end ;
  (* src = "converter_fifo.py:64" *)
  reg \$next\converter_fifo_latch_output ;
  (* src = "converter_fifo.py:59" *)
  reg \$next\converter_fifo_valid_in ;
  (* src = "converter.py:62" *)
  reg \$next\converter_out_end ;
  (* src = "converter.py:63" *)
  reg \$next\converter_valid_out ;
  (* src = "integration_2.py:24" *)
  reg [55:0] \$next\enc_out ;
  (* src = "integration_2.py:25" *)
  reg [5:0] \$next\enc_out_ctr ;
  (* src = "integration_1.py:23" *)
  reg [11:0] \$next\integration_1_pixel_in ;
  (* src = "integration_1.py:23" *)
  reg [11:0] \$next\integration_1_pixel_in$2 ;
  (* src = "integration_1.py:30" *)
  reg \$next\integration_1_valid_in ;
  (* src = "lj92_pipeline_fifo.py:54" *)
  reg [55:0] \$next\lj92_pipeline_fifo_enc_in ;
  (* src = "lj92_pipeline_fifo.py:55" *)
  reg [5:0] \$next\lj92_pipeline_fifo_enc_in_ctr ;
  (* src = "lj92_pipeline_fifo.py:56" *)
  reg \$next\lj92_pipeline_fifo_in_end ;
  (* src = "lj92_pipeline_fifo.py:59" *)
  reg \$next\lj92_pipeline_fifo_latch_output ;
  (* src = "lj92_pipeline_fifo.py:57" *)
  reg \$next\lj92_pipeline_fifo_valid_in ;
  (* src = "integration_2.py:29" *)
  reg \$next\nready ;
  (* src = "integration_2.py:59" *)
  reg \$next\nready_end ;
  (* src = "integration_2.py:56" *)
  reg \$next\nready_end_reg ;
  (* src = "integration_2.py:57" *)
  reg \$next\nready_end_wire ;
  (* src = "integration_2.py:66" *)
  reg \$next\nready_reset ;
  (* src = "integration_2.py:67" *)
  reg [2:0] \$next\nready_reset_counter ;
  (* src = "integration_2.py:73" *)
  reg \$next\nready_signal ;
  (* src = "integration_2.py:32" *)
  reg \$next\out_end ;
  (* src = "integration_2.py:31" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "converter.py:70" *)
  wire converter_close_full;
  (* src = "converter.py:66" *)
  wire [29:0] converter_enc_in;
  (* src = "converter.py:67" *)
  wire [4:0] converter_enc_in_ctr;
  (* src = "converter.py:60" *)
  wire [55:0] converter_enc_out;
  (* src = "converter.py:61" *)
  wire [5:0] converter_enc_out_ctr;
  (* src = "converter_fifo.py:61" *)
  wire converter_fifo_close_full;
  (* src = "converter_fifo.py:56" *)
  wire [29:0] converter_fifo_enc_in;
  (* src = "converter_fifo.py:57" *)
  wire [4:0] converter_fifo_enc_in_ctr;
  (* src = "converter_fifo.py:65" *)
  wire [29:0] converter_fifo_enc_out;
  (* src = "converter_fifo.py:66" *)
  wire [4:0] converter_fifo_enc_out_ctr;
  (* src = "converter_fifo.py:58" *)
  wire converter_fifo_in_end;
  (* src = "converter_fifo.py:64" *)
  wire converter_fifo_latch_output;
  (* src = "converter_fifo.py:67" *)
  wire converter_fifo_out_end;
  (* src = "converter_fifo.py:59" *)
  wire converter_fifo_valid_in;
  (* src = "converter_fifo.py:68" *)
  wire converter_fifo_valid_out;
  (* src = "converter.py:68" *)
  wire converter_in_end;
  (* src = "converter.py:59" *)
  wire converter_latch_output;
  (* src = "converter.py:62" *)
  wire converter_out_end;
  (* src = "converter.py:69" *)
  wire converter_valid_in;
  (* src = "converter.py:63" *)
  wire converter_valid_out;
  (* src = "integration_2.py:24" *)
  output [55:0] enc_out;
  (* src = "integration_2.py:25" *)
  output [5:0] enc_out_ctr;
  (* src = "integration_1.py:35" *)
  output fend_out;
  (* src = "clk_domains.py:4" *)
  input full_clk;
  (* src = "clk_domains.py:4" *)
  input full_rst;
  (* src = "integration_1.py:26" *)
  wire [55:0] integration_1_enc_out;
  (* src = "integration_1.py:27" *)
  wire [5:0] integration_1_enc_out_ctr;
  (* src = "signals.py:45" *)
  wire integration_1_end_of_frame;
  (* src = "integration_1.py:34" *)
  wire integration_1_end_out;
  (* src = "integration_1.py:23" *)
  wire [11:0] integration_1_pixel_in;
  (* src = "integration_1.py:23" *)
  wire [11:0] \integration_1_pixel_in$2 ;
  (* src = "integration_1.py:30" *)
  wire integration_1_valid_in;
  (* src = "integration_1.py:31" *)
  wire integration_1_valid_out;
  (* src = "integration_2.py:26" *)
  input latch_output;
  (* src = "lj92_pipeline_fifo.py:67" *)
  wire lj92_pipeline_fifo_close_full;
  (* src = "lj92_pipeline_fifo.py:54" *)
  wire [55:0] lj92_pipeline_fifo_enc_in;
  (* src = "lj92_pipeline_fifo.py:55" *)
  wire [5:0] lj92_pipeline_fifo_enc_in_ctr;
  (* src = "lj92_pipeline_fifo.py:60" *)
  wire [55:0] lj92_pipeline_fifo_enc_out;
  (* src = "lj92_pipeline_fifo.py:61" *)
  wire [5:0] lj92_pipeline_fifo_enc_out_ctr;
  (* src = "lj92_pipeline_fifo.py:56" *)
  wire lj92_pipeline_fifo_in_end;
  (* src = "lj92_pipeline_fifo.py:59" *)
  wire lj92_pipeline_fifo_latch_output;
  (* src = "lj92_pipeline_fifo.py:62" *)
  wire lj92_pipeline_fifo_out_end;
  (* src = "lj92_pipeline_fifo.py:57" *)
  wire lj92_pipeline_fifo_valid_in;
  (* src = "lj92_pipeline_fifo.py:63" *)
  wire lj92_pipeline_fifo_valid_out;
  (* src = "integration_2.py:29" *)
  output nready;
  (* init = 1'h0 *)
  (* src = "integration_2.py:59" *)
  reg nready_end = 1'h0;
  (* init = 1'h0 *)
  (* src = "integration_2.py:56" *)
  reg nready_end_reg = 1'h0;
  (* src = "integration_2.py:57" *)
  wire nready_end_wire;
  (* init = 1'h0 *)
  (* src = "integration_2.py:66" *)
  reg nready_reset = 1'h0;
  (* init = 3'h0 *)
  (* src = "integration_2.py:67" *)
  reg [2:0] nready_reset_counter = 3'h0;
  (* src = "integration_2.py:73" *)
  wire nready_signal;
  (* src = "integration_2.py:32" *)
  output out_end;
  (* src = "integration_2.py:22" *)
  input [11:0] pixel_in;
  (* src = "integration_2.py:22" *)
  input [11:0] \pixel_in$1 ;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "integration_2.py:30" *)
  input valid_in;
  (* src = "integration_2.py:31" *)
  output valid_out;
  assign \$9  = nready == (* src = "integration_2.py:61" *) 1'h0;
  assign \$11  = \$7  & (* src = "integration_2.py:61" *) \$9 ;
  assign \$13  = nready_end_wire == (* src = "integration_2.py:60" *) 1'h1;
  assign \$15  = nready_end_reg == (* src = "integration_2.py:60" *) 1'h1;
  assign \$17  = \$13  | (* src = "integration_2.py:60" *) \$15 ;
  assign \$19  = integration_1_end_of_frame == (* src = "integration_2.py:61" *) 1'h1;
  assign \$21  = valid_in == (* src = "integration_2.py:61" *) 1'h1;
  assign \$23  = \$19  & (* src = "integration_2.py:61" *) \$21 ;
  assign \$25  = nready == (* src = "integration_2.py:61" *) 1'h0;
  assign \$27  = \$23  & (* src = "integration_2.py:61" *) \$25 ;
  assign \$30  = nready_reset_counter + (* src = "integration_2.py:68" *) 1'h1;
  assign \$32  = nready_reset_counter == (* src = "integration_2.py:69" *) 3'h7;
  assign \$34  = lj92_pipeline_fifo_close_full == (* src = "integration_2.py:74" *) 1'h1;
  assign \$36  = nready_end == (* src = "integration_2.py:74" *) 1'h1;
  assign \$38  = \$34  | (* src = "integration_2.py:74" *) \$36 ;
  assign \$3  = integration_1_end_of_frame == (* src = "integration_2.py:61" *) 1'h1;
  assign \$40  = nready_reset == (* src = "integration_2.py:74" *) 1'h0;
  assign \$42  = \$38  | (* src = "integration_2.py:74" *) \$40 ;
  assign \$44  = valid_in == (* src = "integration_2.py:79" *) 1'h1;
  assign \$46  = nready_signal == (* src = "integration_2.py:79" *) 1'h0;
  assign \$48  = \$44  & (* src = "integration_2.py:79" *) \$46 ;
  assign \$50  = + (* src = "converter_fifo.py:65" *) converter_fifo_enc_out;
  assign \$52  = + (* src = "converter_fifo.py:66" *) converter_fifo_enc_out_ctr;
  assign \$5  = valid_in == (* src = "integration_2.py:61" *) 1'h1;
  assign \$7  = \$3  & (* src = "integration_2.py:61" *) \$5 ;
  always @(posedge clk)
      nready_reset <= \$next\nready_reset ;
  always @(posedge clk)
      nready_reset_counter <= \$next\nready_reset_counter ;
  always @(posedge clk)
      nready_end_reg <= \$next\nready_end_reg ;
  always @(posedge clk)
      nready_end <= \$next\nready_end ;
  converter converter (
    .clk(clk),
    .close_full(converter_close_full),
    .enc_in(converter_enc_in),
    .enc_in_ctr(converter_enc_in_ctr),
    .enc_out(converter_enc_out),
    .enc_out_ctr(converter_enc_out_ctr),
    .in_end(converter_in_end),
    .latch_output(converter_latch_output),
    .out_end(converter_out_end),
    .rst(rst),
    .valid_in(converter_valid_in),
    .valid_out(converter_valid_out)
  );
  converter_fifo converter_fifo (
    .clk(clk),
    .close_full(converter_fifo_close_full),
    .enc_in(converter_fifo_enc_in),
    .enc_in_ctr(converter_fifo_enc_in_ctr),
    .enc_out(converter_fifo_enc_out),
    .enc_out_ctr(converter_fifo_enc_out_ctr),
    .in_end(converter_fifo_in_end),
    .latch_output(converter_fifo_latch_output),
    .out_end(converter_fifo_out_end),
    .rst(rst),
    .valid_in(converter_fifo_valid_in),
    .valid_out(converter_fifo_valid_out)
  );
  integration_1 integration_1 (
    .clk(clk),
    .enc_out(integration_1_enc_out),
    .enc_out_ctr(integration_1_enc_out_ctr),
    .end_of_frame(integration_1_end_of_frame),
    .end_out(integration_1_end_out),
    .fend_out(fend_out),
    .full_clk(full_clk),
    .full_rst(full_rst),
    .pixel_in(integration_1_pixel_in),
    .\pixel_in$1 (\integration_1_pixel_in$2 ),
    .rst(rst),
    .valid_in(integration_1_valid_in),
    .valid_out(integration_1_valid_out)
  );
  lj92_pipeline_fifo lj92_pipeline_fifo (
    .clk(clk),
    .close_full(lj92_pipeline_fifo_close_full),
    .enc_in(lj92_pipeline_fifo_enc_in),
    .enc_in_ctr(lj92_pipeline_fifo_enc_in_ctr),
    .enc_out(lj92_pipeline_fifo_enc_out),
    .enc_out_ctr(lj92_pipeline_fifo_enc_out_ctr),
    .in_end(lj92_pipeline_fifo_in_end),
    .latch_output(lj92_pipeline_fifo_latch_output),
    .out_end(lj92_pipeline_fifo_out_end),
    .rst(rst),
    .valid_in(lj92_pipeline_fifo_valid_in),
    .valid_out(lj92_pipeline_fifo_valid_out)
  );
  always @* begin
    \$next\nready_end_wire  = 1'h0;
    \$next\nready_end_wire  = 1'h0;
    casez (\$11 )
      1'h1:
          \$next\nready_end_wire  = 1'h1;
    endcase
  end
  always @* begin
    \$next\nready_end  = nready_end;
    \$next\nready_end  = \$17 ;
    casez (rst)
      1'h1:
          \$next\nready_end  = 1'h0;
    endcase
  end
  always @* begin
    \$next\lj92_pipeline_fifo_enc_in_ctr  = 6'h00;
    \$next\lj92_pipeline_fifo_enc_in_ctr  = integration_1_enc_out_ctr;
  end
  always @* begin
    \$next\lj92_pipeline_fifo_valid_in  = 1'h0;
    \$next\lj92_pipeline_fifo_valid_in  = integration_1_valid_out;
  end
  always @* begin
    \$next\lj92_pipeline_fifo_in_end  = 1'h0;
    \$next\lj92_pipeline_fifo_in_end  = integration_1_end_out;
  end
  always @* begin
    \$next\nready  = 1'h1;
    \$next\nready  = nready_signal;
  end
  always @* begin
    \$next\lj92_pipeline_fifo_latch_output  = 1'h0;
    \$next\lj92_pipeline_fifo_latch_output  = converter_latch_output;
  end
  always @* begin
    \$next\converter_enc_out  = 56'h00000000000000;
    \$next\converter_enc_out  = lj92_pipeline_fifo_enc_out;
  end
  always @* begin
    \$next\converter_enc_out_ctr  = 6'h00;
    \$next\converter_enc_out_ctr  = lj92_pipeline_fifo_enc_out_ctr;
  end
  always @* begin
    \$next\converter_out_end  = 1'h0;
    \$next\converter_out_end  = lj92_pipeline_fifo_out_end;
  end
  always @* begin
    \$next\converter_valid_out  = 1'h0;
    \$next\converter_valid_out  = lj92_pipeline_fifo_valid_out;
  end
  always @* begin
    \$next\converter_fifo_enc_in  = 30'h00000000;
    \$next\converter_fifo_enc_in  = converter_enc_in;
  end
  always @* begin
    \$next\nready_end_reg  = nready_end_reg;
    casez (\$27 )
      1'h1:
          \$next\nready_end_reg  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\nready_end_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\converter_fifo_enc_in_ctr  = 5'h00;
    \$next\converter_fifo_enc_in_ctr  = converter_enc_in_ctr;
  end
  always @* begin
    \$next\converter_fifo_in_end  = 1'h0;
    \$next\converter_fifo_in_end  = converter_in_end;
  end
  always @* begin
    \$next\converter_fifo_valid_in  = 1'h0;
    \$next\converter_fifo_valid_in  = converter_valid_in;
  end
  always @* begin
    \$next\converter_close_full  = 1'h0;
    \$next\converter_close_full  = converter_fifo_close_full;
  end
  always @* begin
    \$next\enc_out  = 56'h00000000000000;
    \$next\enc_out  = \$50 ;
  end
  always @* begin
    \$next\enc_out_ctr  = 6'h00;
    \$next\enc_out_ctr  = \$52 ;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = converter_fifo_valid_out;
  end
  always @* begin
    \$next\out_end  = 1'h0;
    \$next\out_end  = converter_fifo_out_end;
  end
  always @* begin
    \$next\converter_fifo_latch_output  = 1'h0;
    \$next\converter_fifo_latch_output  = latch_output;
  end
  always @* begin
    \$next\nready_reset_counter  = nready_reset_counter;
    \$next\nready_reset_counter  = \$29 [2:0];
    casez (rst)
      1'h1:
          \$next\nready_reset_counter  = 3'h0;
    endcase
  end
  always @* begin
    \$next\nready_reset  = nready_reset;
    casez (\$32 )
      1'h1:
          \$next\nready_reset  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\nready_reset  = 1'h0;
    endcase
  end
  always @* begin
    \$next\nready_signal  = 1'h0;
    \$next\nready_signal  = \$42 ;
  end
  always @* begin
    \$next\integration_1_pixel_in  = 12'h000;
    \$next\integration_1_pixel_in  = pixel_in;
  end
  always @* begin
    \$next\integration_1_pixel_in$2  = 12'h000;
    \$next\integration_1_pixel_in$2  = \pixel_in$1 ;
  end
  always @* begin
    \$next\integration_1_valid_in  = 1'h0;
    \$next\integration_1_valid_in  = \$48 ;
  end
  always @* begin
    \$next\lj92_pipeline_fifo_enc_in  = 56'h00000000000000;
    \$next\lj92_pipeline_fifo_enc_in  = integration_1_enc_out;
  end
  assign \$29  = \$30 ;
  assign converter_fifo_latch_output = \$next\converter_fifo_latch_output ;
  assign out_end = \$next\out_end ;
  assign valid_out = \$next\valid_out ;
  assign enc_out_ctr = \$next\enc_out_ctr ;
  assign enc_out = \$next\enc_out ;
  assign converter_close_full = \$next\converter_close_full ;
  assign converter_fifo_valid_in = \$next\converter_fifo_valid_in ;
  assign converter_fifo_in_end = \$next\converter_fifo_in_end ;
  assign converter_fifo_enc_in_ctr = \$next\converter_fifo_enc_in_ctr ;
  assign converter_fifo_enc_in = \$next\converter_fifo_enc_in ;
  assign converter_valid_out = \$next\converter_valid_out ;
  assign converter_out_end = \$next\converter_out_end ;
  assign converter_enc_out_ctr = \$next\converter_enc_out_ctr ;
  assign converter_enc_out = \$next\converter_enc_out ;
  assign lj92_pipeline_fifo_latch_output = \$next\lj92_pipeline_fifo_latch_output ;
  assign nready = \$next\nready ;
  assign lj92_pipeline_fifo_in_end = \$next\lj92_pipeline_fifo_in_end ;
  assign lj92_pipeline_fifo_valid_in = \$next\lj92_pipeline_fifo_valid_in ;
  assign lj92_pipeline_fifo_enc_in_ctr = \$next\lj92_pipeline_fifo_enc_in_ctr ;
  assign lj92_pipeline_fifo_enc_in = \$next\lj92_pipeline_fifo_enc_in ;
  assign integration_1_valid_in = \$next\integration_1_valid_in ;
  assign \integration_1_pixel_in$2  = \$next\integration_1_pixel_in$2 ;
  assign integration_1_pixel_in = \$next\integration_1_pixel_in ;
  assign nready_signal = \$next\nready_signal ;
  assign nready_end_wire = \$next\nready_end_wire ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3" *)
(* generator = "nMigen" *)
module integration_3(\pixel_in$1 , valid_in, busy_in, rst, clk, full_rst, full_clk, data_out, valid_out, end_out, nready, fend_out, pixel_in);
  (* src = "integration_3.py:25" *)
  reg [15:0] \$next\data_out ;
  (* src = "integration_3.py:30" *)
  reg \$next\end_out ;
  (* src = "integration_2.py:26" *)
  reg \$next\integration_2_latch_output ;
  (* src = "integration_2.py:22" *)
  reg [11:0] \$next\integration_2_pixel_in ;
  (* src = "integration_2.py:22" *)
  reg [11:0] \$next\integration_2_pixel_in$2 ;
  (* src = "integration_2.py:30" *)
  reg \$next\integration_2_valid_in ;
  (* src = "integration_3.py:31" *)
  reg \$next\nready ;
  (* src = "integration_3.py:29" *)
  reg \$next\valid_out ;
  (* src = "vbits_to_cbits.py:335" *)
  reg \$next\vbits_to_cbits_busy_in ;
  (* src = "vbits_to_cbits.py:327" *)
  reg [29:0] \$next\vbits_to_cbits_enc_in ;
  (* src = "vbits_to_cbits.py:328" *)
  reg [4:0] \$next\vbits_to_cbits_enc_in_ctr ;
  (* src = "vbits_to_cbits.py:329" *)
  reg \$next\vbits_to_cbits_in_end ;
  (* src = "vbits_to_cbits.py:330" *)
  reg \$next\vbits_to_cbits_valid_in ;
  (* src = "integration_3.py:32" *)
  input busy_in;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "integration_3.py:25" *)
  output [15:0] data_out;
  (* src = "integration_3.py:30" *)
  output end_out;
  (* src = "integration_1.py:35" *)
  output fend_out;
  (* src = "clk_domains.py:4" *)
  input full_clk;
  (* src = "clk_domains.py:4" *)
  input full_rst;
  (* src = "integration_2.py:24" *)
  wire [55:0] integration_2_enc_out;
  (* src = "integration_2.py:25" *)
  wire [5:0] integration_2_enc_out_ctr;
  (* src = "integration_2.py:26" *)
  wire integration_2_latch_output;
  (* src = "integration_2.py:29" *)
  wire integration_2_nready;
  (* src = "integration_2.py:32" *)
  wire integration_2_out_end;
  (* src = "integration_2.py:22" *)
  wire [11:0] integration_2_pixel_in;
  (* src = "integration_2.py:22" *)
  wire [11:0] \integration_2_pixel_in$2 ;
  (* src = "integration_2.py:30" *)
  wire integration_2_valid_in;
  (* src = "integration_2.py:31" *)
  wire integration_2_valid_out;
  (* src = "integration_3.py:31" *)
  output nready;
  (* src = "integration_3.py:22" *)
  input [11:0] pixel_in;
  (* src = "integration_3.py:22" *)
  input [11:0] \pixel_in$1 ;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "integration_3.py:28" *)
  input valid_in;
  (* src = "integration_3.py:29" *)
  output valid_out;
  (* src = "vbits_to_cbits.py:335" *)
  wire vbits_to_cbits_busy_in;
  (* src = "vbits_to_cbits.py:332" *)
  wire [15:0] vbits_to_cbits_data_out;
  (* src = "vbits_to_cbits.py:327" *)
  wire [29:0] vbits_to_cbits_enc_in;
  (* src = "vbits_to_cbits.py:328" *)
  wire [4:0] vbits_to_cbits_enc_in_ctr;
  (* src = "vbits_to_cbits.py:334" *)
  wire vbits_to_cbits_end_out;
  (* src = "vbits_to_cbits.py:329" *)
  wire vbits_to_cbits_in_end;
  (* src = "vbits_to_cbits.py:326" *)
  wire vbits_to_cbits_latch_input;
  (* src = "vbits_to_cbits.py:330" *)
  wire vbits_to_cbits_valid_in;
  (* src = "vbits_to_cbits.py:333" *)
  wire vbits_to_cbits_valid_out;
  integration_2 integration_2 (
    .clk(clk),
    .enc_out(integration_2_enc_out),
    .enc_out_ctr(integration_2_enc_out_ctr),
    .fend_out(fend_out),
    .full_clk(full_clk),
    .full_rst(full_rst),
    .latch_output(integration_2_latch_output),
    .nready(integration_2_nready),
    .out_end(integration_2_out_end),
    .pixel_in(integration_2_pixel_in),
    .\pixel_in$1 (\integration_2_pixel_in$2 ),
    .rst(rst),
    .valid_in(integration_2_valid_in),
    .valid_out(integration_2_valid_out)
  );
  vbits_to_cbits vbits_to_cbits (
    .busy_in(vbits_to_cbits_busy_in),
    .clk(clk),
    .data_out(vbits_to_cbits_data_out),
    .enc_in(vbits_to_cbits_enc_in),
    .enc_in_ctr(vbits_to_cbits_enc_in_ctr),
    .end_out(vbits_to_cbits_end_out),
    .in_end(vbits_to_cbits_in_end),
    .latch_input(vbits_to_cbits_latch_input),
    .rst(rst),
    .valid_in(vbits_to_cbits_valid_in),
    .valid_out(vbits_to_cbits_valid_out)
  );
  always @* begin
    \$next\integration_2_pixel_in  = 12'h000;
    \$next\integration_2_pixel_in  = pixel_in;
  end
  always @* begin
    \$next\integration_2_pixel_in$2  = 12'h000;
    \$next\integration_2_pixel_in$2  = \pixel_in$1 ;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = vbits_to_cbits_valid_out;
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = vbits_to_cbits_end_out;
  end
  always @* begin
    \$next\nready  = 1'h0;
    \$next\nready  = integration_2_nready;
  end
  always @* begin
    \$next\integration_2_valid_in  = 1'h0;
    \$next\integration_2_valid_in  = valid_in;
  end
  always @* begin
    \$next\integration_2_latch_output  = 1'h0;
    \$next\integration_2_latch_output  = vbits_to_cbits_latch_input;
  end
  always @* begin
    \$next\vbits_to_cbits_enc_in  = 30'h00000000;
    \$next\vbits_to_cbits_enc_in  = integration_2_enc_out[29:0];
  end
  always @* begin
    \$next\vbits_to_cbits_enc_in_ctr  = 5'h00;
    \$next\vbits_to_cbits_enc_in_ctr  = integration_2_enc_out_ctr[4:0];
  end
  always @* begin
    \$next\vbits_to_cbits_in_end  = 1'h0;
    \$next\vbits_to_cbits_in_end  = integration_2_out_end;
  end
  always @* begin
    \$next\vbits_to_cbits_valid_in  = 1'h0;
    \$next\vbits_to_cbits_valid_in  = integration_2_valid_out;
  end
  always @* begin
    \$next\vbits_to_cbits_busy_in  = 1'h0;
    \$next\vbits_to_cbits_busy_in  = busy_in;
  end
  always @* begin
    \$next\data_out  = 16'h0000;
    \$next\data_out  = vbits_to_cbits_data_out;
  end
  assign nready = \$next\nready ;
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign data_out = \$next\data_out ;
  assign vbits_to_cbits_busy_in = \$next\vbits_to_cbits_busy_in ;
  assign vbits_to_cbits_valid_in = \$next\vbits_to_cbits_valid_in ;
  assign vbits_to_cbits_in_end = \$next\vbits_to_cbits_in_end ;
  assign vbits_to_cbits_enc_in_ctr = \$next\vbits_to_cbits_enc_in_ctr ;
  assign vbits_to_cbits_enc_in = \$next\vbits_to_cbits_enc_in ;
  assign integration_2_latch_output = \$next\integration_2_latch_output ;
  assign integration_2_valid_in = \$next\integration_2_valid_in ;
  assign \integration_2_pixel_in$2  = \$next\integration_2_pixel_in$2 ;
  assign integration_2_pixel_in = \$next\integration_2_pixel_in ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.lj92_pipeline_fifo" *)
(* generator = "nMigen" *)
module lj92_pipeline_fifo(enc_in, enc_in_ctr, in_end, latch_output, rst, clk, valid_out, enc_out, enc_out_ctr, out_end, close_full, valid_in);
  wire \$1 ;
  (* src = "lj92_pipeline_fifo.py:67" *)
  reg \$next\close_full ;
  (* src = "lj92_pipeline_fifo.py:60" *)
  reg [55:0] \$next\enc_out ;
  (* src = "lj92_pipeline_fifo.py:61" *)
  reg [5:0] \$next\enc_out_ctr ;
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [62:0] \$next\fifo_din ;
  (* src = "nmigen/lib/fifo.py:71" *)
  reg \$next\fifo_re ;
  (* src = "nmigen/lib/fifo.py:67" *)
  reg \$next\fifo_we ;
  (* src = "lj92_pipeline_fifo.py:62" *)
  reg \$next\out_end ;
  (* src = "lj92_pipeline_fifo.py:63" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 1'h0 *)
  (* src = "lj92_pipeline_fifo.py:67" *)
  output close_full;
  reg close_full = 1'h0;
  (* src = "lj92_pipeline_fifo.py:54" *)
  input [55:0] enc_in;
  (* src = "lj92_pipeline_fifo.py:55" *)
  input [5:0] enc_in_ctr;
  (* src = "lj92_pipeline_fifo.py:60" *)
  output [55:0] enc_out;
  (* src = "lj92_pipeline_fifo.py:61" *)
  output [5:0] enc_out_ctr;
  (* src = "nmigen/lib/fifo.py:65" *)
  wire [62:0] fifo_din;
  (* src = "nmigen/lib/fifo.py:69" *)
  wire [62:0] fifo_dout;
  (* src = "nmigen/lib/fifo.py:238" *)
  wire [9:0] fifo_level;
  (* src = "nmigen/lib/fifo.py:71" *)
  wire fifo_re;
  (* src = "nmigen/lib/fifo.py:70" *)
  wire fifo_readable;
  (* src = "nmigen/lib/fifo.py:67" *)
  wire fifo_we;
  (* src = "lj92_pipeline_fifo.py:56" *)
  input in_end;
  (* src = "lj92_pipeline_fifo.py:59" *)
  input latch_output;
  (* src = "lj92_pipeline_fifo.py:62" *)
  output out_end;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "lj92_pipeline_fifo.py:57" *)
  input valid_in;
  (* src = "lj92_pipeline_fifo.py:63" *)
  output valid_out;
  assign \$1  = fifo_level >= (* src = "lj92_pipeline_fifo.py:99" *) 9'h1f6;
  always @(posedge clk)
      close_full <= \$next\close_full ;
  fifo fifo (
    .clk(clk),
    .din(fifo_din),
    .dout(fifo_dout),
    .level(fifo_level),
    .re(fifo_re),
    .readable(fifo_readable),
    .rst(rst),
    .we(fifo_we)
  );
  always @* begin
    \$next\fifo_we  = 1'h0;
    \$next\fifo_we  = valid_in;
  end
  always @* begin
    \$next\fifo_din  = 63'h0000000000000000;
    \$next\fifo_din  = { in_end, enc_in_ctr, enc_in };
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = fifo_readable;
  end
  always @* begin
    \$next\enc_out  = 56'h00000000000000;
    \$next\enc_out  = fifo_dout[55:0];
  end
  always @* begin
    \$next\enc_out_ctr  = 6'h00;
    \$next\enc_out_ctr  = fifo_dout[61:56];
  end
  always @* begin
    \$next\out_end  = 1'h0;
    \$next\out_end  = fifo_dout[62];
  end
  always @* begin
    \$next\fifo_re  = 1'h0;
    \$next\fifo_re  = latch_output;
  end
  always @* begin
    \$next\close_full  = close_full;
    \$next\close_full  = \$1 ;
    casez (rst)
      1'h1:
          \$next\close_full  = 1'h0;
    endcase
  end
  assign fifo_re = \$next\fifo_re ;
  assign out_end = \$next\out_end ;
  assign enc_out_ctr = \$next\enc_out_ctr ;
  assign enc_out = \$next\enc_out ;
  assign valid_out = \$next\valid_out ;
  assign fifo_din = \$next\fifo_din ;
  assign fifo_we = \$next\fifo_we ;
endmodule

(* \nmigen.hierarchy  = "top.top.markers" *)
(* generator = "nMigen" *)
module markers(valid_in, end_in, force_end_in, data_in, rst, clk, o_busy, valid_out, end_out, data_out, i_busy);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire [4:0] \$25 ;
  wire [4:0] \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire [4:0] \$32 ;
  wire [4:0] \$33 ;
  wire \$35 ;
  wire [4:0] \$37 ;
  wire [4:0] \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "markers.py:61" *)
  reg [3:0] \$next\counter ;
  (* src = "markers.py:38" *)
  reg [15:0] \$next\data_out ;
  (* src = "markers.py:75" *)
  reg \$next\end_cond ;
  (* src = "markers.py:46" *)
  reg \$next\end_out ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [2:0] \$next\fsm_state ;
  (* src = "markers.py:48" *)
  reg \$next\o_busy ;
  (* src = "markers.py:42" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 4'h0 *)
  (* src = "markers.py:61" *)
  reg [3:0] counter = 4'h0;
  (* src = "markers.py:35" *)
  input [15:0] data_in;
  (* src = "markers.py:38" *)
  output [15:0] data_out;
  (* init = 1'h0 *)
  (* src = "markers.py:75" *)
  reg end_cond = 1'h0;
  (* src = "markers.py:44" *)
  input end_in;
  (* src = "markers.py:46" *)
  output end_out;
  (* src = "markers.py:45" *)
  input force_end_in;
  (* init = 3'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [2:0] fsm_state = 3'h0;
  (* src = "markers.py:49" *)
  input i_busy;
  (* src = "markers.py:48" *)
  output o_busy;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "markers.py:41" *)
  input valid_in;
  (* src = "markers.py:42" *)
  output valid_out;
  assign \$9  = i_busy == (* src = "markers.py:141" *) 1'h0;
  assign \$11  = counter == (* src = "markers.py:144" *) 1'h1;
  assign \$13  = i_busy == (* src = "markers.py:76" *) 1'h0;
  assign \$15  = valid_in == (* src = "markers.py:76" *) 1'h1;
  assign \$17  = \$13  & (* src = "markers.py:76" *) \$15 ;
  assign \$1  = i_busy == (* src = "markers.py:109" *) 1'h0;
  assign \$19  = end_in == (* src = "markers.py:76" *) 1'h1;
  assign \$21  = \$17  & (* src = "markers.py:76" *) \$19 ;
  assign \$23  = i_busy == (* src = "markers.py:109" *) 1'h0;
  assign \$26  = counter - (* src = "markers.py:110" *) 1'h1;
  assign \$28  = counter == (* src = "markers.py:112" *) 1'h0;
  assign \$30  = i_busy == (* src = "markers.py:127" *) 1'h0;
  assign \$33  = counter - (* src = "markers.py:128" *) 1'h1;
  assign \$35  = i_busy == (* src = "markers.py:141" *) 1'h0;
  assign \$38  = counter - (* src = "markers.py:142" *) 1'h1;
  assign \$3  = counter == (* src = "markers.py:112" *) 1'h0;
  assign \$40  = i_busy == (* src = "markers.py:109" *) 1'h0;
  assign \$42  = counter == (* src = "markers.py:112" *) 1'h0;
  assign \$44  = i_busy == (* src = "markers.py:127" *) 1'h0;
  assign \$46  = counter == (* src = "markers.py:130" *) 1'h1;
  assign \$48  = i_busy == (* src = "markers.py:141" *) 1'h0;
  assign \$50  = counter == (* src = "markers.py:144" *) 1'h1;
  assign \$52  = i_busy == (* src = "markers.py:109" *) 1'h0;
  assign \$54  = counter == (* src = "markers.py:112" *) 1'h0;
  assign \$5  = i_busy == (* src = "markers.py:127" *) 1'h0;
  assign \$7  = counter == (* src = "markers.py:130" *) 1'h1;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      counter <= \$next\counter ;
  always @(posedge clk)
      end_cond <= \$next\end_cond ;
  always @* begin
    \$next\o_busy  = 1'h0;
    \$next\o_busy  = 1'h1;
    casez (fsm_state)
      3'h2:
          casez ({ force_end_in, end_cond })
            2'bz1:
                /* empty */;
            2'b1z:
                /* empty */;
            2'hz:
                \$next\o_busy  = i_busy;
          endcase
    endcase
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = 1'h0;
    casez (fsm_state)
      3'h1:
        begin
          \$next\valid_out  = 1'h1;
          casez (\$1 )
            1'h1:
                casez (\$3 )
                  1'h1:
                      \$next\valid_out  = 1'h0;
                endcase
          endcase
        end
      3'h3:
          \$next\valid_out  = 1'h1;
      3'h5:
          \$next\valid_out  = 1'h1;
      3'h2:
          casez ({ force_end_in, end_cond })
            2'bz1:
                /* empty */;
            2'b1z:
                /* empty */;
            2'hz:
                \$next\valid_out  = valid_in;
          endcase
      3'h4:
          \$next\valid_out  = 1'h1;
      3'h6:
          \$next\valid_out  = 1'h1;
    endcase
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = 1'h0;
    casez (fsm_state)
      3'h3:
          casez (\$5 )
            1'h1:
                casez (\$7 )
                  1'h1:
                      \$next\end_out  = 1'h1;
                endcase
          endcase
      3'h5:
          casez (\$9 )
            1'h1:
                casez (\$11 )
                  1'h1:
                      \$next\end_out  = 1'h1;
                endcase
          endcase
      3'h4:
          \$next\end_out  = 1'h1;
      3'h6:
          \$next\end_out  = 1'h1;
    endcase
  end
  always @* begin
    \$next\end_cond  = end_cond;
    \$next\end_cond  = \$21 ;
    casez (rst)
      1'h1:
          \$next\end_cond  = 1'h0;
    endcase
  end
  always @* begin
    \$next\counter  = counter;
    casez (fsm_state)
      3'h0:
          \$next\counter  = 4'h8;
      3'h1:
          casez (\$23 )
            1'h1:
              begin
                \$next\counter  = \$25 [3:0];
                casez (\$28 )
                  1'h1:
                      \$next\counter  = 4'h8;
                endcase
              end
          endcase
      3'h3:
          casez (\$30 )
            1'h1:
                \$next\counter  = \$32 [3:0];
          endcase
      3'h5:
          casez (\$35 )
            1'h1:
                \$next\counter  = \$37 [3:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\counter  = 4'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 3'h1;
          endcase
      3'h1:
          casez (\$40 )
            1'h1:
                casez (\$42 )
                  1'h1:
                      \$next\fsm_state  = 3'h2;
                endcase
          endcase
      3'h3:
          casez (\$44 )
            1'h1:
                casez (\$46 )
                  1'h1:
                      \$next\fsm_state  = 3'h4;
                endcase
          endcase
      3'h5:
          casez (\$48 )
            1'h1:
                casez (\$50 )
                  1'h1:
                      \$next\fsm_state  = 3'h6;
                endcase
          endcase
      3'h2:
          casez ({ force_end_in, end_cond })
            2'bz1:
                \$next\fsm_state  = 3'h3;
            2'b1z:
                \$next\fsm_state  = 3'h5;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 3'h0;
    endcase
  end
  always @* begin
    \$next\data_out  = 16'h0000;
    casez (fsm_state)
      3'h1:
        begin
          \$next\data_out  = 16'hffff;
          casez (\$52 )
            1'h1:
                casez (\$54 )
                  1'h1:
                      \$next\data_out  = 16'h0000;
                endcase
          endcase
        end
      3'h3:
          \$next\data_out  = 16'hffff;
      3'h5:
          \$next\data_out  = 16'hfffe;
      3'h2:
          casez ({ force_end_in, end_cond })
            2'bz1:
                /* empty */;
            2'b1z:
                /* empty */;
            2'hz:
                \$next\data_out  = data_in;
          endcase
      3'h4:
          \$next\data_out  = 16'hffff;
      3'h6:
          \$next\data_out  = 16'hfffe;
    endcase
  end
  assign \$25  = \$26 ;
  assign \$32  = \$33 ;
  assign \$37  = \$38 ;
  assign data_out = \$next\data_out ;
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign o_busy = \$next\o_busy ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.merge" *)
(* generator = "nMigen" *)
module merge(enc_in_ctr, valid_in, end_in, \enc_in$1 , \enc_in_ctr$2 , rst, clk, enc_out, enc_out_ctr, valid_out, end_out, enc_in);
  (* src = "merge.py:43" *)
  reg [27:0] \$next\enc_in1 ;
  (* src = "merge.py:46" *)
  reg [27:0] \$next\enc_in2 ;
  (* src = "merge.py:44" *)
  reg [4:0] \$next\enc_in_ctr1 ;
  (* src = "merge.py:47" *)
  reg [4:0] \$next\enc_in_ctr2 ;
  (* src = "merge.py:112" *)
  reg [55:0] \$next\enc_out ;
  (* src = "merge.py:113" *)
  reg [5:0] \$next\enc_out_ctr ;
  (* src = "merge.py:57" *)
  reg \$next\end_in$4 ;
  (* src = "merge.py:121" *)
  reg \$next\end_out ;
  (* src = "merge.py:53" *)
  reg \$next\valid_in$3 ;
  (* src = "merge.py:117" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "merge.py:109" *)
  input [27:0] enc_in;
  (* src = "merge.py:109" *)
  input [27:0] \enc_in$1 ;
  (* src = "merge.py:43" *)
  wire [27:0] enc_in1;
  (* src = "merge.py:46" *)
  wire [27:0] enc_in2;
  (* src = "merge.py:110" *)
  input [4:0] enc_in_ctr;
  (* src = "merge.py:110" *)
  input [4:0] \enc_in_ctr$2 ;
  (* src = "merge.py:44" *)
  wire [4:0] enc_in_ctr1;
  (* src = "merge.py:47" *)
  wire [4:0] enc_in_ctr2;
  (* src = "merge.py:112" *)
  output [55:0] enc_out;
  (* src = "merge.py:49" *)
  wire [55:0] \enc_out$6 ;
  (* src = "merge.py:113" *)
  output [5:0] enc_out_ctr;
  (* src = "merge.py:50" *)
  wire [5:0] \enc_out_ctr$5 ;
  (* src = "merge.py:120" *)
  input end_in;
  (* src = "merge.py:57" *)
  wire \end_in$4 ;
  (* src = "merge.py:121" *)
  output end_out;
  (* src = "merge.py:58" *)
  wire \end_out$8 ;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "merge.py:116" *)
  input valid_in;
  (* src = "merge.py:53" *)
  wire \valid_in$3 ;
  (* src = "merge.py:117" *)
  output valid_out;
  (* src = "merge.py:54" *)
  wire \valid_out$7 ;
  \anonymous$5  \$9  (
    .clk(clk),
    .enc_in1(enc_in1),
    .enc_in2(enc_in2),
    .enc_in_ctr1(enc_in_ctr1),
    .enc_in_ctr2(enc_in_ctr2),
    .enc_out(\enc_out$6 ),
    .enc_out_ctr(\enc_out_ctr$5 ),
    .end_in(\end_in$4 ),
    .end_out(\end_out$8 ),
    .rst(rst),
    .valid_in(\valid_in$3 ),
    .valid_out(\valid_out$7 )
  );
  always @* begin
    \$next\enc_in1  = 28'h0000000;
    \$next\enc_in1  = enc_in;
  end
  always @* begin
    \$next\enc_in_ctr1  = 5'h00;
    \$next\enc_in_ctr1  = enc_in_ctr;
  end
  always @* begin
    \$next\valid_in$3  = 1'h0;
    \$next\valid_in$3  = valid_in;
  end
  always @* begin
    \$next\end_in$4  = 1'h0;
    \$next\end_in$4  = end_in;
  end
  always @* begin
    \$next\enc_in2  = 28'h0000000;
    \$next\enc_in2  = \enc_in$1 ;
  end
  always @* begin
    \$next\enc_in_ctr2  = 5'h00;
    \$next\enc_in_ctr2  = \enc_in_ctr$2 ;
  end
  always @* begin
    \$next\enc_out  = 56'h00000000000000;
    \$next\enc_out  = \enc_out$6 ;
  end
  always @* begin
    \$next\enc_out_ctr  = 6'h00;
    \$next\enc_out_ctr  = \enc_out_ctr$5 ;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = \valid_out$7 ;
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = \end_out$8 ;
  end
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign enc_out_ctr = \$next\enc_out_ctr ;
  assign enc_out = \$next\enc_out ;
  assign enc_in_ctr2 = \$next\enc_in_ctr2 ;
  assign enc_in2 = \$next\enc_in2 ;
  assign \end_in$4  = \$next\end_in$4 ;
  assign \valid_in$3  = \$next\valid_in$3 ;
  assign enc_in_ctr1 = \$next\enc_in_ctr1 ;
  assign enc_in1 = \$next\enc_in1 ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.normalize" *)
(* generator = "nMigen" *)
module normalize(valid_in, end_in, vals_in_mns, \val_in$1 , \vals_in_mns$2 , rst, clk, ssss, val_out, \ssss$3 , \val_out$4 , valid_out, end_out, val_in);
  (* src = "normalize.py:132" *)
  reg \$next\end_in$14 ;
  (* src = "normalize.py:132" *)
  reg \$next\end_in$6 ;
  (* src = "normalize.py:208" *)
  reg \$next\end_out ;
  (* src = "normalize.py:201" *)
  reg [4:0] \$next\ssss ;
  (* src = "normalize.py:201" *)
  reg [4:0] \$next\ssss$3 ;
  (* src = "normalize.py:119" *)
  reg [12:0] \$next\val_in$12 ;
  (* src = "normalize.py:119" *)
  reg [12:0] \$next\val_in$5 ;
  (* src = "normalize.py:121" *)
  reg [12:0] \$next\val_in_mns ;
  (* src = "normalize.py:121" *)
  reg [12:0] \$next\val_in_mns$13 ;
  (* src = "normalize.py:199" *)
  reg [11:0] \$next\val_out ;
  (* src = "normalize.py:199" *)
  reg [11:0] \$next\val_out$4 ;
  (* src = "normalize.py:128" *)
  reg \$next\valid ;
  (* src = "normalize.py:128" *)
  reg \$next\valid$11 ;
  (* src = "normalize.py:204" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "normalize.py:207" *)
  input end_in;
  (* src = "normalize.py:132" *)
  wire \end_in$14 ;
  (* src = "normalize.py:132" *)
  wire \end_in$6 ;
  (* src = "normalize.py:208" *)
  output end_out;
  (* src = "normalize.py:133" *)
  wire \end_out$9 ;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "normalize.py:201" *)
  output [4:0] ssss;
  (* src = "normalize.py:126" *)
  wire [4:0] \ssss$16 ;
  (* src = "normalize.py:201" *)
  output [4:0] \ssss$3 ;
  (* src = "normalize.py:126" *)
  wire [4:0] \ssss$8 ;
  (* src = "normalize.py:194" *)
  input [12:0] val_in;
  (* src = "normalize.py:194" *)
  input [12:0] \val_in$1 ;
  (* src = "normalize.py:119" *)
  wire [12:0] \val_in$12 ;
  (* src = "normalize.py:119" *)
  wire [12:0] \val_in$5 ;
  (* src = "normalize.py:121" *)
  wire [12:0] val_in_mns;
  (* src = "normalize.py:121" *)
  wire [12:0] \val_in_mns$13 ;
  (* src = "normalize.py:199" *)
  output [11:0] val_out;
  (* src = "normalize.py:124" *)
  wire [11:0] \val_out$15 ;
  (* src = "normalize.py:199" *)
  output [11:0] \val_out$4 ;
  (* src = "normalize.py:124" *)
  wire [11:0] \val_out$7 ;
  (* src = "normalize.py:128" *)
  wire valid;
  (* src = "normalize.py:128" *)
  wire \valid$11 ;
  (* src = "normalize.py:203" *)
  input valid_in;
  (* src = "normalize.py:129" *)
  wire valid_o;
  (* src = "normalize.py:204" *)
  output valid_out;
  (* src = "normalize.py:196" *)
  input [12:0] vals_in_mns;
  (* src = "normalize.py:196" *)
  input [12:0] \vals_in_mns$2 ;
  anonymous \$10  (
    .clk(clk),
    .end_in(\end_in$6 ),
    .end_out(\end_out$9 ),
    .rst(rst),
    .ssss(\ssss$8 ),
    .val_in(\val_in$5 ),
    .val_in_mns(val_in_mns),
    .val_out(\val_out$7 ),
    .valid(valid),
    .valid_o(valid_o)
  );
  \anonymous$2  \$17  (
    .clk(clk),
    .end_in(\end_in$14 ),
    .rst(rst),
    .ssss(\ssss$16 ),
    .val_in(\val_in$12 ),
    .val_in_mns(\val_in_mns$13 ),
    .val_out(\val_out$15 ),
    .valid(\valid$11 )
  );
  always @* begin
    \$next\val_in$5  = 13'h0000;
    \$next\val_in$5  = val_in;
  end
  always @* begin
    \$next\valid  = 1'h0;
    \$next\valid  = valid_in;
  end
  always @* begin
    \$next\ssss$3  = 5'h00;
    \$next\ssss$3  = \ssss$16 ;
  end
  always @* begin
    \$next\val_out$4  = 12'h000;
    \$next\val_out$4  = \val_out$15 ;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = valid_o;
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = \end_out$9 ;
  end
  always @* begin
    \$next\end_in$6  = 1'h0;
    \$next\end_in$6  = end_in;
  end
  always @* begin
    \$next\val_in_mns  = 13'h0000;
    \$next\val_in_mns  = vals_in_mns;
  end
  always @* begin
    \$next\ssss  = 5'h00;
    \$next\ssss  = \ssss$8 ;
  end
  always @* begin
    \$next\val_out  = 12'h000;
    \$next\val_out  = \val_out$7 ;
  end
  always @* begin
    \$next\val_in$12  = 13'h0000;
    \$next\val_in$12  = \val_in$1 ;
  end
  always @* begin
    \$next\valid$11  = 1'h0;
    \$next\valid$11  = valid_in;
  end
  always @* begin
    \$next\end_in$14  = 1'h0;
    \$next\end_in$14  = end_in;
  end
  always @* begin
    \$next\val_in_mns$13  = 13'h0000;
    \$next\val_in_mns$13  = \vals_in_mns$2 ;
  end
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign \val_out$4  = \$next\val_out$4 ;
  assign \ssss$3  = \$next\ssss$3 ;
  assign \val_in_mns$13  = \$next\val_in_mns$13 ;
  assign \end_in$14  = \$next\end_in$14 ;
  assign \valid$11  = \$next\valid$11 ;
  assign \val_in$12  = \$next\val_in$12 ;
  assign val_out = \$next\val_out ;
  assign ssss = \$next\ssss ;
  assign val_in_mns = \$next\val_in_mns ;
  assign \end_in$6  = \$next\end_in$6 ;
  assign valid = \$next\valid ;
  assign \val_in$5  = \$next\val_in$5 ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.vbits_to_cbits.output_handler" *)
(* generator = "nMigen" *)
module output_handler(end_in, buffer, busy_in, rst, clk, dec_buff_out, data_out, end_out, valid_out, buff_consum);
  wire [7:0] \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire [7:0] \$2 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire [76:0] \$39 ;
  wire [7:0] \$4 ;
  wire [76:0] \$40 ;
  wire [91:0] \$42 ;
  wire [91:0] \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire [7:0] \$5 ;
  wire [76:0] \$51 ;
  wire [76:0] \$52 ;
  wire [91:0] \$54 ;
  wire [91:0] \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$9 ;
  (* src = "vbits_to_cbits.py:84" *)
  reg \$next\buff_consum_greater_eq ;
  (* src = "vbits_to_cbits.py:83" *)
  reg \$next\buff_consum_less_eq ;
  (* src = "vbits_to_cbits.py:52" *)
  reg [15:0] \$next\data_out ;
  (* src = "vbits_to_cbits.py:63" *)
  reg \$next\dec_buff_out ;
  (* src = "vbits_to_cbits.py:54" *)
  reg \$next\end_out ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "vbits_to_cbits.py:75" *)
  reg [3:0] \$next\shift_left ;
  (* src = "vbits_to_cbits.py:74" *)
  reg [5:0] \$next\shift_right ;
  (* src = "vbits_to_cbits.py:53" *)
  reg \$next\valid_out ;
  (* src = "vbits_to_cbits.py:59" *)
  input [6:0] buff_consum;
  (* src = "vbits_to_cbits.py:84" *)
  wire buff_consum_greater_eq;
  (* src = "vbits_to_cbits.py:83" *)
  wire buff_consum_less_eq;
  (* src = "vbits_to_cbits.py:58" *)
  input [76:0] buffer;
  (* src = "vbits_to_cbits.py:55" *)
  input busy_in;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 16'h0000 *)
  (* src = "vbits_to_cbits.py:52" *)
  output [15:0] data_out;
  reg [15:0] data_out = 16'h0000;
  (* src = "vbits_to_cbits.py:63" *)
  output dec_buff_out;
  (* src = "vbits_to_cbits.py:66" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "vbits_to_cbits.py:54" *)
  output end_out;
  reg end_out = 1'h0;
  (* init = 2'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "vbits_to_cbits.py:75" *)
  wire [3:0] shift_left;
  (* src = "vbits_to_cbits.py:74" *)
  wire [5:0] shift_right;
  (* init = 1'h0 *)
  (* src = "vbits_to_cbits.py:53" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$9  = buff_consum_greater_eq | (* src = "vbits_to_cbits.py:108" *) \$7 ;
  assign \$11  = busy_in == (* src = "vbits_to_cbits.py:114" *) 1'h0;
  assign \$13  = \$11  & (* src = "vbits_to_cbits.py:114" *) buff_consum_greater_eq;
  assign \$15  = busy_in == (* src = "vbits_to_cbits.py:117" *) 1'h0;
  assign \$17  = buff_consum >= (* src = "vbits_to_cbits.py:87" *) 5'h10;
  assign \$19  = buff_consum <= (* src = "vbits_to_cbits.py:88" *) 5'h10;
  assign \$21  = buff_consum_less_eq & (* src = "vbits_to_cbits.py:108" *) end_in;
  assign \$23  = buff_consum_greater_eq | (* src = "vbits_to_cbits.py:108" *) \$21 ;
  assign \$25  = buff_consum_less_eq & (* src = "vbits_to_cbits.py:97" *) end_in;
  assign \$27  = busy_in == (* src = "vbits_to_cbits.py:114" *) 1'h0;
  assign \$2  = buff_consum - (* src = "vbits_to_cbits.py:76" *) 5'h10;
  assign \$29  = \$27  & (* src = "vbits_to_cbits.py:114" *) buff_consum_greater_eq;
  assign \$31  = busy_in == (* src = "vbits_to_cbits.py:117" *) 1'h0;
  assign \$33  = buff_consum_less_eq & (* src = "vbits_to_cbits.py:97" *) end_in;
  assign \$35  = buff_consum_less_eq & (* src = "vbits_to_cbits.py:108" *) end_in;
  assign \$37  = buff_consum_greater_eq | (* src = "vbits_to_cbits.py:108" *) \$35 ;
  assign \$40  = buffer >>> (* src = "vbits_to_cbits.py:93" *) shift_right;
  assign \$43  = buffer <<< (* src = "vbits_to_cbits.py:95" *) shift_left;
  assign \$45  = busy_in == (* src = "vbits_to_cbits.py:114" *) 1'h0;
  assign \$47  = \$45  & (* src = "vbits_to_cbits.py:114" *) buff_consum_greater_eq;
  assign \$49  = busy_in == (* src = "vbits_to_cbits.py:117" *) 1'h0;
  assign \$52  = buffer >>> (* src = "vbits_to_cbits.py:93" *) shift_right;
  assign \$55  = buffer <<< (* src = "vbits_to_cbits.py:95" *) shift_left;
  assign \$57  = buff_consum_less_eq & (* src = "vbits_to_cbits.py:108" *) end_in;
  assign \$5  = 5'h10 - (* src = "vbits_to_cbits.py:77" *) buff_consum;
  assign \$59  = buff_consum_greater_eq | (* src = "vbits_to_cbits.py:108" *) \$57 ;
  assign \$61  = buff_consum_less_eq & (* src = "vbits_to_cbits.py:97" *) end_in;
  assign \$63  = busy_in == (* src = "vbits_to_cbits.py:114" *) 1'h0;
  assign \$65  = \$63  & (* src = "vbits_to_cbits.py:114" *) buff_consum_greater_eq;
  assign \$67  = busy_in == (* src = "vbits_to_cbits.py:117" *) 1'h0;
  assign \$69  = buff_consum_less_eq & (* src = "vbits_to_cbits.py:97" *) end_in;
  assign \$71  = buff_consum_less_eq & (* src = "vbits_to_cbits.py:108" *) end_in;
  assign \$73  = buff_consum_greater_eq | (* src = "vbits_to_cbits.py:108" *) \$71 ;
  assign \$75  = busy_in == (* src = "vbits_to_cbits.py:114" *) 1'h0;
  assign \$77  = \$75  & (* src = "vbits_to_cbits.py:114" *) buff_consum_greater_eq;
  assign \$7  = buff_consum_less_eq & (* src = "vbits_to_cbits.py:108" *) end_in;
  assign \$79  = busy_in == (* src = "vbits_to_cbits.py:117" *) 1'h0;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      data_out <= \$next\data_out ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @* begin
    \$next\shift_right  = 6'h00;
    \$next\shift_right  = \$1 [5:0];
  end
  always @* begin
    \$next\shift_left  = 4'h0;
    \$next\shift_left  = \$4 [3:0];
  end
  always @* begin
    \$next\dec_buff_out  = 1'h0;
    \$next\dec_buff_out  = 1'h0;
    casez (fsm_state)
      2'h0:
          casez (\$9 )
            1'h1:
                \$next\dec_buff_out  = 1'h1;
          endcase
      2'h1:
          casez ({ \$15 , \$13  })
            2'bz1:
                \$next\dec_buff_out  = 1'h1;
          endcase
    endcase
  end
  always @* begin
    \$next\buff_consum_greater_eq  = 1'h0;
    \$next\buff_consum_greater_eq  = \$17 ;
  end
  always @* begin
    \$next\buff_consum_less_eq  = 1'h0;
    \$next\buff_consum_less_eq  = \$19 ;
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez (\$23 )
            1'h1:
              begin
                \$next\fsm_state  = 2'h1;
                casez (\$25 )
                  1'h1:
                      \$next\fsm_state  = 2'h2;
                endcase
              end
          endcase
      2'h1:
          casez ({ \$31 , \$29  })
            2'bz1:
                casez (\$33 )
                  1'h1:
                      \$next\fsm_state  = 2'h2;
                endcase
            2'b1z:
                \$next\fsm_state  = 2'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\data_out  = data_out;
    casez (fsm_state)
      2'h0:
          casez (\$37 )
            1'h1:
                casez (buff_consum_greater_eq)
                  1'h1:
                      \$next\data_out  = \$39 [15:0];
                  1'hz:
                      \$next\data_out  = \$42 [15:0];
                endcase
          endcase
      2'h1:
          casez ({ \$49 , \$47  })
            2'bz1:
                casez (buff_consum_greater_eq)
                  1'h1:
                      \$next\data_out  = \$51 [15:0];
                  1'hz:
                      \$next\data_out  = \$54 [15:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data_out  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    casez (fsm_state)
      2'h0:
          casez (\$59 )
            1'h1:
                casez (\$61 )
                  1'h1:
                      \$next\end_out  = 1'h1;
                endcase
          endcase
      2'h1:
          casez ({ \$67 , \$65  })
            2'bz1:
                casez (\$69 )
                  1'h1:
                      \$next\end_out  = 1'h1;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    casez (fsm_state)
      2'h0:
          casez (\$73 )
            1'h1:
                \$next\valid_out  = 1'h1;
          endcase
      2'h1:
          casez ({ \$79 , \$77  })
            2'bz1:
                \$next\valid_out  = 1'h1;
            2'b1z:
                \$next\valid_out  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
  assign \$39  = \$40 ;
  assign \$42  = \$43 ;
  assign \$51  = \$52 ;
  assign \$54  = \$55 ;
  assign buff_consum_less_eq = \$next\buff_consum_less_eq ;
  assign buff_consum_greater_eq = \$next\buff_consum_greater_eq ;
  assign dec_buff_out = \$next\dec_buff_out ;
  assign shift_left = \$next\shift_left ;
  assign shift_right = \$next\shift_right ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.predictor" *)
(* generator = "nMigen" *)
module predictor(new_row, pixel_in, \pixel_in$1 , end_in, rst, clk, pixel_out, \pixel_out$2 , predic_out, \predic_out$3 , valid_out, end_out, valid_in);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire [32:0] \$18 ;
  wire [32:0] \$19 ;
  wire [1:0] \$21 ;
  wire [1:0] \$22 ;
  wire [1:0] \$27 ;
  wire [1:0] \$28 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  (* src = "predictor_p1_c4_pix1_2.py:100" *)
  reg [11:0] \$next\buff ;
  (* src = "predictor_p1_c4_pix1_2.py:100" *)
  reg [11:0] \$next\buff$24 ;
  (* src = "predictor_p1_c4_pix1_2.py:100" *)
  reg [11:0] \$next\buff$25 ;
  (* src = "predictor_p1_c4_pix1_2.py:100" *)
  reg [11:0] \$next\buff$26 ;
  (* src = "predictor_p1_c4_pix1_2.py:108" *)
  reg \$next\buff_ctr ;
  (* src = "predictor_p1_c4_pix1_2.py:84" *)
  reg [31:0] \$next\debug_counter ;
  (* src = "predictor_p1_c4_pix1_2.py:81" *)
  reg \$next\end_out ;
  (* src = "predictor_p1_c4_pix1_2.py:106" *)
  reg [11:0] \$next\lbuff ;
  (* src = "predictor_p1_c4_pix1_2.py:106" *)
  reg [11:0] \$next\lbuff$30 ;
  (* src = "predictor_p1_c4_pix1_2.py:106" *)
  reg [11:0] \$next\lbuff$31 ;
  (* src = "predictor_p1_c4_pix1_2.py:106" *)
  reg [11:0] \$next\lbuff$32 ;
  (* src = "predictor_p1_c4_pix1_2.py:109" *)
  reg \$next\lbuff_ctr ;
  (* src = "predictor_p1_c4_pix1_2.py:112" *)
  reg \$next\new_row_latch ;
  (* src = "predictor_p1_c4_pix1_2.py:111" *)
  reg \$next\new_row_reg ;
  (* src = "predictor_p1_c4_pix1_2.py:67" *)
  reg [11:0] \$next\pixel_out ;
  (* src = "predictor_p1_c4_pix1_2.py:67" *)
  reg [11:0] \$next\pixel_out$2 ;
  (* src = "predictor_p1_c4_pix1_2.py:70" *)
  reg [11:0] \$next\predic_out ;
  (* src = "predictor_p1_c4_pix1_2.py:70" *)
  reg [11:0] \$next\predic_out$3 ;
  (* src = "predictor_p1_c4_pix1_2.py:77" *)
  reg \$next\valid_out ;
  (* init = 12'h800 *)
  (* src = "predictor_p1_c4_pix1_2.py:100" *)
  reg [11:0] buff = 12'h800;
  (* init = 12'h800 *)
  (* src = "predictor_p1_c4_pix1_2.py:100" *)
  reg [11:0] \buff$24  = 12'h800;
  (* init = 12'h800 *)
  (* src = "predictor_p1_c4_pix1_2.py:100" *)
  reg [11:0] \buff$25  = 12'h800;
  (* init = 12'h800 *)
  (* src = "predictor_p1_c4_pix1_2.py:100" *)
  reg [11:0] \buff$26  = 12'h800;
  (* init = 1'h0 *)
  (* src = "predictor_p1_c4_pix1_2.py:108" *)
  reg buff_ctr = 1'h0;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 32'd0 *)
  (* src = "predictor_p1_c4_pix1_2.py:84" *)
  reg [31:0] debug_counter = 32'd0;
  (* src = "predictor_p1_c4_pix1_2.py:80" *)
  input end_in;
  (* init = 1'h0 *)
  (* src = "predictor_p1_c4_pix1_2.py:81" *)
  output end_out;
  reg end_out = 1'h0;
  (* init = 12'h800 *)
  (* src = "predictor_p1_c4_pix1_2.py:106" *)
  reg [11:0] lbuff = 12'h800;
  (* init = 12'h800 *)
  (* src = "predictor_p1_c4_pix1_2.py:106" *)
  reg [11:0] \lbuff$30  = 12'h800;
  (* init = 12'h800 *)
  (* src = "predictor_p1_c4_pix1_2.py:106" *)
  reg [11:0] \lbuff$31  = 12'h800;
  (* init = 12'h800 *)
  (* src = "predictor_p1_c4_pix1_2.py:106" *)
  reg [11:0] \lbuff$32  = 12'h800;
  (* init = 1'h0 *)
  (* src = "predictor_p1_c4_pix1_2.py:109" *)
  reg lbuff_ctr = 1'h0;
  (* src = "predictor_p1_c4_pix1_2.py:73" *)
  input new_row;
  (* src = "predictor_p1_c4_pix1_2.py:112" *)
  wire new_row_latch;
  (* init = 1'h0 *)
  (* src = "predictor_p1_c4_pix1_2.py:111" *)
  reg new_row_reg = 1'h0;
  (* src = "predictor_p1_c4_pix1_2.py:64" *)
  input [11:0] pixel_in;
  (* src = "predictor_p1_c4_pix1_2.py:64" *)
  input [11:0] \pixel_in$1 ;
  (* init = 12'h000 *)
  (* src = "predictor_p1_c4_pix1_2.py:67" *)
  output [11:0] pixel_out;
  reg [11:0] pixel_out = 12'h000;
  (* init = 12'h000 *)
  (* src = "predictor_p1_c4_pix1_2.py:67" *)
  output [11:0] \pixel_out$2 ;
  reg [11:0] \pixel_out$2  = 12'h000;
  (* init = 12'h000 *)
  (* src = "predictor_p1_c4_pix1_2.py:70" *)
  output [11:0] predic_out;
  reg [11:0] predic_out = 12'h000;
  (* init = 12'h000 *)
  (* src = "predictor_p1_c4_pix1_2.py:70" *)
  output [11:0] \predic_out$3 ;
  reg [11:0] \predic_out$3  = 12'h000;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "predictor_p1_c4_pix1_2.py:76" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "predictor_p1_c4_pix1_2.py:77" *)
  output valid_out;
  reg valid_out = 1'h0;
  assign \$10  = valid_in == (* src = "predictor_p1_c4_pix1_2.py:117" *) 1'h1;
  assign \$12  = lbuff_ctr == (* src = "predictor_p1_c4_pix1_2.py:117" *) 1'h1;
  assign \$14  = \$10  & (* src = "predictor_p1_c4_pix1_2.py:117" *) \$12 ;
  assign \$16  = new_row | (* src = "predictor_p1_c4_pix1_2.py:119" *) new_row_reg;
  assign \$19  = debug_counter + (* src = "predictor_p1_c4_pix1_2.py:124" *) 1'h1;
  assign \$22  = buff_ctr + (* src = "predictor_p1_c4_pix1_2.py:130" *) 1'h1;
  assign \$28  = lbuff_ctr + (* src = "predictor_p1_c4_pix1_2.py:138" *) 1'h1;
  assign \$4  = valid_in == (* src = "predictor_p1_c4_pix1_2.py:115" *) 1'h1;
  assign \$6  = new_row == (* src = "predictor_p1_c4_pix1_2.py:115" *) 1'h1;
  assign \$8  = \$4  & (* src = "predictor_p1_c4_pix1_2.py:115" *) \$6 ;
  always @(posedge clk)
      end_out <= \$next\end_out ;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      \predic_out$3  <= \$next\predic_out$3 ;
  always @(posedge clk)
      predic_out <= \$next\predic_out ;
  always @(posedge clk)
      \lbuff$32  <= \$next\lbuff$32 ;
  always @(posedge clk)
      \lbuff$31  <= \$next\lbuff$31 ;
  always @(posedge clk)
      \lbuff$30  <= \$next\lbuff$30 ;
  always @(posedge clk)
      lbuff <= \$next\lbuff ;
  always @(posedge clk)
      lbuff_ctr <= \$next\lbuff_ctr ;
  always @(posedge clk)
      \buff$26  <= \$next\buff$26 ;
  always @(posedge clk)
      \buff$25  <= \$next\buff$25 ;
  always @(posedge clk)
      \buff$24  <= \$next\buff$24 ;
  always @(posedge clk)
      buff <= \$next\buff ;
  always @(posedge clk)
      buff_ctr <= \$next\buff_ctr ;
  always @(posedge clk)
      \pixel_out$2  <= \$next\pixel_out$2 ;
  always @(posedge clk)
      pixel_out <= \$next\pixel_out ;
  always @(posedge clk)
      debug_counter <= \$next\debug_counter ;
  always @(posedge clk)
      new_row_reg <= \$next\new_row_reg ;
  always @* begin
    \$next\new_row_reg  = new_row_reg;
    casez ({ \$14 , \$8  })
      2'bz1:
          \$next\new_row_reg  = 1'h1;
      2'b1z:
          \$next\new_row_reg  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\new_row_reg  = 1'h0;
    endcase
  end
  always @* begin
    \$next\new_row_latch  = 1'h0;
    \$next\new_row_latch  = \$16 ;
  end
  always @* begin
    \$next\lbuff_ctr  = lbuff_ctr;
    casez (valid_in)
      1'h1:
          casez (new_row_latch)
            1'h1:
                \$next\lbuff_ctr  = \$27 [0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\lbuff_ctr  = 1'h0;
    endcase
  end
  always @* begin
    \$next\lbuff  = lbuff;
    casez (valid_in)
      1'h1:
          casez (new_row_latch)
            1'h1:
                casez (lbuff_ctr)
                  1'h0:
                      \$next\lbuff  = pixel_in;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\lbuff  = 12'h800;
    endcase
  end
  always @* begin
    \$next\lbuff$30  = \lbuff$30 ;
    casez (valid_in)
      1'h1:
          casez (new_row_latch)
            1'h1:
                casez (lbuff_ctr)
                  1'h0:
                      \$next\lbuff$30  = \pixel_in$1 ;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\lbuff$30  = 12'h800;
    endcase
  end
  always @* begin
    \$next\lbuff$31  = \lbuff$31 ;
    casez (valid_in)
      1'h1:
          casez (new_row_latch)
            1'h1:
                casez (lbuff_ctr)
                  1'h1:
                      \$next\lbuff$31  = pixel_in;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\lbuff$31  = 12'h800;
    endcase
  end
  always @* begin
    \$next\lbuff$32  = \lbuff$32 ;
    casez (valid_in)
      1'h1:
          casez (new_row_latch)
            1'h1:
                casez (lbuff_ctr)
                  1'h1:
                      \$next\lbuff$32  = \pixel_in$1 ;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\lbuff$32  = 12'h800;
    endcase
  end
  always @* begin
    \$next\predic_out  = predic_out;
    casez (valid_in)
      1'h1:
          casez (new_row_latch)
            1'h1:
                casez (lbuff_ctr)
                  1'h0:
                      \$next\predic_out  = lbuff;
                  1'h1:
                      \$next\predic_out  = \lbuff$31 ;
                endcase
            1'hz:
                casez (buff_ctr)
                  1'h0:
                      \$next\predic_out  = buff;
                  1'h1:
                      \$next\predic_out  = \buff$25 ;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\predic_out  = 12'h000;
    endcase
  end
  always @* begin
    \$next\predic_out$3  = \predic_out$3 ;
    casez (valid_in)
      1'h1:
          casez (new_row_latch)
            1'h1:
                casez (lbuff_ctr)
                  1'h0:
                      \$next\predic_out$3  = \lbuff$30 ;
                  1'h1:
                      \$next\predic_out$3  = \lbuff$32 ;
                endcase
            1'hz:
                casez (buff_ctr)
                  1'h0:
                      \$next\predic_out$3  = \buff$24 ;
                  1'h1:
                      \$next\predic_out$3  = \buff$26 ;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\predic_out$3  = 12'h000;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    \$next\valid_out  = valid_in;
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\end_out  = end_out;
    \$next\end_out  = end_in;
    casez (rst)
      1'h1:
          \$next\end_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\debug_counter  = debug_counter;
    casez (valid_in)
      1'h1:
          \$next\debug_counter  = \$18 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next\debug_counter  = 32'd0;
    endcase
  end
  always @* begin
    \$next\pixel_out  = pixel_out;
    casez (valid_in)
      1'h1:
          \$next\pixel_out  = pixel_in;
    endcase
    casez (rst)
      1'h1:
          \$next\pixel_out  = 12'h000;
    endcase
  end
  always @* begin
    \$next\pixel_out$2  = \pixel_out$2 ;
    casez (valid_in)
      1'h1:
          \$next\pixel_out$2  = \pixel_in$1 ;
    endcase
    casez (rst)
      1'h1:
          \$next\pixel_out$2  = 12'h000;
    endcase
  end
  always @* begin
    \$next\buff_ctr  = buff_ctr;
    casez (valid_in)
      1'h1:
          \$next\buff_ctr  = \$21 [0];
    endcase
    casez (rst)
      1'h1:
          \$next\buff_ctr  = 1'h0;
    endcase
  end
  always @* begin
    \$next\buff  = buff;
    casez (valid_in)
      1'h1:
          casez (buff_ctr)
            1'h0:
                \$next\buff  = pixel_in;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buff  = 12'h800;
    endcase
  end
  always @* begin
    \$next\buff$24  = \buff$24 ;
    casez (valid_in)
      1'h1:
          casez (buff_ctr)
            1'h0:
                \$next\buff$24  = \pixel_in$1 ;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buff$24  = 12'h800;
    endcase
  end
  always @* begin
    \$next\buff$25  = \buff$25 ;
    casez (valid_in)
      1'h1:
          casez (buff_ctr)
            1'h1:
                \$next\buff$25  = pixel_in;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buff$25  = 12'h800;
    endcase
  end
  always @* begin
    \$next\buff$26  = \buff$26 ;
    casez (valid_in)
      1'h1:
          casez (buff_ctr)
            1'h1:
                \$next\buff$26  = \pixel_in$1 ;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\buff$26  = 12'h800;
    endcase
  end
  assign \$18  = \$19 ;
  assign \$21  = \$22 ;
  assign \$27  = \$28 ;
  assign new_row_latch = \$next\new_row_latch ;
endmodule

(* \nmigen.hierarchy  = "top.reader_fifo" *)
(* generator = "nMigen" *)
module reader_fifo(end_in, data_in, read, replace, rst, clk, writable16, data_out, valid_out, valid_in);
  wire \$1 ;
  wire \$3 ;
  (* src = "axihp_fifo.py:11" *)
  reg [63:0] \$next\data_out ;
  (* src = "axihp_fifo.py:14" *)
  reg \$next\end_out ;
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [64:0] \$next\fifo_din ;
  (* src = "nmigen/lib/fifo.py:71" *)
  reg \$next\fifo_re ;
  (* src = "nmigen/lib/fifo.py:67" *)
  reg \$next\fifo_we ;
  (* src = "axihp_fifo.py:22" *)
  reg \$next\readable ;
  (* src = "axihp_fifo.py:25" *)
  reg \$next\readable16 ;
  (* src = "axihp_fifo.py:17" *)
  reg \$next\valid_out ;
  (* src = "axihp_fifo.py:21" *)
  reg \$next\writable ;
  (* src = "axihp_fifo.py:24" *)
  reg \$next\writable16 ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "axihp_fifo.py:10" *)
  input [63:0] data_in;
  (* src = "axihp_fifo.py:11" *)
  output [63:0] data_out;
  (* src = "axihp_fifo.py:13" *)
  input end_in;
  (* src = "axihp_fifo.py:14" *)
  wire end_out;
  (* src = "nmigen/lib/fifo.py:65" *)
  wire [64:0] fifo_din;
  (* src = "nmigen/lib/fifo.py:69" *)
  wire [64:0] fifo_dout;
  (* src = "nmigen/lib/fifo.py:138" *)
  wire [5:0] fifo_level;
  (* src = "nmigen/lib/fifo.py:71" *)
  wire fifo_re;
  (* src = "nmigen/lib/fifo.py:70" *)
  wire fifo_readable;
  (* src = "nmigen/lib/fifo.py:67" *)
  wire fifo_we;
  (* src = "nmigen/lib/fifo.py:66" *)
  wire fifo_writable;
  (* src = "axihp_fifo.py:19" *)
  input read;
  (* src = "axihp_fifo.py:22" *)
  wire readable;
  (* src = "axihp_fifo.py:25" *)
  wire readable16;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "axihp_fifo.py:16" *)
  input valid_in;
  (* src = "axihp_fifo.py:17" *)
  output valid_out;
  (* src = "axihp_fifo.py:21" *)
  wire writable;
  (* src = "axihp_fifo.py:24" *)
  output writable16;
  assign \$1  = fifo_level >= (* src = "axihp_fifo.py:54" *) 5'h10;
  assign \$3  = fifo_level <= (* src = "axihp_fifo.py:55" *) 4'hc;
  \fifo$8  fifo (
    .clk(clk),
    .din(fifo_din),
    .dout(fifo_dout),
    .level(fifo_level),
    .re(fifo_re),
    .readable(fifo_readable),
    .replace(replace),
    .rst(rst),
    .we(fifo_we),
    .writable(fifo_writable)
  );
  always @* begin
    \$next\fifo_we  = 1'h0;
    \$next\fifo_we  = valid_in;
  end
  always @* begin
    \$next\fifo_din  = 65'h00000000000000000;
    \$next\fifo_din  = { data_in, end_in };
  end
  always @* begin
    \$next\fifo_re  = 1'h0;
    \$next\fifo_re  = read;
  end
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = fifo_writable;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = fifo_readable;
  end
  always @* begin
    \$next\readable16  = 1'h0;
    \$next\readable16  = \$1 ;
  end
  always @* begin
    \$next\writable16  = 1'h0;
    \$next\writable16  = \$3 ;
  end
  always @* begin
    \$next\data_out  = 64'h0000000000000000;
    \$next\data_out  = fifo_dout[64:1];
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = fifo_dout[0];
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = fifo_readable;
  end
  assign valid_out = \$next\valid_out ;
  assign end_out = \$next\end_out ;
  assign data_out = \$next\data_out ;
  assign writable16 = \$next\writable16 ;
  assign readable16 = \$next\readable16 ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
  assign fifo_re = \$next\fifo_re ;
  assign fifo_din = \$next\fifo_din ;
  assign fifo_we = \$next\fifo_we ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.register_file" *)
(* generator = "nMigen" *)
module register_file(full_clk, width, height, allowed_cycles, full_rst);
  (* src = "register_file.py:38" *)
  reg [23:0] \$next\allowed_cycles ;
  (* src = "register_file.py:52" *)
  reg [23:0] \$next\allowed_cycles_reg ;
  (* src = "register_file.py:36" *)
  reg [15:0] \$next\height ;
  (* src = "register_file.py:51" *)
  reg [15:0] \$next\height_reg ;
  (* src = "register_file.py:37" *)
  reg [15:0] \$next\width ;
  (* src = "register_file.py:50" *)
  reg [15:0] \$next\width_reg ;
  (* src = "register_file.py:38" *)
  output [23:0] allowed_cycles;
  (* init = 24'h000000 *)
  (* src = "register_file.py:52" *)
  reg [23:0] allowed_cycles_reg = 24'h000000;
  (* src = "clk_domains.py:4" *)
  input full_clk;
  (* src = "clk_domains.py:4" *)
  input full_rst;
  (* src = "register_file.py:36" *)
  output [15:0] height;
  (* init = 16'h0000 *)
  (* src = "register_file.py:51" *)
  reg [15:0] height_reg = 16'h0000;
  (* src = "register_file.py:37" *)
  output [15:0] width;
  (* init = 16'h0000 *)
  (* src = "register_file.py:50" *)
  reg [15:0] width_reg = 16'h0000;
  always @(posedge full_clk)
      allowed_cycles_reg <= \$next\allowed_cycles_reg ;
  always @(posedge full_clk)
      height_reg <= \$next\height_reg ;
  always @(posedge full_clk)
      width_reg <= \$next\width_reg ;
  always @* begin
    \$next\width_reg  = width_reg;
    \$next\width_reg  = 16'h1000;
    casez (full_rst)
      1'h1:
          \$next\width_reg  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\height_reg  = height_reg;
    \$next\height_reg  = 16'h0c00;
    casez (full_rst)
      1'h1:
          \$next\height_reg  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\allowed_cycles_reg  = allowed_cycles_reg;
    \$next\allowed_cycles_reg  = 24'h65b710;
    casez (full_rst)
      1'h1:
          \$next\allowed_cycles_reg  = 24'h000000;
    endcase
  end
  always @* begin
    \$next\width  = 16'h0000;
    \$next\width  = width_reg;
  end
  always @* begin
    \$next\height  = 16'h0000;
    \$next\height  = height_reg;
  end
  always @* begin
    \$next\allowed_cycles  = 24'h000000;
    \$next\allowed_cycles  = allowed_cycles_reg;
  end
  assign allowed_cycles = \$next\allowed_cycles ;
  assign height = \$next\height ;
  assign width = \$next\width ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.integration_1.signals" *)
(* generator = "nMigen" *)
module signals(width, height, rst, clk, new_row, end_of_frame, new_input);
  wire [16:0] \$1 ;
  wire [16:0] \$10 ;
  wire \$12 ;
  wire [16:0] \$14 ;
  wire [16:0] \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire [16:0] \$2 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$4 ;
  wire [16:0] \$6 ;
  wire [16:0] \$7 ;
  wire [16:0] \$9 ;
  (* src = "signals.py:45" *)
  reg \$next\end_of_frame ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "signals.py:57" *)
  reg [15:0] \$next\height_temp ;
  (* src = "signals.py:46" *)
  reg \$next\new_row ;
  (* src = "signals.py:56" *)
  reg [15:0] \$next\width_temp ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 1'h0 *)
  (* src = "signals.py:45" *)
  output end_of_frame;
  reg end_of_frame = 1'h0;
  (* init = 2'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "signals.py:41" *)
  input [15:0] height;
  (* init = 16'h0000 *)
  (* src = "signals.py:57" *)
  reg [15:0] height_temp = 16'h0000;
  (* src = "signals.py:43" *)
  input new_input;
  (* init = 1'h1 *)
  (* src = "signals.py:46" *)
  output new_row;
  reg new_row = 1'h1;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "signals.py:42" *)
  input [15:0] width;
  (* init = 16'h0000 *)
  (* src = "signals.py:56" *)
  reg [15:0] width_temp = 16'h0000;
  assign \$10  = height - (* src = "signals.py:66" *) 1'h1;
  assign \$12  = width_temp == (* src = "signals.py:73" *) 2'h2;
  assign \$15  = height_temp - (* src = "signals.py:76" *) 1'h1;
  assign \$17  = width_temp == (* src = "signals.py:73" *) 2'h2;
  assign \$19  = height_temp == (* src = "signals.py:84" *) 1'h0;
  assign \$21  = width_temp == (* src = "signals.py:84" *) 3'h4;
  assign \$23  = \$19  & (* src = "signals.py:84" *) \$21 ;
  assign \$25  = height_temp == (* src = "signals.py:84" *) 1'h0;
  assign \$27  = width_temp == (* src = "signals.py:84" *) 3'h4;
  assign \$2  = width - (* src = "signals.py:65" *) 2'h2;
  assign \$29  = \$25  & (* src = "signals.py:84" *) \$27 ;
  assign \$4  = width_temp == (* src = "signals.py:73" *) 2'h2;
  assign \$7  = width_temp - (* src = "signals.py:81" *) 2'h2;
  always @(posedge clk)
      end_of_frame <= \$next\end_of_frame ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      new_row <= \$next\new_row ;
  always @(posedge clk)
      height_temp <= \$next\height_temp ;
  always @(posedge clk)
      width_temp <= \$next\width_temp ;
  always @* begin
    \$next\width_temp  = width_temp;
    casez (fsm_state)
      2'h0:
          casez (new_input)
            1'h1:
                \$next\width_temp  = \$1 [15:0];
          endcase
      2'h1:
          casez (new_input)
            1'h1:
                casez (\$4 )
                  1'h1:
                      \$next\width_temp  = width;
                  1'hz:
                      \$next\width_temp  = \$6 [15:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\width_temp  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\height_temp  = height_temp;
    casez (fsm_state)
      2'h0:
          casez (new_input)
            1'h1:
                \$next\height_temp  = \$9 [15:0];
          endcase
      2'h1:
          casez (new_input)
            1'h1:
                casez (\$12 )
                  1'h1:
                      \$next\height_temp  = \$14 [15:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\height_temp  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\new_row  = new_row;
    casez (fsm_state)
      2'h0:
          casez (new_input)
            1'h1:
                \$next\new_row  = 1'h0;
          endcase
      2'h1:
          casez (new_input)
            1'h1:
                casez (\$17 )
                  1'h1:
                      \$next\new_row  = 1'h1;
                  1'hz:
                      \$next\new_row  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\new_row  = 1'h1;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez (new_input)
            1'h1:
                \$next\fsm_state  = 2'h1;
          endcase
      2'h1:
          casez (new_input)
            1'h1:
                casez (\$23 )
                  1'h1:
                      \$next\fsm_state  = 2'h2;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\end_of_frame  = end_of_frame;
    casez (fsm_state)
      2'h1:
          casez (new_input)
            1'h1:
                casez (\$29 )
                  1'h1:
                      \$next\end_of_frame  = 1'h1;
                endcase
          endcase
      2'h2:
          \$next\end_of_frame  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\end_of_frame  = 1'h0;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$6  = \$7 ;
  assign \$9  = \$10 ;
  assign \$14  = \$15 ;
endmodule

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(full_rst, m_axi_ri__arready, m_axi_ri__rvalid, m_axi_ri__rlast, m_axi_ri__rresp, m_axi_ri__rdata, m_axi_aclk_, m_axi_wi__awready, m_axi_wi__wready, m_axi_wi__bvalid, m_axi_wi__bresp, m_axi_aclk, s_axi_ri___arvalid, s_axi_wi___awvalid, s_axi_ri___araddr, s_axi_ri___rready, s_axi_wi___awaddr, s_axi_wi___wvalid, s_axi_wi___wdata, s_axi_wi___wstrb, s_axi_wi___bready, replace, \replace$1 , m_axi_ro__arid, m_axi_ro__araddr, m_axi_ro__arburst, m_axi_ro__arlen, m_axi_ro__arsize, m_axi_ro__arprot, m_axi_ro__arvalid, m_axi_ro__rready, m_axi_wo__awid, m_axi_wo__awaddr, m_axi_wo__awburst, m_axi_wo__awlen, m_axi_wo__awsize, m_axi_wo__awprot, m_axi_wo__awvalid, m_axi_wo__wid, m_axi_wo__wdata, m_axi_wo__wstrb, m_axi_wo__wlast, m_axi_wo__wvalid, m_axi_wo__bready, s_axi_ro___arready, s_axi_ro___rdata, s_axi_ro___rresp, s_axi_ro___rvalid, s_axi_wo___awready, s_axi_wo___wready, s_axi_wo___bresp, s_axi_wo___bvalid, full_clk);
  wire \$10 ;
  wire \$12 ;
  wire \$14 ;
  wire \$16 ;
  wire \$18 ;
  wire \$2 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire [32:0] \$26 ;
  wire [32:0] \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire [32:0] \$37 ;
  wire [32:0] \$38 ;
  wire \$4 ;
  wire [31:0] \$40 ;
  wire [31:0] \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$6 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$8 ;
  (* src = "address_generator.py:37" *)
  reg \$next\address_gen_read_address_latch ;
  (* src = "address_generator.py:39" *)
  reg [31:0] \$next\address_gen_read_starting_address ;
  (* src = "address_generator.py:37" *)
  reg \$next\address_gen_write_address_latch ;
  (* src = "address_generator.py:39" *)
  reg [31:0] \$next\address_gen_write_starting_address ;
  (* src = "axihp_reader.py:28" *)
  reg \$next\axihp_reader_addr_empty ;
  (* src = "axihp_reader.py:27" *)
  reg [31:0] \$next\axihp_reader_addr_in ;
  (* src = "axihp_reader.py:23" *)
  reg \$next\axihp_reader_data_full ;
  (* src = "axihp_reader.py:14" *)
  reg \$next\axihp_reader_enable ;
  (* src = "axihp_writer.py:23" *)
  reg \$next\axihp_writer_addr_empty ;
  (* src = "axihp_writer.py:22" *)
  reg [31:0] \$next\axihp_writer_addr_in ;
  (* src = "axihp_writer.py:28" *)
  reg \$next\axihp_writer_data_empty ;
  (* src = "axihp_writer.py:27" *)
  reg [63:0] \$next\axihp_writer_data_in ;
  (* src = "axihp_writer.py:14" *)
  reg \$next\axihp_writer_enable ;
  (* src = "axihp_writer.py:30" *)
  reg [7:0] \$next\axihp_writer_write_strobe ;
  (* src = "b16_b64.py:34" *)
  reg [15:0] \$next\b16_b64_data_in ;
  (* src = "b16_b64.py:43" *)
  reg \$next\b16_b64_end_in ;
  (* src = "b16_b64.py:47" *)
  reg \$next\b16_b64_i_busy ;
  (* src = "b16_b64.py:40" *)
  reg \$next\b16_b64_valid_in ;
  (* src = "b64_b32.py:35" *)
  reg [63:0] \$next\b64_b32_data_in ;
  (* src = "b64_b32.py:45" *)
  reg \$next\b64_b32_i_busy ;
  (* src = "b64_b32.py:41" *)
  reg \$next\b64_b32_valid_in ;
  (* src = "beta_integration_fullaxi.py:66" *)
  reg [31:0] \$next\counter_read ;
  (* src = "beta_integration_fullaxi.py:67" *)
  reg [31:0] \$next\counter_write ;
  (* src = "dma_axi_lite.py:66" *)
  reg [31:0] \$next\dma_axi_lite_in1 ;
  (* src = "dma_axi_lite.py:67" *)
  reg [31:0] \$next\dma_axi_lite_in2 ;
  (* src = "dma_axi_lite.py:68" *)
  reg [31:0] \$next\dma_axi_lite_in3 ;
  (* src = "dma_axi_lite.py:69" *)
  reg [31:0] \$next\dma_axi_lite_in4 ;
  (* src = "dma_axi_lite.py:70" *)
  reg [31:0] \$next\dma_axi_lite_in5 ;
  (* src = "dma_axi_lite.py:71" *)
  reg [31:0] \$next\dma_axi_lite_in6 ;
  (* src = "dma_axi_lite.py:72" *)
  reg [31:0] \$next\dma_axi_lite_in7 ;
  (* src = "dma_axi_lite.py:73" *)
  reg [31:0] \$next\dma_axi_lite_in8 ;
  (* src = "dma_axi_lite.py:74" *)
  reg [31:0] \$next\dma_axi_lite_in9 ;
  (* src = "beta_integration_fullaxi.py:69" *)
  reg \$next\read_end ;
  (* src = "axihp_fifo.py:10" *)
  reg [63:0] \$next\reader_fifo_data_in ;
  (* src = "axihp_fifo.py:13" *)
  reg \$next\reader_fifo_end_in ;
  (* src = "axihp_fifo.py:19" *)
  reg \$next\reader_fifo_read ;
  (* src = "axihp_fifo.py:16" *)
  reg \$next\reader_fifo_valid_in ;
  (* src = "beta_integration.py:43" *)
  reg \$next\top_busy_in ;
  (* src = "beta_integration.py:32" *)
  reg [11:0] \$next\top_pixel_in1 ;
  (* src = "beta_integration.py:33" *)
  reg [11:0] \$next\top_pixel_in2 ;
  (* src = "beta_integration.py:39" *)
  reg \$next\top_valid_in ;
  (* src = "beta_integration_fullaxi.py:70" *)
  reg \$next\write_end ;
  (* src = "axihp_fifo.py:10" *)
  reg [63:0] \$next\writer_fifo_data_in ;
  (* src = "axihp_fifo.py:13" *)
  reg \$next\writer_fifo_end_in ;
  (* src = "axihp_fifo.py:19" *)
  reg \$next\writer_fifo_read ;
  (* src = "axihp_fifo.py:16" *)
  reg \$next\writer_fifo_valid_in ;
  (* init = 1'h0 *)
  reg \$verilog_initial_trigger  = 1'h0;
  (* src = "address_generator.py:37" *)
  wire address_gen_read_address_latch;
  (* src = "address_generator.py:35" *)
  wire [31:0] address_gen_read_address_o;
  (* src = "address_generator.py:36" *)
  wire address_gen_read_address_valid;
  (* src = "address_generator.py:39" *)
  wire [31:0] address_gen_read_starting_address;
  (* src = "address_generator.py:37" *)
  wire address_gen_write_address_latch;
  (* src = "address_generator.py:35" *)
  wire [31:0] address_gen_write_address_o;
  (* src = "address_generator.py:36" *)
  wire address_gen_write_address_valid;
  (* src = "address_generator.py:39" *)
  wire [31:0] address_gen_write_starting_address;
  (* src = "axihp_reader.py:28" *)
  wire axihp_reader_addr_empty;
  (* src = "axihp_reader.py:26" *)
  wire axihp_reader_addr_enable;
  (* src = "axihp_reader.py:27" *)
  wire [31:0] axihp_reader_addr_in;
  (* src = "axihp_reader.py:21" *)
  wire axihp_reader_data_enable;
  (* src = "axihp_reader.py:23" *)
  wire axihp_reader_data_full;
  (* src = "axihp_reader.py:22" *)
  wire [63:0] axihp_reader_data_out;
  (* src = "axihp_reader.py:14" *)
  wire axihp_reader_enable;
  (* src = "axihp_reader.py:15" *)
  wire axihp_reader_inactive;
  (* src = "axihp_reader.py:31" *)
  wire [3:0] axihp_reader_reader_active;
  (* src = "axihp_reader.py:30" *)
  wire axihp_reader_reader_error;
  (* src = "axihp_writer.py:23" *)
  wire axihp_writer_addr_empty;
  (* src = "axihp_writer.py:21" *)
  wire axihp_writer_addr_enable;
  (* src = "axihp_writer.py:22" *)
  wire [31:0] axihp_writer_addr_in;
  (* src = "axihp_writer.py:28" *)
  wire axihp_writer_data_empty;
  (* src = "axihp_writer.py:26" *)
  wire axihp_writer_data_enable;
  (* src = "axihp_writer.py:27" *)
  wire [63:0] axihp_writer_data_in;
  (* src = "axihp_writer.py:14" *)
  wire axihp_writer_enable;
  (* src = "axihp_writer.py:15" *)
  wire axihp_writer_inactive;
  (* src = "axihp_writer.py:30" *)
  wire [7:0] axihp_writer_write_strobe;
  (* src = "axihp_writer.py:33" *)
  wire [3:0] axihp_writer_writer_active;
  (* src = "axihp_writer.py:32" *)
  wire axihp_writer_writer_error;
  (* src = "axihp_writer.py:34" *)
  wire [3:0] axihp_writer_writer_unconf;
  (* src = "b16_b64.py:34" *)
  wire [15:0] b16_b64_data_in;
  (* src = "b16_b64.py:37" *)
  wire [63:0] b16_b64_data_out;
  (* src = "b16_b64.py:43" *)
  wire b16_b64_end_in;
  (* src = "b16_b64.py:44" *)
  wire b16_b64_end_out;
  (* src = "b16_b64.py:47" *)
  wire b16_b64_i_busy;
  (* src = "b16_b64.py:46" *)
  wire b16_b64_o_busy;
  (* src = "b16_b64.py:40" *)
  wire b16_b64_valid_in;
  (* src = "b16_b64.py:41" *)
  wire b16_b64_valid_out;
  (* src = "b64_b32.py:35" *)
  wire [63:0] b64_b32_data_in;
  (* src = "b64_b32.py:38" *)
  wire [31:0] b64_b32_data_out;
  (* src = "b64_b32.py:45" *)
  wire b64_b32_i_busy;
  (* src = "b64_b32.py:44" *)
  wire b64_b32_o_busy;
  (* src = "b64_b32.py:41" *)
  wire b64_b32_valid_in;
  (* src = "b64_b32.py:42" *)
  wire b64_b32_valid_out;
  (* src = "nmigen/hdl/mem.py:160" *)
  wire clk;
  (* init = 32'd0 *)
  (* src = "beta_integration_fullaxi.py:66" *)
  reg [31:0] counter_read = 32'd0;
  (* init = 32'd0 *)
  (* src = "beta_integration_fullaxi.py:67" *)
  reg [31:0] counter_write = 32'd0;
  (* src = "dma_axi_lite.py:66" *)
  wire [31:0] dma_axi_lite_in1;
  (* src = "dma_axi_lite.py:67" *)
  wire [31:0] dma_axi_lite_in2;
  (* src = "dma_axi_lite.py:68" *)
  wire [31:0] dma_axi_lite_in3;
  (* src = "dma_axi_lite.py:69" *)
  wire [31:0] dma_axi_lite_in4;
  (* src = "dma_axi_lite.py:70" *)
  wire [31:0] dma_axi_lite_in5;
  (* src = "dma_axi_lite.py:71" *)
  wire [31:0] dma_axi_lite_in6;
  (* src = "dma_axi_lite.py:72" *)
  wire [31:0] dma_axi_lite_in7;
  (* src = "dma_axi_lite.py:73" *)
  wire [31:0] dma_axi_lite_in8;
  (* src = "dma_axi_lite.py:74" *)
  wire [31:0] dma_axi_lite_in9;
  (* src = "dma_axi_lite.py:59" *)
  wire [31:0] dma_axi_lite_read_addr;
  (* src = "dma_axi_lite.py:63" *)
  wire [31:0] dma_axi_lite_start;
  (* src = "dma_axi_lite.py:60" *)
  wire [31:0] dma_axi_lite_write_addr;
  (* src = "clk_domains.py:4" *)
  input full_clk;
  (* src = "clk_domains.py:4" *)
  input full_rst;
  (* src = "axihp_writer.py:12" *)
  input m_axi_aclk;
  (* src = "axihp_reader.py:12" *)
  input m_axi_aclk_;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_ri__arready;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [63:0] m_axi_ri__rdata;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_ri__rlast;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [1:0] m_axi_ri__rresp;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_ri__rvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [31:0] m_axi_ro__araddr;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] m_axi_ro__arburst;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [5:0] m_axi_ro__arid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [3:0] m_axi_ro__arlen;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [2:0] m_axi_ro__arprot;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] m_axi_ro__arsize;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_ro__arvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_ro__rready;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_wi__awready;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [1:0] m_axi_wi__bresp;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_wi__bvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  input m_axi_wi__wready;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [31:0] m_axi_wo__awaddr;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] m_axi_wo__awburst;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [5:0] m_axi_wo__awid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [3:0] m_axi_wo__awlen;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [2:0] m_axi_wo__awprot;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] m_axi_wo__awsize;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_wo__awvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_wo__bready;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [63:0] m_axi_wo__wdata;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [5:0] m_axi_wo__wid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_wo__wlast;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [7:0] m_axi_wo__wstrb;
  (* src = "nmigen/hdl/rec.py:84" *)
  output m_axi_wo__wvalid;
  (* src = "beta_integration_fullaxi.py:69" *)
  wire read_end;
  (* src = "axihp_fifo.py:10" *)
  wire [63:0] reader_fifo_data_in;
  (* src = "axihp_fifo.py:11" *)
  wire [63:0] reader_fifo_data_out;
  (* src = "axihp_fifo.py:13" *)
  wire reader_fifo_end_in;
  (* src = "axihp_fifo.py:19" *)
  wire reader_fifo_read;
  (* src = "axihp_fifo.py:16" *)
  wire reader_fifo_valid_in;
  (* src = "axihp_fifo.py:17" *)
  wire reader_fifo_valid_out;
  (* src = "axihp_fifo.py:24" *)
  wire reader_fifo_writable16;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "nmigen/lib/fifo.py:139" *)
  input \replace$1 ;
  (* src = "clk_domains.py:5" *)
  wire rst;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [31:0] s_axi_ri___araddr;
  (* src = "nmigen/hdl/rec.py:84" *)
  input s_axi_ri___arvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  input s_axi_ri___rready;
  (* src = "nmigen/hdl/rec.py:84" *)
  output s_axi_ro___arready;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [31:0] s_axi_ro___rdata;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] s_axi_ro___rresp;
  (* src = "nmigen/hdl/rec.py:84" *)
  output s_axi_ro___rvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [31:0] s_axi_wi___awaddr;
  (* src = "nmigen/hdl/rec.py:84" *)
  input s_axi_wi___awvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  input s_axi_wi___bready;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [31:0] s_axi_wi___wdata;
  (* src = "nmigen/hdl/rec.py:84" *)
  input [3:0] s_axi_wi___wstrb;
  (* src = "nmigen/hdl/rec.py:84" *)
  input s_axi_wi___wvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output s_axi_wo___awready;
  (* src = "nmigen/hdl/rec.py:84" *)
  output [1:0] s_axi_wo___bresp;
  (* src = "nmigen/hdl/rec.py:84" *)
  output s_axi_wo___bvalid;
  (* src = "nmigen/hdl/rec.py:84" *)
  output s_axi_wo___wready;
  (* src = "beta_integration.py:43" *)
  wire top_busy_in;
  (* src = "beta_integration.py:36" *)
  wire [15:0] top_data_out;
  (* src = "beta_integration.py:41" *)
  wire top_end_out;
  (* src = "beta_integration.py:42" *)
  wire top_nready;
  (* src = "beta_integration.py:32" *)
  wire [11:0] top_pixel_in1;
  (* src = "beta_integration.py:33" *)
  wire [11:0] top_pixel_in2;
  (* src = "beta_integration.py:39" *)
  wire top_valid_in;
  (* src = "beta_integration.py:40" *)
  wire top_valid_out;
  (* src = "beta_integration_fullaxi.py:70" *)
  wire write_end;
  (* src = "axihp_fifo.py:10" *)
  wire [63:0] writer_fifo_data_in;
  (* src = "axihp_fifo.py:11" *)
  wire [63:0] writer_fifo_data_out;
  (* src = "axihp_fifo.py:13" *)
  wire writer_fifo_end_in;
  (* src = "axihp_fifo.py:14" *)
  wire writer_fifo_end_out;
  (* src = "axihp_fifo.py:19" *)
  wire writer_fifo_read;
  (* src = "axihp_fifo.py:25" *)
  wire writer_fifo_readable16;
  (* src = "axihp_fifo.py:16" *)
  wire writer_fifo_valid_in;
  (* src = "axihp_fifo.py:17" *)
  wire writer_fifo_valid_out;
  (* src = "axihp_fifo.py:21" *)
  wire writer_fifo_writable;
  assign \$10  = address_gen_write_address_valid == (* src = "beta_integration_fullaxi.py:83" *) 1'h1;
  assign \$12  = axihp_writer_addr_enable == (* src = "beta_integration_fullaxi.py:83" *) 1'h1;
  assign \$14  = \$10  & (* src = "beta_integration_fullaxi.py:83" *) \$12 ;
  assign \$16  = counter_write == (* src = "beta_integration_fullaxi.py:84" *) 18'h20000;
  assign \$18  = address_gen_read_address_valid == (* src = "beta_integration_fullaxi.py:77" *) 1'h1;
  assign \$20  = axihp_reader_addr_enable == (* src = "beta_integration_fullaxi.py:77" *) 1'h1;
  assign \$22  = \$18  & (* src = "beta_integration_fullaxi.py:77" *) \$20 ;
  assign \$24  = counter_read == (* src = "beta_integration_fullaxi.py:78" *) 18'h30000;
  assign \$27  = counter_read + (* src = "beta_integration_fullaxi.py:81" *) 1'h1;
  assign \$2  = address_gen_read_address_valid == (* src = "beta_integration_fullaxi.py:77" *) 1'h1;
  assign \$29  = address_gen_write_address_valid == (* src = "beta_integration_fullaxi.py:83" *) 1'h1;
  assign \$31  = axihp_writer_addr_enable == (* src = "beta_integration_fullaxi.py:83" *) 1'h1;
  assign \$33  = \$29  & (* src = "beta_integration_fullaxi.py:83" *) \$31 ;
  assign \$35  = counter_write == (* src = "beta_integration_fullaxi.py:84" *) 18'h20000;
  assign \$38  = counter_write + (* src = "beta_integration_fullaxi.py:87" *) 1'h1;
  assign \$40  = + (* src = "beta_integration_fullaxi.py:91" *) { axihp_writer_writer_unconf, axihp_reader_reader_active, axihp_writer_writer_active, axihp_reader_reader_error, axihp_writer_writer_error, axihp_writer_inactive, axihp_reader_inactive, write_end, read_end, axihp_writer_data_enable, writer_fifo_valid_out, writer_fifo_end_out, b16_b64_valid_out, b16_b64_end_out };
  assign \$42  = + (* src = "beta_integration.py:36" *) top_data_out;
  assign \$44  = dma_axi_lite_start == (* src = "beta_integration_fullaxi.py:116" *) 32'd4294967295;
  assign \$46  = reader_fifo_writable16 == (* src = "beta_integration_fullaxi.py:118" *) 1'h0;
  assign \$48  = address_gen_read_address_valid == (* src = "beta_integration_fullaxi.py:121" *) 1'h0;
  assign \$4  = axihp_reader_addr_enable == (* src = "beta_integration_fullaxi.py:77" *) 1'h1;
  assign \$50  = read_end == (* src = "beta_integration_fullaxi.py:121" *) 1'h1;
  assign \$52  = \$48  | (* src = "beta_integration_fullaxi.py:121" *) \$50 ;
  assign \$54  = b64_b32_o_busy == (* src = "beta_integration_fullaxi.py:129" *) 1'h0;
  assign \$56  = b64_b32_valid_out == (* src = "beta_integration_fullaxi.py:141" *) 1'h1;
  assign \$58  = writer_fifo_writable == (* src = "beta_integration_fullaxi.py:151" *) 1'h0;
  assign \$60  = dma_axi_lite_start == (* src = "beta_integration_fullaxi.py:165" *) 32'd4294967295;
  assign \$62  = writer_fifo_readable16 == (* src = "beta_integration_fullaxi.py:168" *) 1'h0;
  assign \$64  = address_gen_write_address_valid == (* src = "beta_integration_fullaxi.py:172" *) 1'h0;
  assign \$66  = write_end == (* src = "beta_integration_fullaxi.py:172" *) 1'h1;
  assign \$68  = \$64  | (* src = "beta_integration_fullaxi.py:172" *) \$66 ;
  assign \$6  = \$2  & (* src = "beta_integration_fullaxi.py:77" *) \$4 ;
  assign \$8  = counter_read == (* src = "beta_integration_fullaxi.py:78" *) 18'h30000;
  always @(posedge clk)
      counter_write <= \$next\counter_write ;
  always @(posedge clk)
      counter_read <= \$next\counter_read ;
  address_gen_read address_gen_read (
    .address_latch(address_gen_read_address_latch),
    .address_o(address_gen_read_address_o),
    .address_valid(address_gen_read_address_valid),
    .clk(clk),
    .rst(rst),
    .starting_address(address_gen_read_starting_address)
  );
  address_gen_write address_gen_write (
    .address_latch(address_gen_write_address_latch),
    .address_o(address_gen_write_address_o),
    .address_valid(address_gen_write_address_valid),
    .clk(clk),
    .rst(rst),
    .starting_address(address_gen_write_starting_address)
  );
  axihp_reader axihp_reader (
    .addr_empty(axihp_reader_addr_empty),
    .addr_enable(axihp_reader_addr_enable),
    .addr_in(axihp_reader_addr_in),
    .clk(clk),
    .data_enable(axihp_reader_data_enable),
    .data_full(axihp_reader_data_full),
    .data_out(axihp_reader_data_out),
    .enable(axihp_reader_enable),
    .inactive(axihp_reader_inactive),
    .m_axi_aclk_(m_axi_aclk_),
    .m_axi_ri__arready(m_axi_ri__arready),
    .m_axi_ri__rdata(m_axi_ri__rdata),
    .m_axi_ri__rlast(m_axi_ri__rlast),
    .m_axi_ri__rresp(m_axi_ri__rresp),
    .m_axi_ri__rvalid(m_axi_ri__rvalid),
    .m_axi_ro__araddr(m_axi_ro__araddr),
    .m_axi_ro__arburst(m_axi_ro__arburst),
    .m_axi_ro__arid(m_axi_ro__arid),
    .m_axi_ro__arlen(m_axi_ro__arlen),
    .m_axi_ro__arprot(m_axi_ro__arprot),
    .m_axi_ro__arsize(m_axi_ro__arsize),
    .m_axi_ro__arvalid(m_axi_ro__arvalid),
    .m_axi_ro__rready(m_axi_ro__rready),
    .reader_active(axihp_reader_reader_active),
    .reader_error(axihp_reader_reader_error),
    .rst(rst)
  );
  axihp_writer axihp_writer (
    .addr_empty(axihp_writer_addr_empty),
    .addr_enable(axihp_writer_addr_enable),
    .addr_in(axihp_writer_addr_in),
    .clk(clk),
    .data_empty(axihp_writer_data_empty),
    .data_enable(axihp_writer_data_enable),
    .data_in(axihp_writer_data_in),
    .enable(axihp_writer_enable),
    .inactive(axihp_writer_inactive),
    .m_axi_aclk(m_axi_aclk),
    .m_axi_wi__awready(m_axi_wi__awready),
    .m_axi_wi__bresp(m_axi_wi__bresp),
    .m_axi_wi__bvalid(m_axi_wi__bvalid),
    .m_axi_wi__wready(m_axi_wi__wready),
    .m_axi_wo__awaddr(m_axi_wo__awaddr),
    .m_axi_wo__awburst(m_axi_wo__awburst),
    .m_axi_wo__awid(m_axi_wo__awid),
    .m_axi_wo__awlen(m_axi_wo__awlen),
    .m_axi_wo__awprot(m_axi_wo__awprot),
    .m_axi_wo__awsize(m_axi_wo__awsize),
    .m_axi_wo__awvalid(m_axi_wo__awvalid),
    .m_axi_wo__bready(m_axi_wo__bready),
    .m_axi_wo__wdata(m_axi_wo__wdata),
    .m_axi_wo__wid(m_axi_wo__wid),
    .m_axi_wo__wlast(m_axi_wo__wlast),
    .m_axi_wo__wstrb(m_axi_wo__wstrb),
    .m_axi_wo__wvalid(m_axi_wo__wvalid),
    .rst(rst),
    .write_strobe(axihp_writer_write_strobe),
    .writer_active(axihp_writer_writer_active),
    .writer_error(axihp_writer_writer_error),
    .writer_unconf(axihp_writer_writer_unconf)
  );
  b16_b64 b16_b64 (
    .clk(clk),
    .data_in(b16_b64_data_in),
    .data_out(b16_b64_data_out),
    .end_in(b16_b64_end_in),
    .end_out(b16_b64_end_out),
    .i_busy(b16_b64_i_busy),
    .o_busy(b16_b64_o_busy),
    .rst(rst),
    .valid_in(b16_b64_valid_in),
    .valid_out(b16_b64_valid_out)
  );
  b64_b32 b64_b32 (
    .clk(clk),
    .data_in(b64_b32_data_in),
    .data_out(b64_b32_data_out),
    .i_busy(b64_b32_i_busy),
    .o_busy(b64_b32_o_busy),
    .rst(rst),
    .valid_in(b64_b32_valid_in),
    .valid_out(b64_b32_valid_out)
  );
  dma_axi_lite dma_axi_lite (
    .clk(clk),
    .in1(dma_axi_lite_in1),
    .in2(dma_axi_lite_in2),
    .in3(dma_axi_lite_in3),
    .in4(dma_axi_lite_in4),
    .in5(dma_axi_lite_in5),
    .in6(dma_axi_lite_in6),
    .in7(dma_axi_lite_in7),
    .in8(dma_axi_lite_in8),
    .in9(dma_axi_lite_in9),
    .read_addr(dma_axi_lite_read_addr),
    .rst(rst),
    .s_axi_ri___araddr(s_axi_ri___araddr),
    .s_axi_ri___arvalid(s_axi_ri___arvalid),
    .s_axi_ri___rready(s_axi_ri___rready),
    .s_axi_ro___arready(s_axi_ro___arready),
    .s_axi_ro___rdata(s_axi_ro___rdata),
    .s_axi_ro___rresp(s_axi_ro___rresp),
    .s_axi_ro___rvalid(s_axi_ro___rvalid),
    .s_axi_wi___awaddr(s_axi_wi___awaddr),
    .s_axi_wi___awvalid(s_axi_wi___awvalid),
    .s_axi_wi___bready(s_axi_wi___bready),
    .s_axi_wi___wdata(s_axi_wi___wdata),
    .s_axi_wi___wstrb(s_axi_wi___wstrb),
    .s_axi_wi___wvalid(s_axi_wi___wvalid),
    .s_axi_wo___awready(s_axi_wo___awready),
    .s_axi_wo___bresp(s_axi_wo___bresp),
    .s_axi_wo___bvalid(s_axi_wo___bvalid),
    .s_axi_wo___wready(s_axi_wo___wready),
    .start(dma_axi_lite_start),
    .write_addr(dma_axi_lite_write_addr)
  );
  reader_fifo reader_fifo (
    .clk(clk),
    .data_in(reader_fifo_data_in),
    .data_out(reader_fifo_data_out),
    .end_in(reader_fifo_end_in),
    .read(reader_fifo_read),
    .replace(replace),
    .rst(rst),
    .valid_in(reader_fifo_valid_in),
    .valid_out(reader_fifo_valid_out),
    .writable16(reader_fifo_writable16)
  );
  \top$1  top (
    .busy_in(top_busy_in),
    .clk(clk),
    .data_out(top_data_out),
    .end_out(top_end_out),
    .full_clk(full_clk),
    .full_rst(full_rst),
    .nready(top_nready),
    .pixel_in1(top_pixel_in1),
    .pixel_in2(top_pixel_in2),
    .rst(rst),
    .valid_in(top_valid_in),
    .valid_out(top_valid_out)
  );
  writer_fifo writer_fifo (
    .clk(clk),
    .data_in(writer_fifo_data_in),
    .data_out(writer_fifo_data_out),
    .end_in(writer_fifo_end_in),
    .end_out(writer_fifo_end_out),
    .read(writer_fifo_read),
    .readable16(writer_fifo_readable16),
    .replace(\replace$1 ),
    .rst(rst),
    .valid_in(writer_fifo_valid_in),
    .valid_out(writer_fifo_valid_out),
    .writable(writer_fifo_writable)
  );
  always @* begin
    \$next\read_end  = 1'h0;
    \$next\read_end  = 1'h0;
    casez (\$6 )
      1'h1:
          casez (\$8 )
            1'h1:
                \$next\read_end  = 1'h1;
          endcase
    endcase
  end
  always @* begin
    \$next\write_end  = 1'h0;
    \$next\write_end  = 1'h0;
    casez (\$14 )
      1'h1:
          casez (\$16 )
            1'h1:
                \$next\write_end  = 1'h1;
          endcase
    endcase
  end
  always @* begin
    \$next\dma_axi_lite_in7  = 32'd0;
    \$next\dma_axi_lite_in7  = b16_b64_data_out[31:0];
  end
  always @* begin
    \$next\dma_axi_lite_in8  = 32'd0;
    \$next\dma_axi_lite_in8  = b16_b64_data_out[63:32];
  end
  always @* begin
    \$next\dma_axi_lite_in9  = 32'd0;
    \$next\dma_axi_lite_in9  = b64_b32_data_out;
  end
  always @* begin
    \$next\address_gen_read_address_latch  = 1'h0;
    \$next\address_gen_read_address_latch  = axihp_reader_addr_enable;
  end
  always @* begin
    \$next\address_gen_read_starting_address  = 32'd0;
    \$next\address_gen_read_starting_address  = dma_axi_lite_read_addr;
  end
  always @* begin
    \$next\address_gen_write_address_latch  = 1'h0;
    \$next\address_gen_write_address_latch  = axihp_writer_addr_enable;
  end
  always @* begin
    \$next\address_gen_write_starting_address  = 32'd0;
    \$next\address_gen_write_starting_address  = dma_axi_lite_write_addr;
  end
  always @* begin
    \$next\axihp_reader_enable  = 1'h0;
    \$next\axihp_reader_enable  = \$44 ;
  end
  always @* begin
    \$next\axihp_reader_data_full  = 1'h0;
    \$next\axihp_reader_data_full  = \$46 ;
  end
  always @* begin
    \$next\axihp_reader_addr_in  = 32'd0;
    \$next\axihp_reader_addr_in  = address_gen_read_address_o;
  end
  always @* begin
    \$next\counter_read  = counter_read;
    casez (\$22 )
      1'h1:
          casez (\$24 )
            1'h1:
                /* empty */;
            1'hz:
                \$next\counter_read  = \$26 [31:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\counter_read  = 32'd0;
    endcase
  end
  always @* begin
    \$next\axihp_reader_addr_empty  = 1'h0;
    \$next\axihp_reader_addr_empty  = \$52 ;
  end
  always @* begin
    \$next\reader_fifo_data_in  = 64'h0000000000000000;
    \$next\reader_fifo_data_in  = axihp_reader_data_out;
  end
  always @* begin
    \$next\reader_fifo_end_in  = 1'h0;
    \$next\reader_fifo_end_in  = 1'h0;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\reader_fifo_valid_in  = 1'h0;
    \$next\reader_fifo_valid_in  = axihp_reader_data_enable;
  end
  always @* begin
    \$next\reader_fifo_read  = 1'h0;
    \$next\reader_fifo_read  = \$54 ;
  end
  always @* begin
    \$next\b64_b32_data_in  = 64'h0000000000000000;
    \$next\b64_b32_data_in  = reader_fifo_data_out;
  end
  always @* begin
    \$next\b64_b32_valid_in  = 1'h0;
    \$next\b64_b32_valid_in  = reader_fifo_valid_out;
  end
  always @* begin
    \$next\b64_b32_i_busy  = 1'h0;
    \$next\b64_b32_i_busy  = top_nready;
  end
  always @* begin
    \$next\top_valid_in  = 1'h0;
    \$next\top_valid_in  = \$56 ;
  end
  always @* begin
    \$next\top_busy_in  = 1'h0;
    \$next\top_busy_in  = b16_b64_o_busy;
  end
  always @* begin
    \$next\counter_write  = counter_write;
    casez (\$33 )
      1'h1:
          casez (\$35 )
            1'h1:
                /* empty */;
            1'hz:
                \$next\counter_write  = \$37 [31:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\counter_write  = 32'd0;
    endcase
  end
  always @* begin
    \$next\top_pixel_in1  = 12'h000;
    \$next\top_pixel_in1  = b64_b32_data_out[11:0];
  end
  always @* begin
    \$next\top_pixel_in2  = 12'h000;
    \$next\top_pixel_in2  = b64_b32_data_out[23:12];
  end
  always @* begin
    \$next\b16_b64_data_in  = 16'h0000;
    \$next\b16_b64_data_in  = top_data_out;
  end
  always @* begin
    \$next\b16_b64_valid_in  = 1'h0;
    \$next\b16_b64_valid_in  = top_valid_out;
  end
  always @* begin
    \$next\b16_b64_i_busy  = 1'h0;
    \$next\b16_b64_i_busy  = \$58 ;
  end
  always @* begin
    \$next\b16_b64_end_in  = 1'h0;
    \$next\b16_b64_end_in  = top_end_out;
  end
  always @* begin
    \$next\writer_fifo_data_in  = 64'h0000000000000000;
    \$next\writer_fifo_data_in  = b16_b64_data_out;
  end
  always @* begin
    \$next\writer_fifo_end_in  = 1'h0;
    \$next\writer_fifo_end_in  = b16_b64_end_out;
  end
  always @* begin
    \$next\writer_fifo_valid_in  = 1'h0;
    \$next\writer_fifo_valid_in  = b16_b64_valid_out;
  end
  always @* begin
    \$next\writer_fifo_read  = 1'h0;
    \$next\writer_fifo_read  = axihp_writer_data_enable;
  end
  always @* begin
    \$next\dma_axi_lite_in1  = 32'd0;
    \$next\dma_axi_lite_in1  = \$40 ;
  end
  always @* begin
    \$next\axihp_writer_enable  = 1'h0;
    \$next\axihp_writer_enable  = \$60 ;
  end
  always @* begin
    \$next\axihp_writer_data_in  = 64'h0000000000000000;
    \$next\axihp_writer_data_in  = writer_fifo_data_out;
  end
  always @* begin
    \$next\axihp_writer_data_empty  = 1'h0;
    \$next\axihp_writer_data_empty  = \$62 ;
  end
  always @* begin
    \$next\axihp_writer_write_strobe  = 8'h00;
    \$next\axihp_writer_write_strobe  = 8'hff;
    \$verilog_initial_trigger  = \$verilog_initial_trigger ;
  end
  always @* begin
    \$next\axihp_writer_addr_in  = 32'd0;
    \$next\axihp_writer_addr_in  = address_gen_write_address_o;
  end
  always @* begin
    \$next\axihp_writer_addr_empty  = 1'h0;
    \$next\axihp_writer_addr_empty  = \$68 ;
  end
  always @* begin
    \$next\dma_axi_lite_in2  = 32'd0;
    \$next\dma_axi_lite_in2  = address_gen_read_address_o;
  end
  always @* begin
    \$next\dma_axi_lite_in3  = 32'd0;
    \$next\dma_axi_lite_in3  = address_gen_write_address_o;
  end
  always @* begin
    \$next\dma_axi_lite_in4  = 32'd0;
    \$next\dma_axi_lite_in4  = counter_read;
  end
  always @* begin
    \$next\dma_axi_lite_in5  = 32'd0;
    \$next\dma_axi_lite_in5  = counter_write;
  end
  always @* begin
    \$next\dma_axi_lite_in6  = 32'd0;
    \$next\dma_axi_lite_in6  = \$42 ;
  end
  assign \$26  = \$27 ;
  assign \$37  = \$38 ;
  assign axihp_writer_addr_empty = \$next\axihp_writer_addr_empty ;
  assign axihp_writer_addr_in = \$next\axihp_writer_addr_in ;
  assign axihp_writer_write_strobe = \$next\axihp_writer_write_strobe ;
  assign axihp_writer_data_empty = \$next\axihp_writer_data_empty ;
  assign axihp_writer_data_in = \$next\axihp_writer_data_in ;
  assign axihp_writer_enable = \$next\axihp_writer_enable ;
  assign writer_fifo_read = \$next\writer_fifo_read ;
  assign writer_fifo_valid_in = \$next\writer_fifo_valid_in ;
  assign writer_fifo_end_in = \$next\writer_fifo_end_in ;
  assign writer_fifo_data_in = \$next\writer_fifo_data_in ;
  assign b16_b64_end_in = \$next\b16_b64_end_in ;
  assign b16_b64_i_busy = \$next\b16_b64_i_busy ;
  assign b16_b64_valid_in = \$next\b16_b64_valid_in ;
  assign b16_b64_data_in = \$next\b16_b64_data_in ;
  assign top_pixel_in2 = \$next\top_pixel_in2 ;
  assign top_pixel_in1 = \$next\top_pixel_in1 ;
  assign top_busy_in = \$next\top_busy_in ;
  assign top_valid_in = \$next\top_valid_in ;
  assign b64_b32_i_busy = \$next\b64_b32_i_busy ;
  assign b64_b32_valid_in = \$next\b64_b32_valid_in ;
  assign b64_b32_data_in = \$next\b64_b32_data_in ;
  assign reader_fifo_read = \$next\reader_fifo_read ;
  assign reader_fifo_valid_in = \$next\reader_fifo_valid_in ;
  assign reader_fifo_end_in = \$next\reader_fifo_end_in ;
  assign reader_fifo_data_in = \$next\reader_fifo_data_in ;
  assign axihp_reader_addr_empty = \$next\axihp_reader_addr_empty ;
  assign axihp_reader_addr_in = \$next\axihp_reader_addr_in ;
  assign axihp_reader_data_full = \$next\axihp_reader_data_full ;
  assign axihp_reader_enable = \$next\axihp_reader_enable ;
  assign address_gen_write_starting_address = \$next\address_gen_write_starting_address ;
  assign address_gen_write_address_latch = \$next\address_gen_write_address_latch ;
  assign address_gen_read_starting_address = \$next\address_gen_read_starting_address ;
  assign address_gen_read_address_latch = \$next\address_gen_read_address_latch ;
  assign dma_axi_lite_in9 = \$next\dma_axi_lite_in9 ;
  assign dma_axi_lite_in8 = \$next\dma_axi_lite_in8 ;
  assign dma_axi_lite_in7 = \$next\dma_axi_lite_in7 ;
  assign dma_axi_lite_in6 = \$next\dma_axi_lite_in6 ;
  assign dma_axi_lite_in5 = \$next\dma_axi_lite_in5 ;
  assign dma_axi_lite_in4 = \$next\dma_axi_lite_in4 ;
  assign dma_axi_lite_in3 = \$next\dma_axi_lite_in3 ;
  assign dma_axi_lite_in2 = \$next\dma_axi_lite_in2 ;
  assign dma_axi_lite_in1 = \$next\dma_axi_lite_in1 ;
  assign write_end = \$next\write_end ;
  assign read_end = \$next\read_end ;
endmodule

(* \nmigen.hierarchy  = "top.top" *)
(* generator = "nMigen" *)
module \top$1 (full_rst, busy_in, pixel_in1, pixel_in2, valid_in, clk, rst, data_out, valid_out, end_out, nready, full_clk);
  wire \$2 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  (* src = "auto_reset.py:34" *)
  reg \$next\auto_reset_end_in ;
  (* src = "auto_reset.py:37" *)
  reg \$next\auto_reset_hs1_in ;
  (* src = "auto_reset.py:40" *)
  reg \$next\auto_reset_hs2_in ;
  (* src = "nmigen/hdl/mem.py:160" *)
  reg \$next\clk ;
  (* src = "beta_integration.py:36" *)
  reg [15:0] \$next\data_out ;
  (* src = "beta_integration.py:41" *)
  reg \$next\end_out ;
  (* src = "fix_0xff2.py:149" *)
  reg [31:0] \$next\fix_0xff2_data_in ;
  (* src = "fix_0xff2.py:150" *)
  reg [2:0] \$next\fix_0xff2_data_in_ctr ;
  (* src = "fix_0xff2.py:159" *)
  reg \$next\fix_0xff2_end_in ;
  (* src = "fix_0xff2.py:163" *)
  reg \$next\fix_0xff2_i_busy ;
  (* src = "fix_0xff2.py:156" *)
  reg \$next\fix_0xff2_valid_in ;
  (* src = "fix_0xff.py:69" *)
  reg [15:0] \$next\fix_0xff_data_in ;
  (* src = "fix_0xff.py:81" *)
  reg \$next\fix_0xff_end_in ;
  (* src = "fix_0xff.py:79" *)
  reg \$next\fix_0xff_i_busy ;
  (* src = "fix_0xff.py:76" *)
  reg \$next\fix_0xff_valid_in ;
  (* src = "integration_3.py:32" *)
  reg \$next\integration_3_busy_in ;
  (* src = "integration_3.py:22" *)
  reg [11:0] \$next\integration_3_pixel_in ;
  (* src = "integration_3.py:22" *)
  reg [11:0] \$next\integration_3_pixel_in$1 ;
  (* src = "integration_3.py:28" *)
  reg \$next\integration_3_valid_in ;
  (* src = "markers.py:35" *)
  reg [15:0] \$next\markers_data_in ;
  (* src = "markers.py:44" *)
  reg \$next\markers_end_in ;
  (* src = "markers.py:45" *)
  reg \$next\markers_force_end_in ;
  (* src = "markers.py:49" *)
  reg \$next\markers_i_busy ;
  (* src = "markers.py:41" *)
  reg \$next\markers_valid_in ;
  (* src = "beta_integration.py:42" *)
  reg \$next\nready ;
  (* src = "clk_domains.py:5" *)
  reg \$next\rst ;
  (* src = "beta_integration.py:40" *)
  reg \$next\valid_out ;
  (* src = "auto_reset.py:34" *)
  wire auto_reset_end_in;
  (* src = "auto_reset.py:37" *)
  wire auto_reset_hs1_in;
  (* src = "auto_reset.py:40" *)
  wire auto_reset_hs2_in;
  (* src = "auto_reset.py:43" *)
  wire auto_reset_reset_out;
  (* src = "beta_integration.py:43" *)
  input busy_in;
  (* src = "nmigen/hdl/mem.py:160" *)
  output clk;
  (* src = "beta_integration.py:36" *)
  output [15:0] data_out;
  (* src = "beta_integration.py:41" *)
  output end_out;
  (* src = "fix_0xff2.py:149" *)
  wire [31:0] fix_0xff2_data_in;
  (* src = "fix_0xff2.py:150" *)
  wire [2:0] fix_0xff2_data_in_ctr;
  (* src = "fix_0xff2.py:153" *)
  wire [15:0] fix_0xff2_data_out;
  (* src = "fix_0xff2.py:159" *)
  wire fix_0xff2_end_in;
  (* src = "fix_0xff2.py:160" *)
  wire fix_0xff2_end_out;
  (* src = "fix_0xff2.py:163" *)
  wire fix_0xff2_i_busy;
  (* src = "fix_0xff2.py:162" *)
  wire fix_0xff2_o_busy;
  (* src = "fix_0xff2.py:156" *)
  wire fix_0xff2_valid_in;
  (* src = "fix_0xff2.py:157" *)
  wire fix_0xff2_valid_out;
  (* src = "fix_0xff.py:69" *)
  wire [15:0] fix_0xff_data_in;
  (* src = "fix_0xff.py:72" *)
  wire [31:0] fix_0xff_data_out;
  (* src = "fix_0xff.py:73" *)
  wire [2:0] fix_0xff_data_out_ctr;
  (* src = "fix_0xff.py:81" *)
  wire fix_0xff_end_in;
  (* src = "fix_0xff.py:82" *)
  wire fix_0xff_end_out;
  (* src = "fix_0xff.py:79" *)
  wire fix_0xff_i_busy;
  (* src = "fix_0xff.py:78" *)
  wire fix_0xff_o_busy;
  (* src = "fix_0xff.py:76" *)
  wire fix_0xff_valid_in;
  (* src = "fix_0xff.py:77" *)
  wire fix_0xff_valid_out;
  (* src = "clk_domains.py:4" *)
  input full_clk;
  (* src = "clk_domains.py:4" *)
  input full_rst;
  (* src = "integration_3.py:32" *)
  wire integration_3_busy_in;
  (* src = "integration_3.py:25" *)
  wire [15:0] integration_3_data_out;
  (* src = "integration_3.py:30" *)
  wire integration_3_end_out;
  (* src = "integration_1.py:35" *)
  wire integration_3_fend_out;
  (* src = "integration_3.py:31" *)
  wire integration_3_nready;
  (* src = "integration_3.py:22" *)
  wire [11:0] integration_3_pixel_in;
  (* src = "integration_3.py:22" *)
  wire [11:0] \integration_3_pixel_in$1 ;
  (* src = "integration_3.py:28" *)
  wire integration_3_valid_in;
  (* src = "integration_3.py:29" *)
  wire integration_3_valid_out;
  (* src = "markers.py:35" *)
  wire [15:0] markers_data_in;
  (* src = "markers.py:38" *)
  wire [15:0] markers_data_out;
  (* src = "markers.py:44" *)
  wire markers_end_in;
  (* src = "markers.py:46" *)
  wire markers_end_out;
  (* src = "markers.py:45" *)
  wire markers_force_end_in;
  (* src = "markers.py:49" *)
  wire markers_i_busy;
  (* src = "markers.py:48" *)
  wire markers_o_busy;
  (* src = "markers.py:41" *)
  wire markers_valid_in;
  (* src = "markers.py:42" *)
  wire markers_valid_out;
  (* src = "beta_integration.py:42" *)
  output nready;
  (* src = "beta_integration.py:32" *)
  input [11:0] pixel_in1;
  (* src = "beta_integration.py:33" *)
  input [11:0] pixel_in2;
  (* src = "clk_domains.py:5" *)
  output rst;
  (* src = "beta_integration.py:39" *)
  input valid_in;
  (* src = "beta_integration.py:40" *)
  output valid_out;
  assign \$2  = auto_reset_reset_out == (* src = "beta_integration.py:69" *) 1'h1;
  assign \$4  = full_rst == (* src = "beta_integration.py:69" *) 1'h1;
  assign \$6  = \$2  | (* src = "beta_integration.py:69" *) \$4 ;
  assign \$8  = busy_in == (* src = "beta_integration.py:76" *) 1'h0;
  auto_reset auto_reset (
    .clk(clk),
    .end_in(auto_reset_end_in),
    .hs1_in(auto_reset_hs1_in),
    .hs2_in(auto_reset_hs2_in),
    .reset_out(auto_reset_reset_out),
    .rst(rst)
  );
  fix_0xff fix_0xff (
    .clk(clk),
    .data_in(fix_0xff_data_in),
    .data_out(fix_0xff_data_out),
    .data_out_ctr(fix_0xff_data_out_ctr),
    .end_in(fix_0xff_end_in),
    .end_out(fix_0xff_end_out),
    .i_busy(fix_0xff_i_busy),
    .o_busy(fix_0xff_o_busy),
    .rst(rst),
    .valid_in(fix_0xff_valid_in),
    .valid_out(fix_0xff_valid_out)
  );
  fix_0xff2 fix_0xff2 (
    .clk(clk),
    .data_in(fix_0xff2_data_in),
    .data_in_ctr(fix_0xff2_data_in_ctr),
    .data_out(fix_0xff2_data_out),
    .end_in(fix_0xff2_end_in),
    .end_out(fix_0xff2_end_out),
    .i_busy(fix_0xff2_i_busy),
    .o_busy(fix_0xff2_o_busy),
    .rst(rst),
    .valid_in(fix_0xff2_valid_in),
    .valid_out(fix_0xff2_valid_out)
  );
  integration_3 integration_3 (
    .busy_in(integration_3_busy_in),
    .clk(clk),
    .data_out(integration_3_data_out),
    .end_out(integration_3_end_out),
    .fend_out(integration_3_fend_out),
    .full_clk(full_clk),
    .full_rst(full_rst),
    .nready(integration_3_nready),
    .pixel_in(integration_3_pixel_in),
    .\pixel_in$1 (\integration_3_pixel_in$1 ),
    .rst(rst),
    .valid_in(integration_3_valid_in),
    .valid_out(integration_3_valid_out)
  );
  markers markers (
    .clk(clk),
    .data_in(markers_data_in),
    .data_out(markers_data_out),
    .end_in(markers_end_in),
    .end_out(markers_end_out),
    .force_end_in(markers_force_end_in),
    .i_busy(markers_i_busy),
    .o_busy(markers_o_busy),
    .rst(rst),
    .valid_in(markers_valid_in),
    .valid_out(markers_valid_out)
  );
  always @* begin
    \$next\clk  = 1'h0;
    \$next\clk  = full_clk;
  end
  always @* begin
    \$next\rst  = 1'h0;
    \$next\rst  = \$6 ;
  end
  always @* begin
    \$next\fix_0xff_valid_in  = 1'h0;
    \$next\fix_0xff_valid_in  = integration_3_valid_out;
  end
  always @* begin
    \$next\fix_0xff_end_in  = 1'h0;
    \$next\fix_0xff_end_in  = integration_3_end_out;
  end
  always @* begin
    \$next\fix_0xff_i_busy  = 1'h0;
    \$next\fix_0xff_i_busy  = fix_0xff2_o_busy;
  end
  always @* begin
    \$next\fix_0xff2_data_in  = 32'd0;
    \$next\fix_0xff2_data_in  = fix_0xff_data_out;
  end
  always @* begin
    \$next\fix_0xff2_valid_in  = 1'h0;
    \$next\fix_0xff2_valid_in  = fix_0xff_valid_out;
  end
  always @* begin
    \$next\fix_0xff2_end_in  = 1'h0;
    \$next\fix_0xff2_end_in  = fix_0xff_end_out;
  end
  always @* begin
    \$next\fix_0xff2_i_busy  = 1'h0;
    \$next\fix_0xff2_i_busy  = markers_o_busy;
  end
  always @* begin
    \$next\fix_0xff2_data_in_ctr  = 3'h0;
    \$next\fix_0xff2_data_in_ctr  = fix_0xff_data_out_ctr;
  end
  always @* begin
    \$next\markers_data_in  = 16'h0000;
    \$next\markers_data_in  = fix_0xff2_data_out;
  end
  always @* begin
    \$next\markers_valid_in  = 1'h0;
    \$next\markers_valid_in  = fix_0xff2_valid_out;
  end
  always @* begin
    \$next\auto_reset_end_in  = 1'h0;
    \$next\auto_reset_end_in  = end_out;
  end
  always @* begin
    \$next\markers_force_end_in  = 1'h0;
    \$next\markers_force_end_in  = integration_3_fend_out;
  end
  always @* begin
    \$next\markers_end_in  = 1'h0;
    \$next\markers_end_in  = fix_0xff2_end_out;
  end
  always @* begin
    \$next\markers_i_busy  = 1'h0;
    \$next\markers_i_busy  = busy_in;
  end
  always @* begin
    \$next\data_out  = 16'h0000;
    \$next\data_out  = markers_data_out;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = markers_valid_out;
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = markers_end_out;
  end
  always @* begin
    \$next\nready  = 1'h0;
    \$next\nready  = integration_3_nready;
  end
  always @* begin
    \$next\auto_reset_hs1_in  = 1'h0;
    \$next\auto_reset_hs1_in  = valid_out;
  end
  always @* begin
    \$next\auto_reset_hs2_in  = 1'h0;
    \$next\auto_reset_hs2_in  = \$8 ;
  end
  always @* begin
    \$next\integration_3_pixel_in  = 12'h000;
    \$next\integration_3_pixel_in  = pixel_in1;
  end
  always @* begin
    \$next\integration_3_pixel_in$1  = 12'h000;
    \$next\integration_3_pixel_in$1  = pixel_in2;
  end
  always @* begin
    \$next\integration_3_valid_in  = 1'h0;
    \$next\integration_3_valid_in  = valid_in;
  end
  always @* begin
    \$next\integration_3_busy_in  = 1'h0;
    \$next\integration_3_busy_in  = fix_0xff_o_busy;
  end
  always @* begin
    \$next\fix_0xff_data_in  = 16'h0000;
    \$next\fix_0xff_data_in  = integration_3_data_out;
  end
  assign nready = \$next\nready ;
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign data_out = \$next\data_out ;
  assign markers_i_busy = \$next\markers_i_busy ;
  assign markers_end_in = \$next\markers_end_in ;
  assign markers_force_end_in = \$next\markers_force_end_in ;
  assign markers_valid_in = \$next\markers_valid_in ;
  assign markers_data_in = \$next\markers_data_in ;
  assign fix_0xff2_data_in_ctr = \$next\fix_0xff2_data_in_ctr ;
  assign fix_0xff2_i_busy = \$next\fix_0xff2_i_busy ;
  assign fix_0xff2_end_in = \$next\fix_0xff2_end_in ;
  assign fix_0xff2_valid_in = \$next\fix_0xff2_valid_in ;
  assign fix_0xff2_data_in = \$next\fix_0xff2_data_in ;
  assign fix_0xff_i_busy = \$next\fix_0xff_i_busy ;
  assign fix_0xff_end_in = \$next\fix_0xff_end_in ;
  assign fix_0xff_valid_in = \$next\fix_0xff_valid_in ;
  assign fix_0xff_data_in = \$next\fix_0xff_data_in ;
  assign integration_3_busy_in = \$next\integration_3_busy_in ;
  assign integration_3_valid_in = \$next\integration_3_valid_in ;
  assign \integration_3_pixel_in$1  = \$next\integration_3_pixel_in$1 ;
  assign integration_3_pixel_in = \$next\integration_3_pixel_in ;
  assign auto_reset_hs2_in = \$next\auto_reset_hs2_in ;
  assign auto_reset_hs1_in = \$next\auto_reset_hs1_in ;
  assign auto_reset_end_in = \$next\auto_reset_end_in ;
  assign rst = \$next\rst ;
  assign clk = \$next\clk ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.lj92_pipeline_fifo.fifo.unbuffered" *)
(* generator = "nMigen" *)
module unbuffered(we, replace, re, rst, clk, writable, readable, dout, level, din);
  wire \$10 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire [9:0] \$23 ;
  wire [9:0] \$24 ;
  wire [9:0] \$26 ;
  wire \$27 ;
  wire \$30 ;
  wire [9:0] \$32 ;
  wire [9:0] \$33 ;
  wire [9:0] \$35 ;
  wire \$36 ;
  wire \$39 ;
  wire \$4 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$46 ;
  wire \$49 ;
  wire [9:0] \$51 ;
  wire [9:0] \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$57 ;
  wire \$59 ;
  wire [9:0] \$6 ;
  wire \$61 ;
  wire \$64 ;
  wire [9:0] \$66 ;
  wire [9:0] \$67 ;
  wire [9:0] \$7 ;
  wire [9:0] \$9 ;
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [8:0] \$next\consume ;
  (* src = "nmigen/lib/fifo.py:69" *)
  reg [62:0] \$next\dout ;
  (* src = "nmigen/lib/fifo.py:138" *)
  reg [8:0] \$next\level ;
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [8:0] \$next\produce ;
  (* src = "nmigen/hdl/mem.py:81" *)
  reg [8:0] \$next\rdport_storage_r_addr ;
  (* src = "nmigen/hdl/mem.py:85" *)
  reg \$next\rdport_storage_r_en ;
  (* src = "nmigen/lib/fifo.py:70" *)
  reg \$next\readable ;
  (* src = "nmigen/lib/fifo.py:66" *)
  reg \$next\writable ;
  (* src = "nmigen/hdl/mem.py:146" *)
  reg [8:0] \$next\wrport_storage_w_addr ;
  (* src = "nmigen/hdl/mem.py:148" *)
  reg [62:0] \$next\wrport_storage_w_data ;
  (* src = "nmigen/hdl/mem.py:150" *)
  reg \$next\wrport_storage_w_en ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 9'h000 *)
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [8:0] consume = 9'h000;
  (* src = "nmigen/lib/fifo.py:65" *)
  input [62:0] din;
  (* src = "nmigen/lib/fifo.py:69" *)
  output [62:0] dout;
  (* init = 9'h000 *)
  (* src = "nmigen/lib/fifo.py:138" *)
  output [8:0] level;
  reg [8:0] level = 9'h000;
  (* init = 9'h000 *)
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [8:0] produce = 9'h000;
  (* src = "nmigen/hdl/mem.py:81" *)
  wire [8:0] rdport_storage_r_addr;
  (* src = "nmigen/hdl/mem.py:83" *)
  wire [62:0] rdport_storage_r_data;
  (* src = "nmigen/hdl/mem.py:85" *)
  wire rdport_storage_r_en;
  (* src = "nmigen/lib/fifo.py:71" *)
  input re;
  (* src = "nmigen/lib/fifo.py:70" *)
  output readable;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "nmigen/lib/fifo.py:67" *)
  input we;
  (* src = "nmigen/lib/fifo.py:66" *)
  output writable;
  (* src = "nmigen/hdl/mem.py:146" *)
  wire [8:0] wrport_storage_w_addr;
  (* src = "nmigen/hdl/mem.py:148" *)
  wire [62:0] wrport_storage_w_data;
  (* src = "nmigen/hdl/mem.py:150" *)
  wire wrport_storage_w_en;
  assign \$10  = produce == (* src = "nmigen/lib/fifo.py:102" *) 1'h0;
  assign \$9  = \$10  ? (* src = "nmigen/lib/fifo.py:164" *) 10'h1fe : \$7 ;
  assign \$13  = writable | (* src = "nmigen/lib/fifo.py:161" *) replace;
  assign \$15  = we & (* src = "nmigen/lib/fifo.py:161" *) \$13 ;
  assign \$17  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$19  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$21  = \$17  & (* src = "nmigen/lib/fifo.py:149" *) \$19 ;
  assign \$24  = produce + (* src = "nmigen/lib/fifo.py:95" *) 1'h1;
  assign \$27  = produce == (* src = "nmigen/lib/fifo.py:95" *) 9'h1fe;
  assign \$26  = \$27  ? (* src = "nmigen/lib/fifo.py:166" *) 10'h000 : \$24 ;
  assign \$2  = level != (* src = "nmigen/lib/fifo.py:144" *) 9'h1ff;
  assign \$30  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$33  = consume + (* src = "nmigen/lib/fifo.py:95" *) 1'h1;
  assign \$36  = consume == (* src = "nmigen/lib/fifo.py:95" *) 9'h1fe;
  assign \$35  = \$36  ? (* src = "nmigen/lib/fifo.py:175" *) 10'h000 : \$33 ;
  assign \$39  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$41  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$43  = \$39  & (* src = "nmigen/lib/fifo.py:149" *) \$41 ;
  assign \$46  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$45  = ~ (* src = "nmigen/lib/fifo.py:177" *) \$46 ;
  assign \$4  = level != (* src = "nmigen/lib/fifo.py:145" *) 1'h0;
  assign \$49  = \$43  & (* src = "nmigen/lib/fifo.py:177" *) \$45 ;
  assign \$52  = level + (* src = "nmigen/lib/fifo.py:178" *) 1'h1;
  assign \$54  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$57  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$59  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$61  = \$57  & (* src = "nmigen/lib/fifo.py:149" *) \$59 ;
  assign \$56  = ~ (* src = "nmigen/lib/fifo.py:179" *) \$61 ;
  assign \$64  = \$54  & (* src = "nmigen/lib/fifo.py:179" *) \$56 ;
  assign \$67  = level - (* src = "nmigen/lib/fifo.py:180" *) 1'h1;
  assign \$7  = produce - (* src = "nmigen/lib/fifo.py:102" *) 1'h1;
  always @(posedge clk)
      level <= \$next\level ;
  always @(posedge clk)
      consume <= \$next\consume ;
  always @(posedge clk)
      produce <= \$next\produce ;
  reg [62:0] storage [510:0];
  initial begin
    storage[0] = 63'h0000000000000000;
    storage[1] = 63'h0000000000000000;
    storage[2] = 63'h0000000000000000;
    storage[3] = 63'h0000000000000000;
    storage[4] = 63'h0000000000000000;
    storage[5] = 63'h0000000000000000;
    storage[6] = 63'h0000000000000000;
    storage[7] = 63'h0000000000000000;
    storage[8] = 63'h0000000000000000;
    storage[9] = 63'h0000000000000000;
    storage[10] = 63'h0000000000000000;
    storage[11] = 63'h0000000000000000;
    storage[12] = 63'h0000000000000000;
    storage[13] = 63'h0000000000000000;
    storage[14] = 63'h0000000000000000;
    storage[15] = 63'h0000000000000000;
    storage[16] = 63'h0000000000000000;
    storage[17] = 63'h0000000000000000;
    storage[18] = 63'h0000000000000000;
    storage[19] = 63'h0000000000000000;
    storage[20] = 63'h0000000000000000;
    storage[21] = 63'h0000000000000000;
    storage[22] = 63'h0000000000000000;
    storage[23] = 63'h0000000000000000;
    storage[24] = 63'h0000000000000000;
    storage[25] = 63'h0000000000000000;
    storage[26] = 63'h0000000000000000;
    storage[27] = 63'h0000000000000000;
    storage[28] = 63'h0000000000000000;
    storage[29] = 63'h0000000000000000;
    storage[30] = 63'h0000000000000000;
    storage[31] = 63'h0000000000000000;
    storage[32] = 63'h0000000000000000;
    storage[33] = 63'h0000000000000000;
    storage[34] = 63'h0000000000000000;
    storage[35] = 63'h0000000000000000;
    storage[36] = 63'h0000000000000000;
    storage[37] = 63'h0000000000000000;
    storage[38] = 63'h0000000000000000;
    storage[39] = 63'h0000000000000000;
    storage[40] = 63'h0000000000000000;
    storage[41] = 63'h0000000000000000;
    storage[42] = 63'h0000000000000000;
    storage[43] = 63'h0000000000000000;
    storage[44] = 63'h0000000000000000;
    storage[45] = 63'h0000000000000000;
    storage[46] = 63'h0000000000000000;
    storage[47] = 63'h0000000000000000;
    storage[48] = 63'h0000000000000000;
    storage[49] = 63'h0000000000000000;
    storage[50] = 63'h0000000000000000;
    storage[51] = 63'h0000000000000000;
    storage[52] = 63'h0000000000000000;
    storage[53] = 63'h0000000000000000;
    storage[54] = 63'h0000000000000000;
    storage[55] = 63'h0000000000000000;
    storage[56] = 63'h0000000000000000;
    storage[57] = 63'h0000000000000000;
    storage[58] = 63'h0000000000000000;
    storage[59] = 63'h0000000000000000;
    storage[60] = 63'h0000000000000000;
    storage[61] = 63'h0000000000000000;
    storage[62] = 63'h0000000000000000;
    storage[63] = 63'h0000000000000000;
    storage[64] = 63'h0000000000000000;
    storage[65] = 63'h0000000000000000;
    storage[66] = 63'h0000000000000000;
    storage[67] = 63'h0000000000000000;
    storage[68] = 63'h0000000000000000;
    storage[69] = 63'h0000000000000000;
    storage[70] = 63'h0000000000000000;
    storage[71] = 63'h0000000000000000;
    storage[72] = 63'h0000000000000000;
    storage[73] = 63'h0000000000000000;
    storage[74] = 63'h0000000000000000;
    storage[75] = 63'h0000000000000000;
    storage[76] = 63'h0000000000000000;
    storage[77] = 63'h0000000000000000;
    storage[78] = 63'h0000000000000000;
    storage[79] = 63'h0000000000000000;
    storage[80] = 63'h0000000000000000;
    storage[81] = 63'h0000000000000000;
    storage[82] = 63'h0000000000000000;
    storage[83] = 63'h0000000000000000;
    storage[84] = 63'h0000000000000000;
    storage[85] = 63'h0000000000000000;
    storage[86] = 63'h0000000000000000;
    storage[87] = 63'h0000000000000000;
    storage[88] = 63'h0000000000000000;
    storage[89] = 63'h0000000000000000;
    storage[90] = 63'h0000000000000000;
    storage[91] = 63'h0000000000000000;
    storage[92] = 63'h0000000000000000;
    storage[93] = 63'h0000000000000000;
    storage[94] = 63'h0000000000000000;
    storage[95] = 63'h0000000000000000;
    storage[96] = 63'h0000000000000000;
    storage[97] = 63'h0000000000000000;
    storage[98] = 63'h0000000000000000;
    storage[99] = 63'h0000000000000000;
    storage[100] = 63'h0000000000000000;
    storage[101] = 63'h0000000000000000;
    storage[102] = 63'h0000000000000000;
    storage[103] = 63'h0000000000000000;
    storage[104] = 63'h0000000000000000;
    storage[105] = 63'h0000000000000000;
    storage[106] = 63'h0000000000000000;
    storage[107] = 63'h0000000000000000;
    storage[108] = 63'h0000000000000000;
    storage[109] = 63'h0000000000000000;
    storage[110] = 63'h0000000000000000;
    storage[111] = 63'h0000000000000000;
    storage[112] = 63'h0000000000000000;
    storage[113] = 63'h0000000000000000;
    storage[114] = 63'h0000000000000000;
    storage[115] = 63'h0000000000000000;
    storage[116] = 63'h0000000000000000;
    storage[117] = 63'h0000000000000000;
    storage[118] = 63'h0000000000000000;
    storage[119] = 63'h0000000000000000;
    storage[120] = 63'h0000000000000000;
    storage[121] = 63'h0000000000000000;
    storage[122] = 63'h0000000000000000;
    storage[123] = 63'h0000000000000000;
    storage[124] = 63'h0000000000000000;
    storage[125] = 63'h0000000000000000;
    storage[126] = 63'h0000000000000000;
    storage[127] = 63'h0000000000000000;
    storage[128] = 63'h0000000000000000;
    storage[129] = 63'h0000000000000000;
    storage[130] = 63'h0000000000000000;
    storage[131] = 63'h0000000000000000;
    storage[132] = 63'h0000000000000000;
    storage[133] = 63'h0000000000000000;
    storage[134] = 63'h0000000000000000;
    storage[135] = 63'h0000000000000000;
    storage[136] = 63'h0000000000000000;
    storage[137] = 63'h0000000000000000;
    storage[138] = 63'h0000000000000000;
    storage[139] = 63'h0000000000000000;
    storage[140] = 63'h0000000000000000;
    storage[141] = 63'h0000000000000000;
    storage[142] = 63'h0000000000000000;
    storage[143] = 63'h0000000000000000;
    storage[144] = 63'h0000000000000000;
    storage[145] = 63'h0000000000000000;
    storage[146] = 63'h0000000000000000;
    storage[147] = 63'h0000000000000000;
    storage[148] = 63'h0000000000000000;
    storage[149] = 63'h0000000000000000;
    storage[150] = 63'h0000000000000000;
    storage[151] = 63'h0000000000000000;
    storage[152] = 63'h0000000000000000;
    storage[153] = 63'h0000000000000000;
    storage[154] = 63'h0000000000000000;
    storage[155] = 63'h0000000000000000;
    storage[156] = 63'h0000000000000000;
    storage[157] = 63'h0000000000000000;
    storage[158] = 63'h0000000000000000;
    storage[159] = 63'h0000000000000000;
    storage[160] = 63'h0000000000000000;
    storage[161] = 63'h0000000000000000;
    storage[162] = 63'h0000000000000000;
    storage[163] = 63'h0000000000000000;
    storage[164] = 63'h0000000000000000;
    storage[165] = 63'h0000000000000000;
    storage[166] = 63'h0000000000000000;
    storage[167] = 63'h0000000000000000;
    storage[168] = 63'h0000000000000000;
    storage[169] = 63'h0000000000000000;
    storage[170] = 63'h0000000000000000;
    storage[171] = 63'h0000000000000000;
    storage[172] = 63'h0000000000000000;
    storage[173] = 63'h0000000000000000;
    storage[174] = 63'h0000000000000000;
    storage[175] = 63'h0000000000000000;
    storage[176] = 63'h0000000000000000;
    storage[177] = 63'h0000000000000000;
    storage[178] = 63'h0000000000000000;
    storage[179] = 63'h0000000000000000;
    storage[180] = 63'h0000000000000000;
    storage[181] = 63'h0000000000000000;
    storage[182] = 63'h0000000000000000;
    storage[183] = 63'h0000000000000000;
    storage[184] = 63'h0000000000000000;
    storage[185] = 63'h0000000000000000;
    storage[186] = 63'h0000000000000000;
    storage[187] = 63'h0000000000000000;
    storage[188] = 63'h0000000000000000;
    storage[189] = 63'h0000000000000000;
    storage[190] = 63'h0000000000000000;
    storage[191] = 63'h0000000000000000;
    storage[192] = 63'h0000000000000000;
    storage[193] = 63'h0000000000000000;
    storage[194] = 63'h0000000000000000;
    storage[195] = 63'h0000000000000000;
    storage[196] = 63'h0000000000000000;
    storage[197] = 63'h0000000000000000;
    storage[198] = 63'h0000000000000000;
    storage[199] = 63'h0000000000000000;
    storage[200] = 63'h0000000000000000;
    storage[201] = 63'h0000000000000000;
    storage[202] = 63'h0000000000000000;
    storage[203] = 63'h0000000000000000;
    storage[204] = 63'h0000000000000000;
    storage[205] = 63'h0000000000000000;
    storage[206] = 63'h0000000000000000;
    storage[207] = 63'h0000000000000000;
    storage[208] = 63'h0000000000000000;
    storage[209] = 63'h0000000000000000;
    storage[210] = 63'h0000000000000000;
    storage[211] = 63'h0000000000000000;
    storage[212] = 63'h0000000000000000;
    storage[213] = 63'h0000000000000000;
    storage[214] = 63'h0000000000000000;
    storage[215] = 63'h0000000000000000;
    storage[216] = 63'h0000000000000000;
    storage[217] = 63'h0000000000000000;
    storage[218] = 63'h0000000000000000;
    storage[219] = 63'h0000000000000000;
    storage[220] = 63'h0000000000000000;
    storage[221] = 63'h0000000000000000;
    storage[222] = 63'h0000000000000000;
    storage[223] = 63'h0000000000000000;
    storage[224] = 63'h0000000000000000;
    storage[225] = 63'h0000000000000000;
    storage[226] = 63'h0000000000000000;
    storage[227] = 63'h0000000000000000;
    storage[228] = 63'h0000000000000000;
    storage[229] = 63'h0000000000000000;
    storage[230] = 63'h0000000000000000;
    storage[231] = 63'h0000000000000000;
    storage[232] = 63'h0000000000000000;
    storage[233] = 63'h0000000000000000;
    storage[234] = 63'h0000000000000000;
    storage[235] = 63'h0000000000000000;
    storage[236] = 63'h0000000000000000;
    storage[237] = 63'h0000000000000000;
    storage[238] = 63'h0000000000000000;
    storage[239] = 63'h0000000000000000;
    storage[240] = 63'h0000000000000000;
    storage[241] = 63'h0000000000000000;
    storage[242] = 63'h0000000000000000;
    storage[243] = 63'h0000000000000000;
    storage[244] = 63'h0000000000000000;
    storage[245] = 63'h0000000000000000;
    storage[246] = 63'h0000000000000000;
    storage[247] = 63'h0000000000000000;
    storage[248] = 63'h0000000000000000;
    storage[249] = 63'h0000000000000000;
    storage[250] = 63'h0000000000000000;
    storage[251] = 63'h0000000000000000;
    storage[252] = 63'h0000000000000000;
    storage[253] = 63'h0000000000000000;
    storage[254] = 63'h0000000000000000;
    storage[255] = 63'h0000000000000000;
    storage[256] = 63'h0000000000000000;
    storage[257] = 63'h0000000000000000;
    storage[258] = 63'h0000000000000000;
    storage[259] = 63'h0000000000000000;
    storage[260] = 63'h0000000000000000;
    storage[261] = 63'h0000000000000000;
    storage[262] = 63'h0000000000000000;
    storage[263] = 63'h0000000000000000;
    storage[264] = 63'h0000000000000000;
    storage[265] = 63'h0000000000000000;
    storage[266] = 63'h0000000000000000;
    storage[267] = 63'h0000000000000000;
    storage[268] = 63'h0000000000000000;
    storage[269] = 63'h0000000000000000;
    storage[270] = 63'h0000000000000000;
    storage[271] = 63'h0000000000000000;
    storage[272] = 63'h0000000000000000;
    storage[273] = 63'h0000000000000000;
    storage[274] = 63'h0000000000000000;
    storage[275] = 63'h0000000000000000;
    storage[276] = 63'h0000000000000000;
    storage[277] = 63'h0000000000000000;
    storage[278] = 63'h0000000000000000;
    storage[279] = 63'h0000000000000000;
    storage[280] = 63'h0000000000000000;
    storage[281] = 63'h0000000000000000;
    storage[282] = 63'h0000000000000000;
    storage[283] = 63'h0000000000000000;
    storage[284] = 63'h0000000000000000;
    storage[285] = 63'h0000000000000000;
    storage[286] = 63'h0000000000000000;
    storage[287] = 63'h0000000000000000;
    storage[288] = 63'h0000000000000000;
    storage[289] = 63'h0000000000000000;
    storage[290] = 63'h0000000000000000;
    storage[291] = 63'h0000000000000000;
    storage[292] = 63'h0000000000000000;
    storage[293] = 63'h0000000000000000;
    storage[294] = 63'h0000000000000000;
    storage[295] = 63'h0000000000000000;
    storage[296] = 63'h0000000000000000;
    storage[297] = 63'h0000000000000000;
    storage[298] = 63'h0000000000000000;
    storage[299] = 63'h0000000000000000;
    storage[300] = 63'h0000000000000000;
    storage[301] = 63'h0000000000000000;
    storage[302] = 63'h0000000000000000;
    storage[303] = 63'h0000000000000000;
    storage[304] = 63'h0000000000000000;
    storage[305] = 63'h0000000000000000;
    storage[306] = 63'h0000000000000000;
    storage[307] = 63'h0000000000000000;
    storage[308] = 63'h0000000000000000;
    storage[309] = 63'h0000000000000000;
    storage[310] = 63'h0000000000000000;
    storage[311] = 63'h0000000000000000;
    storage[312] = 63'h0000000000000000;
    storage[313] = 63'h0000000000000000;
    storage[314] = 63'h0000000000000000;
    storage[315] = 63'h0000000000000000;
    storage[316] = 63'h0000000000000000;
    storage[317] = 63'h0000000000000000;
    storage[318] = 63'h0000000000000000;
    storage[319] = 63'h0000000000000000;
    storage[320] = 63'h0000000000000000;
    storage[321] = 63'h0000000000000000;
    storage[322] = 63'h0000000000000000;
    storage[323] = 63'h0000000000000000;
    storage[324] = 63'h0000000000000000;
    storage[325] = 63'h0000000000000000;
    storage[326] = 63'h0000000000000000;
    storage[327] = 63'h0000000000000000;
    storage[328] = 63'h0000000000000000;
    storage[329] = 63'h0000000000000000;
    storage[330] = 63'h0000000000000000;
    storage[331] = 63'h0000000000000000;
    storage[332] = 63'h0000000000000000;
    storage[333] = 63'h0000000000000000;
    storage[334] = 63'h0000000000000000;
    storage[335] = 63'h0000000000000000;
    storage[336] = 63'h0000000000000000;
    storage[337] = 63'h0000000000000000;
    storage[338] = 63'h0000000000000000;
    storage[339] = 63'h0000000000000000;
    storage[340] = 63'h0000000000000000;
    storage[341] = 63'h0000000000000000;
    storage[342] = 63'h0000000000000000;
    storage[343] = 63'h0000000000000000;
    storage[344] = 63'h0000000000000000;
    storage[345] = 63'h0000000000000000;
    storage[346] = 63'h0000000000000000;
    storage[347] = 63'h0000000000000000;
    storage[348] = 63'h0000000000000000;
    storage[349] = 63'h0000000000000000;
    storage[350] = 63'h0000000000000000;
    storage[351] = 63'h0000000000000000;
    storage[352] = 63'h0000000000000000;
    storage[353] = 63'h0000000000000000;
    storage[354] = 63'h0000000000000000;
    storage[355] = 63'h0000000000000000;
    storage[356] = 63'h0000000000000000;
    storage[357] = 63'h0000000000000000;
    storage[358] = 63'h0000000000000000;
    storage[359] = 63'h0000000000000000;
    storage[360] = 63'h0000000000000000;
    storage[361] = 63'h0000000000000000;
    storage[362] = 63'h0000000000000000;
    storage[363] = 63'h0000000000000000;
    storage[364] = 63'h0000000000000000;
    storage[365] = 63'h0000000000000000;
    storage[366] = 63'h0000000000000000;
    storage[367] = 63'h0000000000000000;
    storage[368] = 63'h0000000000000000;
    storage[369] = 63'h0000000000000000;
    storage[370] = 63'h0000000000000000;
    storage[371] = 63'h0000000000000000;
    storage[372] = 63'h0000000000000000;
    storage[373] = 63'h0000000000000000;
    storage[374] = 63'h0000000000000000;
    storage[375] = 63'h0000000000000000;
    storage[376] = 63'h0000000000000000;
    storage[377] = 63'h0000000000000000;
    storage[378] = 63'h0000000000000000;
    storage[379] = 63'h0000000000000000;
    storage[380] = 63'h0000000000000000;
    storage[381] = 63'h0000000000000000;
    storage[382] = 63'h0000000000000000;
    storage[383] = 63'h0000000000000000;
    storage[384] = 63'h0000000000000000;
    storage[385] = 63'h0000000000000000;
    storage[386] = 63'h0000000000000000;
    storage[387] = 63'h0000000000000000;
    storage[388] = 63'h0000000000000000;
    storage[389] = 63'h0000000000000000;
    storage[390] = 63'h0000000000000000;
    storage[391] = 63'h0000000000000000;
    storage[392] = 63'h0000000000000000;
    storage[393] = 63'h0000000000000000;
    storage[394] = 63'h0000000000000000;
    storage[395] = 63'h0000000000000000;
    storage[396] = 63'h0000000000000000;
    storage[397] = 63'h0000000000000000;
    storage[398] = 63'h0000000000000000;
    storage[399] = 63'h0000000000000000;
    storage[400] = 63'h0000000000000000;
    storage[401] = 63'h0000000000000000;
    storage[402] = 63'h0000000000000000;
    storage[403] = 63'h0000000000000000;
    storage[404] = 63'h0000000000000000;
    storage[405] = 63'h0000000000000000;
    storage[406] = 63'h0000000000000000;
    storage[407] = 63'h0000000000000000;
    storage[408] = 63'h0000000000000000;
    storage[409] = 63'h0000000000000000;
    storage[410] = 63'h0000000000000000;
    storage[411] = 63'h0000000000000000;
    storage[412] = 63'h0000000000000000;
    storage[413] = 63'h0000000000000000;
    storage[414] = 63'h0000000000000000;
    storage[415] = 63'h0000000000000000;
    storage[416] = 63'h0000000000000000;
    storage[417] = 63'h0000000000000000;
    storage[418] = 63'h0000000000000000;
    storage[419] = 63'h0000000000000000;
    storage[420] = 63'h0000000000000000;
    storage[421] = 63'h0000000000000000;
    storage[422] = 63'h0000000000000000;
    storage[423] = 63'h0000000000000000;
    storage[424] = 63'h0000000000000000;
    storage[425] = 63'h0000000000000000;
    storage[426] = 63'h0000000000000000;
    storage[427] = 63'h0000000000000000;
    storage[428] = 63'h0000000000000000;
    storage[429] = 63'h0000000000000000;
    storage[430] = 63'h0000000000000000;
    storage[431] = 63'h0000000000000000;
    storage[432] = 63'h0000000000000000;
    storage[433] = 63'h0000000000000000;
    storage[434] = 63'h0000000000000000;
    storage[435] = 63'h0000000000000000;
    storage[436] = 63'h0000000000000000;
    storage[437] = 63'h0000000000000000;
    storage[438] = 63'h0000000000000000;
    storage[439] = 63'h0000000000000000;
    storage[440] = 63'h0000000000000000;
    storage[441] = 63'h0000000000000000;
    storage[442] = 63'h0000000000000000;
    storage[443] = 63'h0000000000000000;
    storage[444] = 63'h0000000000000000;
    storage[445] = 63'h0000000000000000;
    storage[446] = 63'h0000000000000000;
    storage[447] = 63'h0000000000000000;
    storage[448] = 63'h0000000000000000;
    storage[449] = 63'h0000000000000000;
    storage[450] = 63'h0000000000000000;
    storage[451] = 63'h0000000000000000;
    storage[452] = 63'h0000000000000000;
    storage[453] = 63'h0000000000000000;
    storage[454] = 63'h0000000000000000;
    storage[455] = 63'h0000000000000000;
    storage[456] = 63'h0000000000000000;
    storage[457] = 63'h0000000000000000;
    storage[458] = 63'h0000000000000000;
    storage[459] = 63'h0000000000000000;
    storage[460] = 63'h0000000000000000;
    storage[461] = 63'h0000000000000000;
    storage[462] = 63'h0000000000000000;
    storage[463] = 63'h0000000000000000;
    storage[464] = 63'h0000000000000000;
    storage[465] = 63'h0000000000000000;
    storage[466] = 63'h0000000000000000;
    storage[467] = 63'h0000000000000000;
    storage[468] = 63'h0000000000000000;
    storage[469] = 63'h0000000000000000;
    storage[470] = 63'h0000000000000000;
    storage[471] = 63'h0000000000000000;
    storage[472] = 63'h0000000000000000;
    storage[473] = 63'h0000000000000000;
    storage[474] = 63'h0000000000000000;
    storage[475] = 63'h0000000000000000;
    storage[476] = 63'h0000000000000000;
    storage[477] = 63'h0000000000000000;
    storage[478] = 63'h0000000000000000;
    storage[479] = 63'h0000000000000000;
    storage[480] = 63'h0000000000000000;
    storage[481] = 63'h0000000000000000;
    storage[482] = 63'h0000000000000000;
    storage[483] = 63'h0000000000000000;
    storage[484] = 63'h0000000000000000;
    storage[485] = 63'h0000000000000000;
    storage[486] = 63'h0000000000000000;
    storage[487] = 63'h0000000000000000;
    storage[488] = 63'h0000000000000000;
    storage[489] = 63'h0000000000000000;
    storage[490] = 63'h0000000000000000;
    storage[491] = 63'h0000000000000000;
    storage[492] = 63'h0000000000000000;
    storage[493] = 63'h0000000000000000;
    storage[494] = 63'h0000000000000000;
    storage[495] = 63'h0000000000000000;
    storage[496] = 63'h0000000000000000;
    storage[497] = 63'h0000000000000000;
    storage[498] = 63'h0000000000000000;
    storage[499] = 63'h0000000000000000;
    storage[500] = 63'h0000000000000000;
    storage[501] = 63'h0000000000000000;
    storage[502] = 63'h0000000000000000;
    storage[503] = 63'h0000000000000000;
    storage[504] = 63'h0000000000000000;
    storage[505] = 63'h0000000000000000;
    storage[506] = 63'h0000000000000000;
    storage[507] = 63'h0000000000000000;
    storage[508] = 63'h0000000000000000;
    storage[509] = 63'h0000000000000000;
    storage[510] = 63'h0000000000000000;
  end
  reg [62:0] _0_;
  always @(posedge clk) begin
    if (\$next\rdport_storage_r_en ) _0_ <= storage[\$next\rdport_storage_r_addr ];
    if (\$next\wrport_storage_w_en ) storage[\$next\wrport_storage_w_addr ] <= \$next\wrport_storage_w_data ;
  end
  assign rdport_storage_r_data = _0_;
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = \$2 ;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = \$4 ;
  end
  always @* begin
    \$next\level  = level;
    casez (\$49 )
      1'h1:
          \$next\level  = \$51 [8:0];
    endcase
    casez (\$64 )
      1'h1:
          \$next\level  = \$66 [8:0];
    endcase
    casez (rst)
      1'h1:
          \$next\level  = 9'h000;
    endcase
  end
  always @* begin
    \$next\wrport_storage_w_addr  = 9'h000;
    \$next\wrport_storage_w_addr  = produce;
    casez (replace)
      1'h1:
          \$next\wrport_storage_w_addr  = \$6 [8:0];
    endcase
  end
  always @* begin
    \$next\wrport_storage_w_data  = 63'h0000000000000000;
    \$next\wrport_storage_w_data  = din;
  end
  always @* begin
    \$next\wrport_storage_w_en  = 1'h0;
    \$next\wrport_storage_w_en  = \$15 ;
  end
  always @* begin
    \$next\produce  = produce;
    casez (\$21 )
      1'h1:
          \$next\produce  = \$23 [8:0];
    endcase
    casez (rst)
      1'h1:
          \$next\produce  = 9'h000;
    endcase
  end
  always @* begin
    \$next\rdport_storage_r_addr  = 9'h000;
    \$next\rdport_storage_r_addr  = consume;
  end
  always @* begin
    \$next\dout  = 63'h0000000000000000;
    \$next\dout  = rdport_storage_r_data;
  end
  always @* begin
    \$next\rdport_storage_r_en  = 1'h0;
    \$next\rdport_storage_r_en  = re;
  end
  always @* begin
    \$next\consume  = consume;
    casez (\$30 )
      1'h1:
          \$next\consume  = \$32 [8:0];
    endcase
    casez (rst)
      1'h1:
          \$next\consume  = 9'h000;
    endcase
  end
  assign \$6  = \$9 ;
  assign \$23  = \$26 ;
  assign \$32  = \$35 ;
  assign \$51  = \$52 ;
  assign \$66  = \$67 ;
  assign rdport_storage_r_en = \$next\rdport_storage_r_en ;
  assign dout = \$next\dout ;
  assign rdport_storage_r_addr = \$next\rdport_storage_r_addr ;
  assign wrport_storage_w_en = \$next\wrport_storage_w_en ;
  assign wrport_storage_w_data = \$next\wrport_storage_w_data ;
  assign wrport_storage_w_addr = \$next\wrport_storage_w_addr ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.integration_2.converter_fifo.fifo.unbuffered" *)
(* generator = "nMigen" *)
module \unbuffered$7 (we, replace, re, rst, clk, writable, readable, dout, level, din);
  wire \$10 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$2 ;
  wire \$21 ;
  wire [9:0] \$23 ;
  wire [9:0] \$24 ;
  wire [9:0] \$26 ;
  wire \$27 ;
  wire \$30 ;
  wire [9:0] \$32 ;
  wire [9:0] \$33 ;
  wire [9:0] \$35 ;
  wire \$36 ;
  wire \$39 ;
  wire \$4 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$46 ;
  wire \$49 ;
  wire [9:0] \$51 ;
  wire [9:0] \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$57 ;
  wire \$59 ;
  wire [9:0] \$6 ;
  wire \$61 ;
  wire \$64 ;
  wire [9:0] \$66 ;
  wire [9:0] \$67 ;
  wire [9:0] \$7 ;
  wire [9:0] \$9 ;
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [8:0] \$next\consume ;
  (* src = "nmigen/lib/fifo.py:69" *)
  reg [35:0] \$next\dout ;
  (* src = "nmigen/lib/fifo.py:138" *)
  reg [8:0] \$next\level ;
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [8:0] \$next\produce ;
  (* src = "nmigen/hdl/mem.py:81" *)
  reg [8:0] \$next\rdport_storage_r_addr ;
  (* src = "nmigen/hdl/mem.py:85" *)
  reg \$next\rdport_storage_r_en ;
  (* src = "nmigen/lib/fifo.py:70" *)
  reg \$next\readable ;
  (* src = "nmigen/lib/fifo.py:66" *)
  reg \$next\writable ;
  (* src = "nmigen/hdl/mem.py:146" *)
  reg [8:0] \$next\wrport_storage_w_addr ;
  (* src = "nmigen/hdl/mem.py:148" *)
  reg [35:0] \$next\wrport_storage_w_data ;
  (* src = "nmigen/hdl/mem.py:150" *)
  reg \$next\wrport_storage_w_en ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 9'h000 *)
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [8:0] consume = 9'h000;
  (* src = "nmigen/lib/fifo.py:65" *)
  input [35:0] din;
  (* src = "nmigen/lib/fifo.py:69" *)
  output [35:0] dout;
  (* init = 9'h000 *)
  (* src = "nmigen/lib/fifo.py:138" *)
  output [8:0] level;
  reg [8:0] level = 9'h000;
  (* init = 9'h000 *)
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [8:0] produce = 9'h000;
  (* src = "nmigen/hdl/mem.py:81" *)
  wire [8:0] rdport_storage_r_addr;
  (* src = "nmigen/hdl/mem.py:83" *)
  wire [35:0] rdport_storage_r_data;
  (* src = "nmigen/hdl/mem.py:85" *)
  wire rdport_storage_r_en;
  (* src = "nmigen/lib/fifo.py:71" *)
  input re;
  (* src = "nmigen/lib/fifo.py:70" *)
  output readable;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "nmigen/lib/fifo.py:67" *)
  input we;
  (* src = "nmigen/lib/fifo.py:66" *)
  output writable;
  (* src = "nmigen/hdl/mem.py:146" *)
  wire [8:0] wrport_storage_w_addr;
  (* src = "nmigen/hdl/mem.py:148" *)
  wire [35:0] wrport_storage_w_data;
  (* src = "nmigen/hdl/mem.py:150" *)
  wire wrport_storage_w_en;
  assign \$10  = produce == (* src = "nmigen/lib/fifo.py:102" *) 1'h0;
  assign \$9  = \$10  ? (* src = "nmigen/lib/fifo.py:164" *) 10'h1fe : \$7 ;
  assign \$13  = writable | (* src = "nmigen/lib/fifo.py:161" *) replace;
  assign \$15  = we & (* src = "nmigen/lib/fifo.py:161" *) \$13 ;
  assign \$17  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$19  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$21  = \$17  & (* src = "nmigen/lib/fifo.py:149" *) \$19 ;
  assign \$24  = produce + (* src = "nmigen/lib/fifo.py:95" *) 1'h1;
  assign \$27  = produce == (* src = "nmigen/lib/fifo.py:95" *) 9'h1fe;
  assign \$26  = \$27  ? (* src = "nmigen/lib/fifo.py:166" *) 10'h000 : \$24 ;
  assign \$2  = level != (* src = "nmigen/lib/fifo.py:144" *) 9'h1ff;
  assign \$30  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$33  = consume + (* src = "nmigen/lib/fifo.py:95" *) 1'h1;
  assign \$36  = consume == (* src = "nmigen/lib/fifo.py:95" *) 9'h1fe;
  assign \$35  = \$36  ? (* src = "nmigen/lib/fifo.py:175" *) 10'h000 : \$33 ;
  assign \$39  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$41  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$43  = \$39  & (* src = "nmigen/lib/fifo.py:149" *) \$41 ;
  assign \$46  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$45  = ~ (* src = "nmigen/lib/fifo.py:177" *) \$46 ;
  assign \$4  = level != (* src = "nmigen/lib/fifo.py:145" *) 1'h0;
  assign \$49  = \$43  & (* src = "nmigen/lib/fifo.py:177" *) \$45 ;
  assign \$52  = level + (* src = "nmigen/lib/fifo.py:178" *) 1'h1;
  assign \$54  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$57  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$59  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$61  = \$57  & (* src = "nmigen/lib/fifo.py:149" *) \$59 ;
  assign \$56  = ~ (* src = "nmigen/lib/fifo.py:179" *) \$61 ;
  assign \$64  = \$54  & (* src = "nmigen/lib/fifo.py:179" *) \$56 ;
  assign \$67  = level - (* src = "nmigen/lib/fifo.py:180" *) 1'h1;
  assign \$7  = produce - (* src = "nmigen/lib/fifo.py:102" *) 1'h1;
  always @(posedge clk)
      level <= \$next\level ;
  always @(posedge clk)
      consume <= \$next\consume ;
  always @(posedge clk)
      produce <= \$next\produce ;
  reg [35:0] storage [510:0];
  initial begin
    storage[0] = 36'h000000000;
    storage[1] = 36'h000000000;
    storage[2] = 36'h000000000;
    storage[3] = 36'h000000000;
    storage[4] = 36'h000000000;
    storage[5] = 36'h000000000;
    storage[6] = 36'h000000000;
    storage[7] = 36'h000000000;
    storage[8] = 36'h000000000;
    storage[9] = 36'h000000000;
    storage[10] = 36'h000000000;
    storage[11] = 36'h000000000;
    storage[12] = 36'h000000000;
    storage[13] = 36'h000000000;
    storage[14] = 36'h000000000;
    storage[15] = 36'h000000000;
    storage[16] = 36'h000000000;
    storage[17] = 36'h000000000;
    storage[18] = 36'h000000000;
    storage[19] = 36'h000000000;
    storage[20] = 36'h000000000;
    storage[21] = 36'h000000000;
    storage[22] = 36'h000000000;
    storage[23] = 36'h000000000;
    storage[24] = 36'h000000000;
    storage[25] = 36'h000000000;
    storage[26] = 36'h000000000;
    storage[27] = 36'h000000000;
    storage[28] = 36'h000000000;
    storage[29] = 36'h000000000;
    storage[30] = 36'h000000000;
    storage[31] = 36'h000000000;
    storage[32] = 36'h000000000;
    storage[33] = 36'h000000000;
    storage[34] = 36'h000000000;
    storage[35] = 36'h000000000;
    storage[36] = 36'h000000000;
    storage[37] = 36'h000000000;
    storage[38] = 36'h000000000;
    storage[39] = 36'h000000000;
    storage[40] = 36'h000000000;
    storage[41] = 36'h000000000;
    storage[42] = 36'h000000000;
    storage[43] = 36'h000000000;
    storage[44] = 36'h000000000;
    storage[45] = 36'h000000000;
    storage[46] = 36'h000000000;
    storage[47] = 36'h000000000;
    storage[48] = 36'h000000000;
    storage[49] = 36'h000000000;
    storage[50] = 36'h000000000;
    storage[51] = 36'h000000000;
    storage[52] = 36'h000000000;
    storage[53] = 36'h000000000;
    storage[54] = 36'h000000000;
    storage[55] = 36'h000000000;
    storage[56] = 36'h000000000;
    storage[57] = 36'h000000000;
    storage[58] = 36'h000000000;
    storage[59] = 36'h000000000;
    storage[60] = 36'h000000000;
    storage[61] = 36'h000000000;
    storage[62] = 36'h000000000;
    storage[63] = 36'h000000000;
    storage[64] = 36'h000000000;
    storage[65] = 36'h000000000;
    storage[66] = 36'h000000000;
    storage[67] = 36'h000000000;
    storage[68] = 36'h000000000;
    storage[69] = 36'h000000000;
    storage[70] = 36'h000000000;
    storage[71] = 36'h000000000;
    storage[72] = 36'h000000000;
    storage[73] = 36'h000000000;
    storage[74] = 36'h000000000;
    storage[75] = 36'h000000000;
    storage[76] = 36'h000000000;
    storage[77] = 36'h000000000;
    storage[78] = 36'h000000000;
    storage[79] = 36'h000000000;
    storage[80] = 36'h000000000;
    storage[81] = 36'h000000000;
    storage[82] = 36'h000000000;
    storage[83] = 36'h000000000;
    storage[84] = 36'h000000000;
    storage[85] = 36'h000000000;
    storage[86] = 36'h000000000;
    storage[87] = 36'h000000000;
    storage[88] = 36'h000000000;
    storage[89] = 36'h000000000;
    storage[90] = 36'h000000000;
    storage[91] = 36'h000000000;
    storage[92] = 36'h000000000;
    storage[93] = 36'h000000000;
    storage[94] = 36'h000000000;
    storage[95] = 36'h000000000;
    storage[96] = 36'h000000000;
    storage[97] = 36'h000000000;
    storage[98] = 36'h000000000;
    storage[99] = 36'h000000000;
    storage[100] = 36'h000000000;
    storage[101] = 36'h000000000;
    storage[102] = 36'h000000000;
    storage[103] = 36'h000000000;
    storage[104] = 36'h000000000;
    storage[105] = 36'h000000000;
    storage[106] = 36'h000000000;
    storage[107] = 36'h000000000;
    storage[108] = 36'h000000000;
    storage[109] = 36'h000000000;
    storage[110] = 36'h000000000;
    storage[111] = 36'h000000000;
    storage[112] = 36'h000000000;
    storage[113] = 36'h000000000;
    storage[114] = 36'h000000000;
    storage[115] = 36'h000000000;
    storage[116] = 36'h000000000;
    storage[117] = 36'h000000000;
    storage[118] = 36'h000000000;
    storage[119] = 36'h000000000;
    storage[120] = 36'h000000000;
    storage[121] = 36'h000000000;
    storage[122] = 36'h000000000;
    storage[123] = 36'h000000000;
    storage[124] = 36'h000000000;
    storage[125] = 36'h000000000;
    storage[126] = 36'h000000000;
    storage[127] = 36'h000000000;
    storage[128] = 36'h000000000;
    storage[129] = 36'h000000000;
    storage[130] = 36'h000000000;
    storage[131] = 36'h000000000;
    storage[132] = 36'h000000000;
    storage[133] = 36'h000000000;
    storage[134] = 36'h000000000;
    storage[135] = 36'h000000000;
    storage[136] = 36'h000000000;
    storage[137] = 36'h000000000;
    storage[138] = 36'h000000000;
    storage[139] = 36'h000000000;
    storage[140] = 36'h000000000;
    storage[141] = 36'h000000000;
    storage[142] = 36'h000000000;
    storage[143] = 36'h000000000;
    storage[144] = 36'h000000000;
    storage[145] = 36'h000000000;
    storage[146] = 36'h000000000;
    storage[147] = 36'h000000000;
    storage[148] = 36'h000000000;
    storage[149] = 36'h000000000;
    storage[150] = 36'h000000000;
    storage[151] = 36'h000000000;
    storage[152] = 36'h000000000;
    storage[153] = 36'h000000000;
    storage[154] = 36'h000000000;
    storage[155] = 36'h000000000;
    storage[156] = 36'h000000000;
    storage[157] = 36'h000000000;
    storage[158] = 36'h000000000;
    storage[159] = 36'h000000000;
    storage[160] = 36'h000000000;
    storage[161] = 36'h000000000;
    storage[162] = 36'h000000000;
    storage[163] = 36'h000000000;
    storage[164] = 36'h000000000;
    storage[165] = 36'h000000000;
    storage[166] = 36'h000000000;
    storage[167] = 36'h000000000;
    storage[168] = 36'h000000000;
    storage[169] = 36'h000000000;
    storage[170] = 36'h000000000;
    storage[171] = 36'h000000000;
    storage[172] = 36'h000000000;
    storage[173] = 36'h000000000;
    storage[174] = 36'h000000000;
    storage[175] = 36'h000000000;
    storage[176] = 36'h000000000;
    storage[177] = 36'h000000000;
    storage[178] = 36'h000000000;
    storage[179] = 36'h000000000;
    storage[180] = 36'h000000000;
    storage[181] = 36'h000000000;
    storage[182] = 36'h000000000;
    storage[183] = 36'h000000000;
    storage[184] = 36'h000000000;
    storage[185] = 36'h000000000;
    storage[186] = 36'h000000000;
    storage[187] = 36'h000000000;
    storage[188] = 36'h000000000;
    storage[189] = 36'h000000000;
    storage[190] = 36'h000000000;
    storage[191] = 36'h000000000;
    storage[192] = 36'h000000000;
    storage[193] = 36'h000000000;
    storage[194] = 36'h000000000;
    storage[195] = 36'h000000000;
    storage[196] = 36'h000000000;
    storage[197] = 36'h000000000;
    storage[198] = 36'h000000000;
    storage[199] = 36'h000000000;
    storage[200] = 36'h000000000;
    storage[201] = 36'h000000000;
    storage[202] = 36'h000000000;
    storage[203] = 36'h000000000;
    storage[204] = 36'h000000000;
    storage[205] = 36'h000000000;
    storage[206] = 36'h000000000;
    storage[207] = 36'h000000000;
    storage[208] = 36'h000000000;
    storage[209] = 36'h000000000;
    storage[210] = 36'h000000000;
    storage[211] = 36'h000000000;
    storage[212] = 36'h000000000;
    storage[213] = 36'h000000000;
    storage[214] = 36'h000000000;
    storage[215] = 36'h000000000;
    storage[216] = 36'h000000000;
    storage[217] = 36'h000000000;
    storage[218] = 36'h000000000;
    storage[219] = 36'h000000000;
    storage[220] = 36'h000000000;
    storage[221] = 36'h000000000;
    storage[222] = 36'h000000000;
    storage[223] = 36'h000000000;
    storage[224] = 36'h000000000;
    storage[225] = 36'h000000000;
    storage[226] = 36'h000000000;
    storage[227] = 36'h000000000;
    storage[228] = 36'h000000000;
    storage[229] = 36'h000000000;
    storage[230] = 36'h000000000;
    storage[231] = 36'h000000000;
    storage[232] = 36'h000000000;
    storage[233] = 36'h000000000;
    storage[234] = 36'h000000000;
    storage[235] = 36'h000000000;
    storage[236] = 36'h000000000;
    storage[237] = 36'h000000000;
    storage[238] = 36'h000000000;
    storage[239] = 36'h000000000;
    storage[240] = 36'h000000000;
    storage[241] = 36'h000000000;
    storage[242] = 36'h000000000;
    storage[243] = 36'h000000000;
    storage[244] = 36'h000000000;
    storage[245] = 36'h000000000;
    storage[246] = 36'h000000000;
    storage[247] = 36'h000000000;
    storage[248] = 36'h000000000;
    storage[249] = 36'h000000000;
    storage[250] = 36'h000000000;
    storage[251] = 36'h000000000;
    storage[252] = 36'h000000000;
    storage[253] = 36'h000000000;
    storage[254] = 36'h000000000;
    storage[255] = 36'h000000000;
    storage[256] = 36'h000000000;
    storage[257] = 36'h000000000;
    storage[258] = 36'h000000000;
    storage[259] = 36'h000000000;
    storage[260] = 36'h000000000;
    storage[261] = 36'h000000000;
    storage[262] = 36'h000000000;
    storage[263] = 36'h000000000;
    storage[264] = 36'h000000000;
    storage[265] = 36'h000000000;
    storage[266] = 36'h000000000;
    storage[267] = 36'h000000000;
    storage[268] = 36'h000000000;
    storage[269] = 36'h000000000;
    storage[270] = 36'h000000000;
    storage[271] = 36'h000000000;
    storage[272] = 36'h000000000;
    storage[273] = 36'h000000000;
    storage[274] = 36'h000000000;
    storage[275] = 36'h000000000;
    storage[276] = 36'h000000000;
    storage[277] = 36'h000000000;
    storage[278] = 36'h000000000;
    storage[279] = 36'h000000000;
    storage[280] = 36'h000000000;
    storage[281] = 36'h000000000;
    storage[282] = 36'h000000000;
    storage[283] = 36'h000000000;
    storage[284] = 36'h000000000;
    storage[285] = 36'h000000000;
    storage[286] = 36'h000000000;
    storage[287] = 36'h000000000;
    storage[288] = 36'h000000000;
    storage[289] = 36'h000000000;
    storage[290] = 36'h000000000;
    storage[291] = 36'h000000000;
    storage[292] = 36'h000000000;
    storage[293] = 36'h000000000;
    storage[294] = 36'h000000000;
    storage[295] = 36'h000000000;
    storage[296] = 36'h000000000;
    storage[297] = 36'h000000000;
    storage[298] = 36'h000000000;
    storage[299] = 36'h000000000;
    storage[300] = 36'h000000000;
    storage[301] = 36'h000000000;
    storage[302] = 36'h000000000;
    storage[303] = 36'h000000000;
    storage[304] = 36'h000000000;
    storage[305] = 36'h000000000;
    storage[306] = 36'h000000000;
    storage[307] = 36'h000000000;
    storage[308] = 36'h000000000;
    storage[309] = 36'h000000000;
    storage[310] = 36'h000000000;
    storage[311] = 36'h000000000;
    storage[312] = 36'h000000000;
    storage[313] = 36'h000000000;
    storage[314] = 36'h000000000;
    storage[315] = 36'h000000000;
    storage[316] = 36'h000000000;
    storage[317] = 36'h000000000;
    storage[318] = 36'h000000000;
    storage[319] = 36'h000000000;
    storage[320] = 36'h000000000;
    storage[321] = 36'h000000000;
    storage[322] = 36'h000000000;
    storage[323] = 36'h000000000;
    storage[324] = 36'h000000000;
    storage[325] = 36'h000000000;
    storage[326] = 36'h000000000;
    storage[327] = 36'h000000000;
    storage[328] = 36'h000000000;
    storage[329] = 36'h000000000;
    storage[330] = 36'h000000000;
    storage[331] = 36'h000000000;
    storage[332] = 36'h000000000;
    storage[333] = 36'h000000000;
    storage[334] = 36'h000000000;
    storage[335] = 36'h000000000;
    storage[336] = 36'h000000000;
    storage[337] = 36'h000000000;
    storage[338] = 36'h000000000;
    storage[339] = 36'h000000000;
    storage[340] = 36'h000000000;
    storage[341] = 36'h000000000;
    storage[342] = 36'h000000000;
    storage[343] = 36'h000000000;
    storage[344] = 36'h000000000;
    storage[345] = 36'h000000000;
    storage[346] = 36'h000000000;
    storage[347] = 36'h000000000;
    storage[348] = 36'h000000000;
    storage[349] = 36'h000000000;
    storage[350] = 36'h000000000;
    storage[351] = 36'h000000000;
    storage[352] = 36'h000000000;
    storage[353] = 36'h000000000;
    storage[354] = 36'h000000000;
    storage[355] = 36'h000000000;
    storage[356] = 36'h000000000;
    storage[357] = 36'h000000000;
    storage[358] = 36'h000000000;
    storage[359] = 36'h000000000;
    storage[360] = 36'h000000000;
    storage[361] = 36'h000000000;
    storage[362] = 36'h000000000;
    storage[363] = 36'h000000000;
    storage[364] = 36'h000000000;
    storage[365] = 36'h000000000;
    storage[366] = 36'h000000000;
    storage[367] = 36'h000000000;
    storage[368] = 36'h000000000;
    storage[369] = 36'h000000000;
    storage[370] = 36'h000000000;
    storage[371] = 36'h000000000;
    storage[372] = 36'h000000000;
    storage[373] = 36'h000000000;
    storage[374] = 36'h000000000;
    storage[375] = 36'h000000000;
    storage[376] = 36'h000000000;
    storage[377] = 36'h000000000;
    storage[378] = 36'h000000000;
    storage[379] = 36'h000000000;
    storage[380] = 36'h000000000;
    storage[381] = 36'h000000000;
    storage[382] = 36'h000000000;
    storage[383] = 36'h000000000;
    storage[384] = 36'h000000000;
    storage[385] = 36'h000000000;
    storage[386] = 36'h000000000;
    storage[387] = 36'h000000000;
    storage[388] = 36'h000000000;
    storage[389] = 36'h000000000;
    storage[390] = 36'h000000000;
    storage[391] = 36'h000000000;
    storage[392] = 36'h000000000;
    storage[393] = 36'h000000000;
    storage[394] = 36'h000000000;
    storage[395] = 36'h000000000;
    storage[396] = 36'h000000000;
    storage[397] = 36'h000000000;
    storage[398] = 36'h000000000;
    storage[399] = 36'h000000000;
    storage[400] = 36'h000000000;
    storage[401] = 36'h000000000;
    storage[402] = 36'h000000000;
    storage[403] = 36'h000000000;
    storage[404] = 36'h000000000;
    storage[405] = 36'h000000000;
    storage[406] = 36'h000000000;
    storage[407] = 36'h000000000;
    storage[408] = 36'h000000000;
    storage[409] = 36'h000000000;
    storage[410] = 36'h000000000;
    storage[411] = 36'h000000000;
    storage[412] = 36'h000000000;
    storage[413] = 36'h000000000;
    storage[414] = 36'h000000000;
    storage[415] = 36'h000000000;
    storage[416] = 36'h000000000;
    storage[417] = 36'h000000000;
    storage[418] = 36'h000000000;
    storage[419] = 36'h000000000;
    storage[420] = 36'h000000000;
    storage[421] = 36'h000000000;
    storage[422] = 36'h000000000;
    storage[423] = 36'h000000000;
    storage[424] = 36'h000000000;
    storage[425] = 36'h000000000;
    storage[426] = 36'h000000000;
    storage[427] = 36'h000000000;
    storage[428] = 36'h000000000;
    storage[429] = 36'h000000000;
    storage[430] = 36'h000000000;
    storage[431] = 36'h000000000;
    storage[432] = 36'h000000000;
    storage[433] = 36'h000000000;
    storage[434] = 36'h000000000;
    storage[435] = 36'h000000000;
    storage[436] = 36'h000000000;
    storage[437] = 36'h000000000;
    storage[438] = 36'h000000000;
    storage[439] = 36'h000000000;
    storage[440] = 36'h000000000;
    storage[441] = 36'h000000000;
    storage[442] = 36'h000000000;
    storage[443] = 36'h000000000;
    storage[444] = 36'h000000000;
    storage[445] = 36'h000000000;
    storage[446] = 36'h000000000;
    storage[447] = 36'h000000000;
    storage[448] = 36'h000000000;
    storage[449] = 36'h000000000;
    storage[450] = 36'h000000000;
    storage[451] = 36'h000000000;
    storage[452] = 36'h000000000;
    storage[453] = 36'h000000000;
    storage[454] = 36'h000000000;
    storage[455] = 36'h000000000;
    storage[456] = 36'h000000000;
    storage[457] = 36'h000000000;
    storage[458] = 36'h000000000;
    storage[459] = 36'h000000000;
    storage[460] = 36'h000000000;
    storage[461] = 36'h000000000;
    storage[462] = 36'h000000000;
    storage[463] = 36'h000000000;
    storage[464] = 36'h000000000;
    storage[465] = 36'h000000000;
    storage[466] = 36'h000000000;
    storage[467] = 36'h000000000;
    storage[468] = 36'h000000000;
    storage[469] = 36'h000000000;
    storage[470] = 36'h000000000;
    storage[471] = 36'h000000000;
    storage[472] = 36'h000000000;
    storage[473] = 36'h000000000;
    storage[474] = 36'h000000000;
    storage[475] = 36'h000000000;
    storage[476] = 36'h000000000;
    storage[477] = 36'h000000000;
    storage[478] = 36'h000000000;
    storage[479] = 36'h000000000;
    storage[480] = 36'h000000000;
    storage[481] = 36'h000000000;
    storage[482] = 36'h000000000;
    storage[483] = 36'h000000000;
    storage[484] = 36'h000000000;
    storage[485] = 36'h000000000;
    storage[486] = 36'h000000000;
    storage[487] = 36'h000000000;
    storage[488] = 36'h000000000;
    storage[489] = 36'h000000000;
    storage[490] = 36'h000000000;
    storage[491] = 36'h000000000;
    storage[492] = 36'h000000000;
    storage[493] = 36'h000000000;
    storage[494] = 36'h000000000;
    storage[495] = 36'h000000000;
    storage[496] = 36'h000000000;
    storage[497] = 36'h000000000;
    storage[498] = 36'h000000000;
    storage[499] = 36'h000000000;
    storage[500] = 36'h000000000;
    storage[501] = 36'h000000000;
    storage[502] = 36'h000000000;
    storage[503] = 36'h000000000;
    storage[504] = 36'h000000000;
    storage[505] = 36'h000000000;
    storage[506] = 36'h000000000;
    storage[507] = 36'h000000000;
    storage[508] = 36'h000000000;
    storage[509] = 36'h000000000;
    storage[510] = 36'h000000000;
  end
  reg [35:0] _0_;
  always @(posedge clk) begin
    if (\$next\rdport_storage_r_en ) _0_ <= storage[\$next\rdport_storage_r_addr ];
    if (\$next\wrport_storage_w_en ) storage[\$next\wrport_storage_w_addr ] <= \$next\wrport_storage_w_data ;
  end
  assign rdport_storage_r_data = _0_;
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = \$2 ;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = \$4 ;
  end
  always @* begin
    \$next\level  = level;
    casez (\$49 )
      1'h1:
          \$next\level  = \$51 [8:0];
    endcase
    casez (\$64 )
      1'h1:
          \$next\level  = \$66 [8:0];
    endcase
    casez (rst)
      1'h1:
          \$next\level  = 9'h000;
    endcase
  end
  always @* begin
    \$next\wrport_storage_w_addr  = 9'h000;
    \$next\wrport_storage_w_addr  = produce;
    casez (replace)
      1'h1:
          \$next\wrport_storage_w_addr  = \$6 [8:0];
    endcase
  end
  always @* begin
    \$next\wrport_storage_w_data  = 36'h000000000;
    \$next\wrport_storage_w_data  = din;
  end
  always @* begin
    \$next\wrport_storage_w_en  = 1'h0;
    \$next\wrport_storage_w_en  = \$15 ;
  end
  always @* begin
    \$next\produce  = produce;
    casez (\$21 )
      1'h1:
          \$next\produce  = \$23 [8:0];
    endcase
    casez (rst)
      1'h1:
          \$next\produce  = 9'h000;
    endcase
  end
  always @* begin
    \$next\rdport_storage_r_addr  = 9'h000;
    \$next\rdport_storage_r_addr  = consume;
  end
  always @* begin
    \$next\dout  = 36'h000000000;
    \$next\dout  = rdport_storage_r_data;
  end
  always @* begin
    \$next\rdport_storage_r_en  = 1'h0;
    \$next\rdport_storage_r_en  = re;
  end
  always @* begin
    \$next\consume  = consume;
    casez (\$30 )
      1'h1:
          \$next\consume  = \$32 [8:0];
    endcase
    casez (rst)
      1'h1:
          \$next\consume  = 9'h000;
    endcase
  end
  assign \$6  = \$9 ;
  assign \$23  = \$26 ;
  assign \$32  = \$35 ;
  assign \$51  = \$52 ;
  assign \$66  = \$67 ;
  assign rdport_storage_r_en = \$next\rdport_storage_r_en ;
  assign dout = \$next\dout ;
  assign rdport_storage_r_addr = \$next\rdport_storage_r_addr ;
  assign wrport_storage_w_en = \$next\wrport_storage_w_en ;
  assign wrport_storage_w_data = \$next\wrport_storage_w_data ;
  assign wrport_storage_w_addr = \$next\wrport_storage_w_addr ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
endmodule

(* \nmigen.hierarchy  = "top.top.integration_3.vbits_to_cbits" *)
(* generator = "nMigen" *)
module vbits_to_cbits(enc_in_ctr, in_end, valid_in, busy_in, rst, clk, latch_input, data_out, valid_out, end_out, enc_in);
  (* src = "vbits_to_cbits.py:332" *)
  reg [15:0] \$next\data_out ;
  (* src = "vbits_to_cbits.py:334" *)
  reg \$next\end_out ;
  (* src = "vbits_to_cbits.py:150" *)
  reg \$next\input_handler_dec_buff ;
  (* src = "vbits_to_cbits.py:139" *)
  reg [29:0] \$next\input_handler_enc_in ;
  (* src = "vbits_to_cbits.py:140" *)
  reg [4:0] \$next\input_handler_enc_in_ctr ;
  (* src = "vbits_to_cbits.py:141" *)
  reg \$next\input_handler_in_end ;
  (* src = "vbits_to_cbits.py:142" *)
  reg \$next\input_handler_valid_in ;
  (* src = "vbits_to_cbits.py:326" *)
  reg \$next\latch_input ;
  (* src = "vbits_to_cbits.py:60" *)
  reg [6:0] \$next\new_buff_consum ;
  (* src = "vbits_to_cbits.py:59" *)
  reg [6:0] \$next\output_handler_buff_consum ;
  (* src = "vbits_to_cbits.py:58" *)
  reg [76:0] \$next\output_handler_buffer ;
  (* src = "vbits_to_cbits.py:55" *)
  reg \$next\output_handler_busy_in ;
  (* src = "vbits_to_cbits.py:66" *)
  reg \$next\output_handler_end_in ;
  (* src = "vbits_to_cbits.py:333" *)
  reg \$next\valid_out ;
  (* src = "vbits_to_cbits.py:335" *)
  input busy_in;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "vbits_to_cbits.py:332" *)
  output [15:0] data_out;
  (* src = "vbits_to_cbits.py:327" *)
  input [29:0] enc_in;
  (* src = "vbits_to_cbits.py:328" *)
  input [4:0] enc_in_ctr;
  (* src = "vbits_to_cbits.py:334" *)
  output end_out;
  (* src = "vbits_to_cbits.py:329" *)
  input in_end;
  (* src = "vbits_to_cbits.py:146" *)
  wire [6:0] input_handler_buff_consum;
  (* src = "vbits_to_cbits.py:145" *)
  wire [76:0] input_handler_buffer;
  (* src = "vbits_to_cbits.py:150" *)
  wire input_handler_dec_buff;
  (* src = "vbits_to_cbits.py:139" *)
  wire [29:0] input_handler_enc_in;
  (* src = "vbits_to_cbits.py:140" *)
  wire [4:0] input_handler_enc_in_ctr;
  (* src = "vbits_to_cbits.py:153" *)
  wire input_handler_end_out;
  (* src = "vbits_to_cbits.py:141" *)
  wire input_handler_in_end;
  (* src = "vbits_to_cbits.py:138" *)
  wire input_handler_latch_input;
  (* src = "vbits_to_cbits.py:147" *)
  wire [6:0] input_handler_new_buff_consum;
  (* src = "vbits_to_cbits.py:142" *)
  wire input_handler_valid_in;
  (* src = "vbits_to_cbits.py:326" *)
  output latch_input;
  (* src = "vbits_to_cbits.py:60" *)
  wire [6:0] new_buff_consum;
  (* src = "vbits_to_cbits.py:59" *)
  wire [6:0] output_handler_buff_consum;
  (* src = "vbits_to_cbits.py:58" *)
  wire [76:0] output_handler_buffer;
  (* src = "vbits_to_cbits.py:55" *)
  wire output_handler_busy_in;
  (* src = "vbits_to_cbits.py:52" *)
  wire [15:0] output_handler_data_out;
  (* src = "vbits_to_cbits.py:63" *)
  wire output_handler_dec_buff_out;
  (* src = "vbits_to_cbits.py:66" *)
  wire output_handler_end_in;
  (* src = "vbits_to_cbits.py:54" *)
  wire output_handler_end_out;
  (* src = "vbits_to_cbits.py:53" *)
  wire output_handler_valid_out;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "vbits_to_cbits.py:330" *)
  input valid_in;
  (* src = "vbits_to_cbits.py:333" *)
  output valid_out;
  input_handler input_handler (
    .buff_consum(input_handler_buff_consum),
    .buffer(input_handler_buffer),
    .clk(clk),
    .dec_buff(input_handler_dec_buff),
    .enc_in(input_handler_enc_in),
    .enc_in_ctr(input_handler_enc_in_ctr),
    .end_out(input_handler_end_out),
    .in_end(input_handler_in_end),
    .latch_input(input_handler_latch_input),
    .new_buff_consum(input_handler_new_buff_consum),
    .rst(rst),
    .valid_in(input_handler_valid_in)
  );
  output_handler output_handler (
    .buff_consum(output_handler_buff_consum),
    .buffer(output_handler_buffer),
    .busy_in(output_handler_busy_in),
    .clk(clk),
    .data_out(output_handler_data_out),
    .dec_buff_out(output_handler_dec_buff_out),
    .end_in(output_handler_end_in),
    .end_out(output_handler_end_out),
    .rst(rst),
    .valid_out(output_handler_valid_out)
  );
  always @* begin
    \$next\latch_input  = 1'h0;
    \$next\latch_input  = input_handler_latch_input;
  end
  always @* begin
    \$next\input_handler_enc_in  = 30'h00000000;
    \$next\input_handler_enc_in  = enc_in;
  end
  always @* begin
    \$next\data_out  = 16'h0000;
    \$next\data_out  = output_handler_data_out;
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = output_handler_valid_out;
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = output_handler_end_out;
  end
  always @* begin
    \$next\output_handler_busy_in  = 1'h0;
    \$next\output_handler_busy_in  = busy_in;
  end
  always @* begin
    \$next\input_handler_enc_in_ctr  = 5'h00;
    \$next\input_handler_enc_in_ctr  = enc_in_ctr;
  end
  always @* begin
    \$next\input_handler_in_end  = 1'h0;
    \$next\input_handler_in_end  = in_end;
  end
  always @* begin
    \$next\input_handler_valid_in  = 1'h0;
    \$next\input_handler_valid_in  = valid_in;
  end
  always @* begin
    \$next\input_handler_dec_buff  = 1'h0;
    \$next\input_handler_dec_buff  = output_handler_dec_buff_out;
  end
  always @* begin
    \$next\output_handler_buffer  = 77'h00000000000000000000;
    \$next\output_handler_buffer  = input_handler_buffer;
  end
  always @* begin
    \$next\output_handler_buff_consum  = 7'h00;
    \$next\output_handler_buff_consum  = input_handler_buff_consum;
  end
  always @* begin
    \$next\new_buff_consum  = 7'h00;
    \$next\new_buff_consum  = input_handler_new_buff_consum;
  end
  always @* begin
    \$next\output_handler_end_in  = 1'h0;
    \$next\output_handler_end_in  = input_handler_end_out;
  end
  assign output_handler_busy_in = \$next\output_handler_busy_in ;
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign data_out = \$next\data_out ;
  assign output_handler_end_in = \$next\output_handler_end_in ;
  assign new_buff_consum = \$next\new_buff_consum ;
  assign output_handler_buff_consum = \$next\output_handler_buff_consum ;
  assign output_handler_buffer = \$next\output_handler_buffer ;
  assign input_handler_dec_buff = \$next\input_handler_dec_buff ;
  assign input_handler_valid_in = \$next\input_handler_valid_in ;
  assign input_handler_in_end = \$next\input_handler_in_end ;
  assign input_handler_enc_in_ctr = \$next\input_handler_enc_in_ctr ;
  assign input_handler_enc_in = \$next\input_handler_enc_in ;
  assign latch_input = \$next\latch_input ;
endmodule

(* \nmigen.hierarchy  = "top.writer_fifo" *)
(* generator = "nMigen" *)
module writer_fifo(end_in, data_in, read, replace, rst, clk, writable, readable16, data_out, end_out, valid_out, valid_in);
  wire \$1 ;
  wire \$3 ;
  (* src = "axihp_fifo.py:11" *)
  reg [63:0] \$next\data_out ;
  (* src = "axihp_fifo.py:14" *)
  reg \$next\end_out ;
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [64:0] \$next\fifo_din ;
  (* src = "nmigen/lib/fifo.py:71" *)
  reg \$next\fifo_re ;
  (* src = "nmigen/lib/fifo.py:67" *)
  reg \$next\fifo_we ;
  (* src = "axihp_fifo.py:22" *)
  reg \$next\readable ;
  (* src = "axihp_fifo.py:25" *)
  reg \$next\readable16 ;
  (* src = "axihp_fifo.py:17" *)
  reg \$next\valid_out ;
  (* src = "axihp_fifo.py:21" *)
  reg \$next\writable ;
  (* src = "axihp_fifo.py:24" *)
  reg \$next\writable16 ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "axihp_fifo.py:10" *)
  input [63:0] data_in;
  (* src = "axihp_fifo.py:11" *)
  output [63:0] data_out;
  (* src = "axihp_fifo.py:13" *)
  input end_in;
  (* src = "axihp_fifo.py:14" *)
  output end_out;
  (* src = "nmigen/lib/fifo.py:65" *)
  wire [64:0] fifo_din;
  (* src = "nmigen/lib/fifo.py:69" *)
  wire [64:0] fifo_dout;
  (* src = "nmigen/lib/fifo.py:138" *)
  wire [5:0] fifo_level;
  (* src = "nmigen/lib/fifo.py:71" *)
  wire fifo_re;
  (* src = "nmigen/lib/fifo.py:70" *)
  wire fifo_readable;
  (* src = "nmigen/lib/fifo.py:67" *)
  wire fifo_we;
  (* src = "nmigen/lib/fifo.py:66" *)
  wire fifo_writable;
  (* src = "axihp_fifo.py:19" *)
  input read;
  (* src = "axihp_fifo.py:22" *)
  wire readable;
  (* src = "axihp_fifo.py:25" *)
  output readable16;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "clk_domains.py:5" *)
  input rst;
  (* src = "axihp_fifo.py:16" *)
  input valid_in;
  (* src = "axihp_fifo.py:17" *)
  output valid_out;
  (* src = "axihp_fifo.py:21" *)
  output writable;
  (* src = "axihp_fifo.py:24" *)
  wire writable16;
  assign \$1  = fifo_level >= (* src = "axihp_fifo.py:54" *) 5'h10;
  assign \$3  = fifo_level <= (* src = "axihp_fifo.py:55" *) 4'hc;
  \fifo$9  fifo (
    .clk(clk),
    .din(fifo_din),
    .dout(fifo_dout),
    .level(fifo_level),
    .re(fifo_re),
    .readable(fifo_readable),
    .replace(replace),
    .rst(rst),
    .we(fifo_we),
    .writable(fifo_writable)
  );
  always @* begin
    \$next\fifo_we  = 1'h0;
    \$next\fifo_we  = valid_in;
  end
  always @* begin
    \$next\fifo_din  = 65'h00000000000000000;
    \$next\fifo_din  = { data_in, end_in };
  end
  always @* begin
    \$next\fifo_re  = 1'h0;
    \$next\fifo_re  = read;
  end
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = fifo_writable;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = fifo_readable;
  end
  always @* begin
    \$next\readable16  = 1'h0;
    \$next\readable16  = \$1 ;
  end
  always @* begin
    \$next\writable16  = 1'h0;
    \$next\writable16  = \$3 ;
  end
  always @* begin
    \$next\data_out  = 64'h0000000000000000;
    \$next\data_out  = fifo_dout[64:1];
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = fifo_dout[0];
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = fifo_readable;
  end
  assign valid_out = \$next\valid_out ;
  assign end_out = \$next\end_out ;
  assign data_out = \$next\data_out ;
  assign writable16 = \$next\writable16 ;
  assign readable16 = \$next\readable16 ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
  assign fifo_re = \$next\fifo_re ;
  assign fifo_din = \$next\fifo_din ;
  assign fifo_we = \$next\fifo_we ;
endmodule

