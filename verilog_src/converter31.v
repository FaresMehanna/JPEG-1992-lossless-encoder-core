/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(close_full, enc_out_ctr, enc_out, out_end, rst, clk, latch_output, enc_in, enc_in_ctr, in_end, valid_in, valid_out);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire [7:0] \$37 ;
  wire [7:0] \$38 ;
  wire [7:0] \$40 ;
  wire [7:0] \$41 ;
  wire [7:0] \$43 ;
  wire [7:0] \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "./migen_src/converter31.py:19" *)
  reg [30:0] \$next\enc_in ;
  (* src = "./migen_src/converter31.py:20" *)
  reg [4:0] \$next\enc_in_ctr ;
  (* src = "./migen_src/converter31.py:34" *)
  reg [92:0] \$next\enc_out_latch ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [2:0] \$next\fsm_state ;
  (* src = "./migen_src/converter31.py:21" *)
  reg \$next\in_end ;
  (* src = "./migen_src/converter31.py:12" *)
  reg \$next\latch_output ;
  (* src = "./migen_src/converter31.py:35" *)
  reg \$next\out_end_latch ;
  (* src = "./migen_src/converter31.py:22" *)
  reg \$next\valid_in ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "./migen_src/converter31.py:23" *)
  input close_full;
  (* init = 31'h00000000 *)
  (* src = "./migen_src/converter31.py:19" *)
  output [30:0] enc_in;
  reg [30:0] enc_in = 31'h00000000;
  (* init = 5'h00 *)
  (* src = "./migen_src/converter31.py:20" *)
  output [4:0] enc_in_ctr;
  reg [4:0] enc_in_ctr = 5'h00;
  (* src = "./migen_src/converter31.py:13" *)
  input [123:0] enc_out;
  (* src = "./migen_src/converter31.py:14" *)
  input [6:0] enc_out_ctr;
  (* init = 93'h000000000000000000000000 *)
  (* src = "./migen_src/converter31.py:34" *)
  reg [92:0] enc_out_latch = 93'h000000000000000000000000;
  (* init = 3'h0 *)
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [2:0] fsm_state = 3'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter31.py:21" *)
  output in_end;
  reg in_end = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter31.py:12" *)
  output latch_output;
  reg latch_output = 1'h0;
  (* src = "./migen_src/converter31.py:15" *)
  input out_end;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter31.py:35" *)
  reg out_end_latch = 1'h0;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter31.py:22" *)
  output valid_in;
  reg valid_in = 1'h0;
  (* src = "./migen_src/converter31.py:16" *)
  input valid_out;
  assign \$9  = close_full == (* src = "./migen_src/converter31.py:43" *) 1'h0;
  assign \$11  = valid_out & (* src = "./migen_src/converter31.py:43" *) \$9 ;
  assign \$13  = enc_out_ctr <= (* src = "./migen_src/converter31.py:53" *) 5'h1f;
  assign \$15  = enc_out_ctr <= (* src = "./migen_src/converter31.py:76" *) 6'h3e;
  assign \$17  = enc_out_ctr <= (* src = "./migen_src/converter31.py:82" *) 7'h5d;
  assign \$1  = enc_out_ctr <= (* src = "./migen_src/converter31.py:53" *) 5'h1f;
  assign \$19  = enc_out_ctr <= (* src = "./migen_src/converter31.py:88" *) 7'h7c;
  assign \$21  = enc_out_ctr <= (* src = "./migen_src/converter31.py:53" *) 5'h1f;
  assign \$23  = enc_out_ctr <= (* src = "./migen_src/converter31.py:76" *) 6'h3e;
  assign \$25  = enc_out_ctr <= (* src = "./migen_src/converter31.py:82" *) 7'h5d;
  assign \$27  = enc_out_ctr <= (* src = "./migen_src/converter31.py:88" *) 7'h7c;
  assign \$29  = enc_out_ctr <= (* src = "./migen_src/converter31.py:53" *) 5'h1f;
  assign \$31  = enc_out_ctr <= (* src = "./migen_src/converter31.py:76" *) 6'h3e;
  assign \$33  = enc_out_ctr <= (* src = "./migen_src/converter31.py:82" *) 7'h5d;
  assign \$35  = enc_out_ctr <= (* src = "./migen_src/converter31.py:88" *) 7'h7c;
  assign \$38  = enc_out_ctr - (* src = "./migen_src/converter31.py:79" *) 5'h1f;
  assign \$3  = close_full == (* src = "./migen_src/converter31.py:43" *) 1'h0;
  assign \$41  = enc_out_ctr - (* src = "./migen_src/converter31.py:85" *) 6'h3e;
  assign \$44  = enc_out_ctr - (* src = "./migen_src/converter31.py:91" *) 7'h5d;
  assign \$46  = enc_out_ctr <= (* src = "./migen_src/converter31.py:53" *) 5'h1f;
  assign \$48  = enc_out_ctr <= (* src = "./migen_src/converter31.py:53" *) 5'h1f;
  assign \$50  = enc_out_ctr <= (* src = "./migen_src/converter31.py:53" *) 5'h1f;
  assign \$5  = valid_out & (* src = "./migen_src/converter31.py:43" *) \$3 ;
  assign \$7  = enc_out_ctr <= (* src = "./migen_src/converter31.py:53" *) 5'h1f;
  always @(posedge clk)
      out_end_latch <= \$next\out_end_latch ;
  always @(posedge clk)
      enc_out_latch <= \$next\enc_out_latch ;
  always @(posedge clk)
      in_end <= \$next\in_end ;
  always @(posedge clk)
      enc_in_ctr <= \$next\enc_in_ctr ;
  always @(posedge clk)
      enc_in <= \$next\enc_in ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      latch_output <= \$next\latch_output ;
  always @(posedge clk)
      valid_in <= \$next\valid_in ;
  always @* begin
    \$next\valid_in  = valid_in;
    casez (fsm_state)
      3'h0:
          \$next\valid_in  = 1'h0;
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$1 )
                  1'h1:
                      \$next\valid_in  = 1'h1;
                  1'hz:
                      \$next\valid_in  = 1'h1;
                endcase
            1'hz:
                \$next\valid_in  = 1'h0;
          endcase
      3'h2:
          \$next\valid_in  = 1'h1;
      3'h3:
          \$next\valid_in  = 1'h1;
      3'h4:
          \$next\valid_in  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_in  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_output  = latch_output;
    casez (fsm_state)
      3'h0:
          casez (\$5 )
            1'h1:
                \$next\latch_output  = 1'h1;
          endcase
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$7 )
                  1'h1:
                      casez (close_full)
                        1'h1:
                            \$next\latch_output  = 1'h0;
                      endcase
                  1'hz:
                      \$next\latch_output  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\latch_output  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez (\$11 )
            1'h1:
                \$next\fsm_state  = 3'h1;
          endcase
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$13 )
                  1'h1:
                      casez (close_full)
                        1'h1:
                            \$next\fsm_state  = 3'h0;
                      endcase
                  1'hz:
                      casez ({ \$19 , \$17 , \$15  })
                        3'bzz1:
                            \$next\fsm_state  = 3'h2;
                        3'bz1z:
                            \$next\fsm_state  = 3'h3;
                        3'b1zz:
                            \$next\fsm_state  = 3'h4;
                      endcase
                endcase
          endcase
      3'h2:
          \$next\fsm_state  = 3'h0;
      3'h3:
          \$next\fsm_state  = 3'h2;
      3'h4:
          \$next\fsm_state  = 3'h3;
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 3'h0;
    endcase
  end
  always @* begin
    \$next\enc_in  = enc_in;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$21 )
                  1'h1:
                      \$next\enc_in  = enc_out[30:0];
                  1'hz:
                      casez ({ \$27 , \$25 , \$23  })
                        3'bzz1:
                            \$next\enc_in  = enc_out[61:31];
                        3'bz1z:
                            \$next\enc_in  = enc_out[92:62];
                        3'b1zz:
                            \$next\enc_in  = enc_out[123:93];
                      endcase
                endcase
          endcase
      3'h2:
          \$next\enc_in  = enc_out_latch[30:0];
      3'h3:
          \$next\enc_in  = enc_out_latch[61:31];
      3'h4:
          \$next\enc_in  = enc_out_latch[92:62];
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in  = 31'h00000000;
    endcase
  end
  always @* begin
    \$next\enc_in_ctr  = enc_in_ctr;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$29 )
                  1'h1:
                      \$next\enc_in_ctr  = enc_out_ctr[4:0];
                  1'hz:
                    begin
                      \$next\enc_in_ctr  = 5'h1f;
                      casez ({ \$35 , \$33 , \$31  })
                        3'bzz1:
                            \$next\enc_in_ctr  = \$37 [4:0];
                        3'bz1z:
                            \$next\enc_in_ctr  = \$40 [4:0];
                        3'b1zz:
                            \$next\enc_in_ctr  = \$43 [4:0];
                      endcase
                    end
                endcase
          endcase
      3'h2:
          \$next\enc_in_ctr  = 5'h1f;
      3'h3:
          \$next\enc_in_ctr  = 5'h1f;
      3'h4:
          \$next\enc_in_ctr  = 5'h1f;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_ctr  = 5'h00;
    endcase
  end
  always @* begin
    \$next\in_end  = in_end;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$46 )
                  1'h1:
                      \$next\in_end  = out_end;
                  1'hz:
                      \$next\in_end  = 1'h0;
                endcase
          endcase
      3'h2:
          \$next\in_end  = out_end_latch;
      3'h3:
          \$next\in_end  = 1'h0;
      3'h4:
          \$next\in_end  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\in_end  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_out_latch  = enc_out_latch;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$48 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\enc_out_latch  = enc_out[92:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out_latch  = 93'h000000000000000000000000;
    endcase
  end
  always @* begin
    \$next\out_end_latch  = out_end_latch;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$50 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\out_end_latch  = out_end;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\out_end_latch  = 1'h0;
    endcase
  end
  assign \$37  = \$38 ;
  assign \$40  = \$41 ;
  assign \$43  = \$44 ;
endmodule

