/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top.pixel1" *)
(* generator = "nMigen" *)
module pixel1(ssss, val_in, rst, clk, enc_out, enc_ctr, valid);
  wire \$11 ;
  wire [5:0] \$13 ;
  wire [5:0] \$14 ;
  wire \$2 ;
  wire [30:0] \$4 ;
  wire [46:0] \$6 ;
  wire [46:0] \$7 ;
  wire [46:0] \$9 ;
  (* src = "./migen_src/encode.py:32" *)
  reg [4:0] \$next\enc_ctr ;
  (* src = "./migen_src/encode.py:31" *)
  reg [30:0] \$next\enc_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:81" *)
  reg [4:0] \$next\rp_mem_r_addr ;
  (* src = "./migen_src/encode.py:52" *)
  reg [4:0] \$next\ssss_late ;
  (* src = "./migen_src/encode.py:54" *)
  reg [15:0] \$next\val_in_late ;
  (* src = "./migen_src/encode.py:48" *)
  reg \$next\valid_late ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:124" *)
  input clk;
  (* init = 5'h00 *)
  (* src = "./migen_src/encode.py:32" *)
  output [4:0] enc_ctr;
  reg [4:0] enc_ctr = 5'h00;
  (* init = 31'h00000000 *)
  (* src = "./migen_src/encode.py:31" *)
  output [30:0] enc_out;
  reg [30:0] enc_out = 31'h00000000;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:81" *)
  wire [4:0] rp_mem_r_addr;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:83" *)
  wire [20:0] rp_mem_r_data;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/encode.py:30" *)
  input [4:0] ssss;
  (* init = 5'h00 *)
  (* src = "./migen_src/encode.py:52" *)
  reg [4:0] ssss_late = 5'h00;
  (* src = "./migen_src/encode.py:29" *)
  input [15:0] val_in;
  (* init = 16'h0000 *)
  (* src = "./migen_src/encode.py:54" *)
  reg [15:0] val_in_late = 16'h0000;
  (* src = "./migen_src/encode.py:33" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "./migen_src/encode.py:48" *)
  reg valid_late = 1'h0;
  assign \$9  = \$7  | (* src = "./migen_src/encode.py:71" *) val_in_late;
  assign \$11  = ssss_late == (* src = "./migen_src/encode.py:64" *) 5'h10;
  assign \$14  = rp_mem_r_data[4:0] + (* src = "./migen_src/encode.py:72" *) ssss_late;
  assign \$2  = ssss_late == (* src = "./migen_src/encode.py:64" *) 5'h10;
  assign \$4  = + (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ast.py:123" *) rp_mem_r_data[20:5];
  assign \$7  = rp_mem_r_data[20:5] <<< (* src = "./migen_src/encode.py:71" *) ssss_late;
  always @(posedge clk)
      enc_ctr <= \$next\enc_ctr ;
  always @(posedge clk)
      enc_out <= \$next\enc_out ;
  always @(posedge clk)
      val_in_late <= \$next\val_in_late ;
  always @(posedge clk)
      ssss_late <= \$next\ssss_late ;
  always @(posedge clk)
      valid_late <= \$next\valid_late ;
  reg [20:0] mem [16:0];
  initial begin
    mem[0] = 21'h0001c4;
    mem[1] = 21'h000003;
    mem[2] = 21'h000023;
    mem[3] = 21'h000043;
    mem[4] = 21'h000063;
    mem[5] = 21'h000083;
    mem[6] = 21'h0000a3;
    mem[7] = 21'h0000c3;
    mem[8] = 21'h0003c5;
    mem[9] = 21'h0007c6;
    mem[10] = 21'h000fc7;
    mem[11] = 21'h001fc8;
    mem[12] = 21'h003fc9;
    mem[13] = 21'h007fca;
    mem[14] = 21'h00ffcb;
    mem[15] = 21'h01ffcc;
    mem[16] = 21'h03ffcd;
  end
  reg [4:0] _0_;
  always @(posedge clk) begin
    _0_ <= \$next\rp_mem_r_addr ;
  end
  assign rp_mem_r_data = mem[_0_];
  always @* begin
    \$next\valid_late  = valid_late;
    \$next\valid_late  = valid;
    casez (rst)
      1'h1:
          \$next\valid_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\ssss_late  = ssss_late;
    \$next\ssss_late  = ssss;
    casez (rst)
      1'h1:
          \$next\ssss_late  = 5'h00;
    endcase
  end
  always @* begin
    \$next\val_in_late  = val_in_late;
    \$next\val_in_late  = val_in;
    casez (rst)
      1'h1:
          \$next\val_in_late  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\rp_mem_r_addr  = 5'h00;
    \$next\rp_mem_r_addr  = ssss;
  end
  always @* begin
    \$next\enc_out  = enc_out;
    casez (valid_late)
      1'h1:
          casez (\$2 )
            1'h1:
                \$next\enc_out  = \$4 ;
            1'hz:
                \$next\enc_out  = \$6 [30:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out  = 31'h00000000;
    endcase
  end
  always @* begin
    \$next\enc_ctr  = enc_ctr;
    casez (valid_late)
      1'h1:
          casez (\$11 )
            1'h1:
                \$next\enc_ctr  = rp_mem_r_data[4:0];
            1'hz:
                \$next\enc_ctr  = \$13 [4:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_ctr  = 5'h00;
    endcase
  end
  assign \$6  = \$9 ;
  assign \$13  = \$14 ;
  assign rp_mem_r_addr = \$next\rp_mem_r_addr ;
endmodule

(* \nmigen.hierarchy  = "top.pixel2" *)
(* generator = "nMigen" *)
module pixel2(ssss, val_in, rst, clk, enc_out, enc_ctr, valid);
  wire \$11 ;
  wire [5:0] \$13 ;
  wire [5:0] \$14 ;
  wire \$2 ;
  wire [30:0] \$4 ;
  wire [46:0] \$6 ;
  wire [46:0] \$7 ;
  wire [46:0] \$9 ;
  (* src = "./migen_src/encode.py:32" *)
  reg [4:0] \$next\enc_ctr ;
  (* src = "./migen_src/encode.py:31" *)
  reg [30:0] \$next\enc_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:81" *)
  reg [4:0] \$next\rp_mem_r_addr ;
  (* src = "./migen_src/encode.py:52" *)
  reg [4:0] \$next\ssss_late ;
  (* src = "./migen_src/encode.py:54" *)
  reg [15:0] \$next\val_in_late ;
  (* src = "./migen_src/encode.py:48" *)
  reg \$next\valid_late ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:124" *)
  input clk;
  (* init = 5'h00 *)
  (* src = "./migen_src/encode.py:32" *)
  output [4:0] enc_ctr;
  reg [4:0] enc_ctr = 5'h00;
  (* init = 31'h00000000 *)
  (* src = "./migen_src/encode.py:31" *)
  output [30:0] enc_out;
  reg [30:0] enc_out = 31'h00000000;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:81" *)
  wire [4:0] rp_mem_r_addr;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:83" *)
  wire [20:0] rp_mem_r_data;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/encode.py:30" *)
  input [4:0] ssss;
  (* init = 5'h00 *)
  (* src = "./migen_src/encode.py:52" *)
  reg [4:0] ssss_late = 5'h00;
  (* src = "./migen_src/encode.py:29" *)
  input [15:0] val_in;
  (* init = 16'h0000 *)
  (* src = "./migen_src/encode.py:54" *)
  reg [15:0] val_in_late = 16'h0000;
  (* src = "./migen_src/encode.py:33" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "./migen_src/encode.py:48" *)
  reg valid_late = 1'h0;
  assign \$9  = \$7  | (* src = "./migen_src/encode.py:71" *) val_in_late;
  assign \$11  = ssss_late == (* src = "./migen_src/encode.py:64" *) 5'h10;
  assign \$14  = rp_mem_r_data[4:0] + (* src = "./migen_src/encode.py:72" *) ssss_late;
  assign \$2  = ssss_late == (* src = "./migen_src/encode.py:64" *) 5'h10;
  assign \$4  = + (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ast.py:123" *) rp_mem_r_data[20:5];
  assign \$7  = rp_mem_r_data[20:5] <<< (* src = "./migen_src/encode.py:71" *) ssss_late;
  always @(posedge clk)
      enc_ctr <= \$next\enc_ctr ;
  always @(posedge clk)
      enc_out <= \$next\enc_out ;
  always @(posedge clk)
      val_in_late <= \$next\val_in_late ;
  always @(posedge clk)
      ssss_late <= \$next\ssss_late ;
  always @(posedge clk)
      valid_late <= \$next\valid_late ;
  reg [20:0] mem [16:0];
  initial begin
    mem[0] = 21'h0001c4;
    mem[1] = 21'h000003;
    mem[2] = 21'h000023;
    mem[3] = 21'h000043;
    mem[4] = 21'h000063;
    mem[5] = 21'h000083;
    mem[6] = 21'h0000a3;
    mem[7] = 21'h0000c3;
    mem[8] = 21'h0003c5;
    mem[9] = 21'h0007c6;
    mem[10] = 21'h000fc7;
    mem[11] = 21'h001fc8;
    mem[12] = 21'h003fc9;
    mem[13] = 21'h007fca;
    mem[14] = 21'h00ffcb;
    mem[15] = 21'h01ffcc;
    mem[16] = 21'h03ffcd;
  end
  reg [4:0] _0_;
  always @(posedge clk) begin
    _0_ <= \$next\rp_mem_r_addr ;
  end
  assign rp_mem_r_data = mem[_0_];
  always @* begin
    \$next\valid_late  = valid_late;
    \$next\valid_late  = valid;
    casez (rst)
      1'h1:
          \$next\valid_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\ssss_late  = ssss_late;
    \$next\ssss_late  = ssss;
    casez (rst)
      1'h1:
          \$next\ssss_late  = 5'h00;
    endcase
  end
  always @* begin
    \$next\val_in_late  = val_in_late;
    \$next\val_in_late  = val_in;
    casez (rst)
      1'h1:
          \$next\val_in_late  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\rp_mem_r_addr  = 5'h00;
    \$next\rp_mem_r_addr  = ssss;
  end
  always @* begin
    \$next\enc_out  = enc_out;
    casez (valid_late)
      1'h1:
          casez (\$2 )
            1'h1:
                \$next\enc_out  = \$4 ;
            1'hz:
                \$next\enc_out  = \$6 [30:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out  = 31'h00000000;
    endcase
  end
  always @* begin
    \$next\enc_ctr  = enc_ctr;
    casez (valid_late)
      1'h1:
          casez (\$11 )
            1'h1:
                \$next\enc_ctr  = rp_mem_r_data[4:0];
            1'hz:
                \$next\enc_ctr  = \$13 [4:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_ctr  = 5'h00;
    endcase
  end
  assign \$6  = \$9 ;
  assign \$13  = \$14 ;
  assign rp_mem_r_addr = \$next\rp_mem_r_addr ;
endmodule

(* \nmigen.hierarchy  = "top.pixel3" *)
(* generator = "nMigen" *)
module pixel3(ssss, val_in, rst, clk, enc_out, enc_ctr, valid);
  wire \$11 ;
  wire [5:0] \$13 ;
  wire [5:0] \$14 ;
  wire \$2 ;
  wire [30:0] \$4 ;
  wire [46:0] \$6 ;
  wire [46:0] \$7 ;
  wire [46:0] \$9 ;
  (* src = "./migen_src/encode.py:32" *)
  reg [4:0] \$next\enc_ctr ;
  (* src = "./migen_src/encode.py:31" *)
  reg [30:0] \$next\enc_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:81" *)
  reg [4:0] \$next\rp_mem_r_addr ;
  (* src = "./migen_src/encode.py:52" *)
  reg [4:0] \$next\ssss_late ;
  (* src = "./migen_src/encode.py:54" *)
  reg [15:0] \$next\val_in_late ;
  (* src = "./migen_src/encode.py:48" *)
  reg \$next\valid_late ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:124" *)
  input clk;
  (* init = 5'h00 *)
  (* src = "./migen_src/encode.py:32" *)
  output [4:0] enc_ctr;
  reg [4:0] enc_ctr = 5'h00;
  (* init = 31'h00000000 *)
  (* src = "./migen_src/encode.py:31" *)
  output [30:0] enc_out;
  reg [30:0] enc_out = 31'h00000000;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:81" *)
  wire [4:0] rp_mem_r_addr;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:83" *)
  wire [20:0] rp_mem_r_data;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/encode.py:30" *)
  input [4:0] ssss;
  (* init = 5'h00 *)
  (* src = "./migen_src/encode.py:52" *)
  reg [4:0] ssss_late = 5'h00;
  (* src = "./migen_src/encode.py:29" *)
  input [15:0] val_in;
  (* init = 16'h0000 *)
  (* src = "./migen_src/encode.py:54" *)
  reg [15:0] val_in_late = 16'h0000;
  (* src = "./migen_src/encode.py:33" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "./migen_src/encode.py:48" *)
  reg valid_late = 1'h0;
  assign \$9  = \$7  | (* src = "./migen_src/encode.py:71" *) val_in_late;
  assign \$11  = ssss_late == (* src = "./migen_src/encode.py:64" *) 5'h10;
  assign \$14  = rp_mem_r_data[4:0] + (* src = "./migen_src/encode.py:72" *) ssss_late;
  assign \$2  = ssss_late == (* src = "./migen_src/encode.py:64" *) 5'h10;
  assign \$4  = + (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ast.py:123" *) rp_mem_r_data[20:5];
  assign \$7  = rp_mem_r_data[20:5] <<< (* src = "./migen_src/encode.py:71" *) ssss_late;
  always @(posedge clk)
      val_in_late <= \$next\val_in_late ;
  always @(posedge clk)
      ssss_late <= \$next\ssss_late ;
  always @(posedge clk)
      valid_late <= \$next\valid_late ;
  always @(posedge clk)
      enc_ctr <= \$next\enc_ctr ;
  always @(posedge clk)
      enc_out <= \$next\enc_out ;
  reg [20:0] mem [16:0];
  initial begin
    mem[0] = 21'h0001c4;
    mem[1] = 21'h000003;
    mem[2] = 21'h000023;
    mem[3] = 21'h000043;
    mem[4] = 21'h000063;
    mem[5] = 21'h000083;
    mem[6] = 21'h0000a3;
    mem[7] = 21'h0000c3;
    mem[8] = 21'h0003c5;
    mem[9] = 21'h0007c6;
    mem[10] = 21'h000fc7;
    mem[11] = 21'h001fc8;
    mem[12] = 21'h003fc9;
    mem[13] = 21'h007fca;
    mem[14] = 21'h00ffcb;
    mem[15] = 21'h01ffcc;
    mem[16] = 21'h03ffcd;
  end
  reg [4:0] _0_;
  always @(posedge clk) begin
    _0_ <= \$next\rp_mem_r_addr ;
  end
  assign rp_mem_r_data = mem[_0_];
  always @* begin
    \$next\valid_late  = valid_late;
    \$next\valid_late  = valid;
    casez (rst)
      1'h1:
          \$next\valid_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\ssss_late  = ssss_late;
    \$next\ssss_late  = ssss;
    casez (rst)
      1'h1:
          \$next\ssss_late  = 5'h00;
    endcase
  end
  always @* begin
    \$next\val_in_late  = val_in_late;
    \$next\val_in_late  = val_in;
    casez (rst)
      1'h1:
          \$next\val_in_late  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\rp_mem_r_addr  = 5'h00;
    \$next\rp_mem_r_addr  = ssss;
  end
  always @* begin
    \$next\enc_out  = enc_out;
    casez (valid_late)
      1'h1:
          casez (\$2 )
            1'h1:
                \$next\enc_out  = \$4 ;
            1'hz:
                \$next\enc_out  = \$6 [30:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out  = 31'h00000000;
    endcase
  end
  always @* begin
    \$next\enc_ctr  = enc_ctr;
    casez (valid_late)
      1'h1:
          casez (\$11 )
            1'h1:
                \$next\enc_ctr  = rp_mem_r_data[4:0];
            1'hz:
                \$next\enc_ctr  = \$13 [4:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_ctr  = 5'h00;
    endcase
  end
  assign \$6  = \$9 ;
  assign \$13  = \$14 ;
  assign rp_mem_r_addr = \$next\rp_mem_r_addr ;
endmodule

(* \nmigen.hierarchy  = "top.pixel4" *)
(* generator = "nMigen" *)
module pixel4(ssss, val_in, rst, clk, enc_out, enc_ctr, valid);
  wire \$11 ;
  wire [5:0] \$13 ;
  wire [5:0] \$14 ;
  wire \$2 ;
  wire [30:0] \$4 ;
  wire [46:0] \$6 ;
  wire [46:0] \$7 ;
  wire [46:0] \$9 ;
  (* src = "./migen_src/encode.py:32" *)
  reg [4:0] \$next\enc_ctr ;
  (* src = "./migen_src/encode.py:31" *)
  reg [30:0] \$next\enc_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:81" *)
  reg [4:0] \$next\rp_mem_r_addr ;
  (* src = "./migen_src/encode.py:52" *)
  reg [4:0] \$next\ssss_late ;
  (* src = "./migen_src/encode.py:54" *)
  reg [15:0] \$next\val_in_late ;
  (* src = "./migen_src/encode.py:48" *)
  reg \$next\valid_late ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:124" *)
  input clk;
  (* init = 5'h00 *)
  (* src = "./migen_src/encode.py:32" *)
  output [4:0] enc_ctr;
  reg [4:0] enc_ctr = 5'h00;
  (* init = 31'h00000000 *)
  (* src = "./migen_src/encode.py:31" *)
  output [30:0] enc_out;
  reg [30:0] enc_out = 31'h00000000;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:81" *)
  wire [4:0] rp_mem_r_addr;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:83" *)
  wire [20:0] rp_mem_r_data;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/encode.py:30" *)
  input [4:0] ssss;
  (* init = 5'h00 *)
  (* src = "./migen_src/encode.py:52" *)
  reg [4:0] ssss_late = 5'h00;
  (* src = "./migen_src/encode.py:29" *)
  input [15:0] val_in;
  (* init = 16'h0000 *)
  (* src = "./migen_src/encode.py:54" *)
  reg [15:0] val_in_late = 16'h0000;
  (* src = "./migen_src/encode.py:33" *)
  input valid;
  (* init = 1'h0 *)
  (* src = "./migen_src/encode.py:48" *)
  reg valid_late = 1'h0;
  assign \$9  = \$7  | (* src = "./migen_src/encode.py:71" *) val_in_late;
  assign \$11  = ssss_late == (* src = "./migen_src/encode.py:64" *) 5'h10;
  assign \$14  = rp_mem_r_data[4:0] + (* src = "./migen_src/encode.py:72" *) ssss_late;
  assign \$2  = ssss_late == (* src = "./migen_src/encode.py:64" *) 5'h10;
  assign \$4  = + (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ast.py:123" *) rp_mem_r_data[20:5];
  assign \$7  = rp_mem_r_data[20:5] <<< (* src = "./migen_src/encode.py:71" *) ssss_late;
  always @(posedge clk)
      enc_ctr <= \$next\enc_ctr ;
  always @(posedge clk)
      enc_out <= \$next\enc_out ;
  always @(posedge clk)
      val_in_late <= \$next\val_in_late ;
  always @(posedge clk)
      ssss_late <= \$next\ssss_late ;
  always @(posedge clk)
      valid_late <= \$next\valid_late ;
  reg [20:0] mem [16:0];
  initial begin
    mem[0] = 21'h0001c4;
    mem[1] = 21'h000003;
    mem[2] = 21'h000023;
    mem[3] = 21'h000043;
    mem[4] = 21'h000063;
    mem[5] = 21'h000083;
    mem[6] = 21'h0000a3;
    mem[7] = 21'h0000c3;
    mem[8] = 21'h0003c5;
    mem[9] = 21'h0007c6;
    mem[10] = 21'h000fc7;
    mem[11] = 21'h001fc8;
    mem[12] = 21'h003fc9;
    mem[13] = 21'h007fca;
    mem[14] = 21'h00ffcb;
    mem[15] = 21'h01ffcc;
    mem[16] = 21'h03ffcd;
  end
  reg [4:0] _0_;
  always @(posedge clk) begin
    _0_ <= \$next\rp_mem_r_addr ;
  end
  assign rp_mem_r_data = mem[_0_];
  always @* begin
    \$next\valid_late  = valid_late;
    \$next\valid_late  = valid;
    casez (rst)
      1'h1:
          \$next\valid_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\ssss_late  = ssss_late;
    \$next\ssss_late  = ssss;
    casez (rst)
      1'h1:
          \$next\ssss_late  = 5'h00;
    endcase
  end
  always @* begin
    \$next\val_in_late  = val_in_late;
    \$next\val_in_late  = val_in;
    casez (rst)
      1'h1:
          \$next\val_in_late  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\rp_mem_r_addr  = 5'h00;
    \$next\rp_mem_r_addr  = ssss;
  end
  always @* begin
    \$next\enc_out  = enc_out;
    casez (valid_late)
      1'h1:
          casez (\$2 )
            1'h1:
                \$next\enc_out  = \$4 ;
            1'hz:
                \$next\enc_out  = \$6 [30:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out  = 31'h00000000;
    endcase
  end
  always @* begin
    \$next\enc_ctr  = enc_ctr;
    casez (valid_late)
      1'h1:
          casez (\$11 )
            1'h1:
                \$next\enc_ctr  = rp_mem_r_data[4:0];
            1'hz:
                \$next\enc_ctr  = \$13 [4:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_ctr  = 5'h00;
    endcase
  end
  assign \$6  = \$9 ;
  assign \$13  = \$14 ;
  assign rp_mem_r_addr = \$next\rp_mem_r_addr ;
endmodule

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(valid_in, ssss1, val_in2, ssss2, val_in3, ssss3, val_in4, ssss4, rst, clk, enc_out1, enc_out2, enc_out3, enc_out4, enc_ctr1, enc_ctr2, enc_ctr3, enc_ctr4, valid_out, val_in1);
  (* src = "./migen_src/encode.py:96" *)
  reg [4:0] \$next\enc_ctr1 ;
  (* src = "./migen_src/encode.py:97" *)
  reg [4:0] \$next\enc_ctr2 ;
  (* src = "./migen_src/encode.py:98" *)
  reg [4:0] \$next\enc_ctr3 ;
  (* src = "./migen_src/encode.py:99" *)
  reg [4:0] \$next\enc_ctr4 ;
  (* src = "./migen_src/encode.py:91" *)
  reg [30:0] \$next\enc_out1 ;
  (* src = "./migen_src/encode.py:92" *)
  reg [30:0] \$next\enc_out2 ;
  (* src = "./migen_src/encode.py:93" *)
  reg [30:0] \$next\enc_out3 ;
  (* src = "./migen_src/encode.py:94" *)
  reg [30:0] \$next\enc_out4 ;
  (* src = "./migen_src/encode.py:30" *)
  reg [4:0] \$next\pixel1_ssss ;
  (* src = "./migen_src/encode.py:29" *)
  reg [15:0] \$next\pixel1_val_in ;
  (* src = "./migen_src/encode.py:33" *)
  reg \$next\pixel1_valid ;
  (* src = "./migen_src/encode.py:30" *)
  reg [4:0] \$next\pixel2_ssss ;
  (* src = "./migen_src/encode.py:29" *)
  reg [15:0] \$next\pixel2_val_in ;
  (* src = "./migen_src/encode.py:33" *)
  reg \$next\pixel2_valid ;
  (* src = "./migen_src/encode.py:30" *)
  reg [4:0] \$next\pixel3_ssss ;
  (* src = "./migen_src/encode.py:29" *)
  reg [15:0] \$next\pixel3_val_in ;
  (* src = "./migen_src/encode.py:33" *)
  reg \$next\pixel3_valid ;
  (* src = "./migen_src/encode.py:30" *)
  reg [4:0] \$next\pixel4_ssss ;
  (* src = "./migen_src/encode.py:29" *)
  reg [15:0] \$next\pixel4_val_in ;
  (* src = "./migen_src/encode.py:33" *)
  reg \$next\pixel4_valid ;
  (* src = "./migen_src/encode.py:149" *)
  reg \$next\valid_late ;
  (* src = "./migen_src/encode.py:102" *)
  reg \$next\valid_out ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/mem.py:124" *)
  input clk;
  (* src = "./migen_src/encode.py:96" *)
  output [4:0] enc_ctr1;
  (* src = "./migen_src/encode.py:97" *)
  output [4:0] enc_ctr2;
  (* src = "./migen_src/encode.py:98" *)
  output [4:0] enc_ctr3;
  (* src = "./migen_src/encode.py:99" *)
  output [4:0] enc_ctr4;
  (* src = "./migen_src/encode.py:91" *)
  output [30:0] enc_out1;
  (* src = "./migen_src/encode.py:92" *)
  output [30:0] enc_out2;
  (* src = "./migen_src/encode.py:93" *)
  output [30:0] enc_out3;
  (* src = "./migen_src/encode.py:94" *)
  output [30:0] enc_out4;
  (* src = "./migen_src/encode.py:32" *)
  wire [4:0] pixel1_enc_ctr;
  (* src = "./migen_src/encode.py:31" *)
  wire [30:0] pixel1_enc_out;
  (* src = "./migen_src/encode.py:30" *)
  wire [4:0] pixel1_ssss;
  (* src = "./migen_src/encode.py:29" *)
  wire [15:0] pixel1_val_in;
  (* src = "./migen_src/encode.py:33" *)
  wire pixel1_valid;
  (* src = "./migen_src/encode.py:32" *)
  wire [4:0] pixel2_enc_ctr;
  (* src = "./migen_src/encode.py:31" *)
  wire [30:0] pixel2_enc_out;
  (* src = "./migen_src/encode.py:30" *)
  wire [4:0] pixel2_ssss;
  (* src = "./migen_src/encode.py:29" *)
  wire [15:0] pixel2_val_in;
  (* src = "./migen_src/encode.py:33" *)
  wire pixel2_valid;
  (* src = "./migen_src/encode.py:32" *)
  wire [4:0] pixel3_enc_ctr;
  (* src = "./migen_src/encode.py:31" *)
  wire [30:0] pixel3_enc_out;
  (* src = "./migen_src/encode.py:30" *)
  wire [4:0] pixel3_ssss;
  (* src = "./migen_src/encode.py:29" *)
  wire [15:0] pixel3_val_in;
  (* src = "./migen_src/encode.py:33" *)
  wire pixel3_valid;
  (* src = "./migen_src/encode.py:32" *)
  wire [4:0] pixel4_enc_ctr;
  (* src = "./migen_src/encode.py:31" *)
  wire [30:0] pixel4_enc_out;
  (* src = "./migen_src/encode.py:30" *)
  wire [4:0] pixel4_ssss;
  (* src = "./migen_src/encode.py:29" *)
  wire [15:0] pixel4_val_in;
  (* src = "./migen_src/encode.py:33" *)
  wire pixel4_valid;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "./migen_src/encode.py:86" *)
  input [4:0] ssss1;
  (* src = "./migen_src/encode.py:87" *)
  input [4:0] ssss2;
  (* src = "./migen_src/encode.py:88" *)
  input [4:0] ssss3;
  (* src = "./migen_src/encode.py:89" *)
  input [4:0] ssss4;
  (* src = "./migen_src/encode.py:81" *)
  input [15:0] val_in1;
  (* src = "./migen_src/encode.py:82" *)
  input [15:0] val_in2;
  (* src = "./migen_src/encode.py:83" *)
  input [15:0] val_in3;
  (* src = "./migen_src/encode.py:84" *)
  input [15:0] val_in4;
  (* src = "./migen_src/encode.py:101" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "./migen_src/encode.py:149" *)
  reg valid_late = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/encode.py:102" *)
  output valid_out;
  reg valid_out = 1'h0;
  always @(posedge clk)
      valid_out <= \$next\valid_out ;
  always @(posedge clk)
      valid_late <= \$next\valid_late ;
  pixel1 pixel1 (
    .clk(clk),
    .enc_ctr(pixel1_enc_ctr),
    .enc_out(pixel1_enc_out),
    .rst(rst),
    .ssss(pixel1_ssss),
    .val_in(pixel1_val_in),
    .valid(pixel1_valid)
  );
  pixel2 pixel2 (
    .clk(clk),
    .enc_ctr(pixel2_enc_ctr),
    .enc_out(pixel2_enc_out),
    .rst(rst),
    .ssss(pixel2_ssss),
    .val_in(pixel2_val_in),
    .valid(pixel2_valid)
  );
  pixel3 pixel3 (
    .clk(clk),
    .enc_ctr(pixel3_enc_ctr),
    .enc_out(pixel3_enc_out),
    .rst(rst),
    .ssss(pixel3_ssss),
    .val_in(pixel3_val_in),
    .valid(pixel3_valid)
  );
  pixel4 pixel4 (
    .clk(clk),
    .enc_ctr(pixel4_enc_ctr),
    .enc_out(pixel4_enc_out),
    .rst(rst),
    .ssss(pixel4_ssss),
    .val_in(pixel4_val_in),
    .valid(pixel4_valid)
  );
  always @* begin
    \$next\pixel1_val_in  = 16'h0000;
    \$next\pixel1_val_in  = val_in1;
  end
  always @* begin
    \$next\pixel1_valid  = 1'h0;
    \$next\pixel1_valid  = valid_in;
  end
  always @* begin
    \$next\pixel3_val_in  = 16'h0000;
    \$next\pixel3_val_in  = val_in3;
  end
  always @* begin
    \$next\pixel3_valid  = 1'h0;
    \$next\pixel3_valid  = valid_in;
  end
  always @* begin
    \$next\pixel3_ssss  = 5'h00;
    \$next\pixel3_ssss  = ssss3;
  end
  always @* begin
    \$next\enc_out3  = 31'h00000000;
    \$next\enc_out3  = pixel3_enc_out;
  end
  always @* begin
    \$next\enc_ctr3  = 5'h00;
    \$next\enc_ctr3  = pixel3_enc_ctr;
  end
  always @* begin
    \$next\pixel4_val_in  = 16'h0000;
    \$next\pixel4_val_in  = val_in4;
  end
  always @* begin
    \$next\pixel4_valid  = 1'h0;
    \$next\pixel4_valid  = valid_in;
  end
  always @* begin
    \$next\pixel4_ssss  = 5'h00;
    \$next\pixel4_ssss  = ssss4;
  end
  always @* begin
    \$next\enc_out4  = 31'h00000000;
    \$next\enc_out4  = pixel4_enc_out;
  end
  always @* begin
    \$next\enc_ctr4  = 5'h00;
    \$next\enc_ctr4  = pixel4_enc_ctr;
  end
  always @* begin
    \$next\pixel1_ssss  = 5'h00;
    \$next\pixel1_ssss  = ssss1;
  end
  always @* begin
    \$next\valid_late  = valid_late;
    \$next\valid_late  = valid_in;
    casez (rst)
      1'h1:
          \$next\valid_late  = 1'h0;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    \$next\valid_out  = valid_late;
    casez (rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_out1  = 31'h00000000;
    \$next\enc_out1  = pixel1_enc_out;
  end
  always @* begin
    \$next\enc_ctr1  = 5'h00;
    \$next\enc_ctr1  = pixel1_enc_ctr;
  end
  always @* begin
    \$next\pixel2_val_in  = 16'h0000;
    \$next\pixel2_val_in  = val_in2;
  end
  always @* begin
    \$next\pixel2_valid  = 1'h0;
    \$next\pixel2_valid  = valid_in;
  end
  always @* begin
    \$next\pixel2_ssss  = 5'h00;
    \$next\pixel2_ssss  = ssss2;
  end
  always @* begin
    \$next\enc_out2  = 31'h00000000;
    \$next\enc_out2  = pixel2_enc_out;
  end
  always @* begin
    \$next\enc_ctr2  = 5'h00;
    \$next\enc_ctr2  = pixel2_enc_ctr;
  end
  assign enc_ctr4 = \$next\enc_ctr4 ;
  assign enc_out4 = \$next\enc_out4 ;
  assign pixel4_ssss = \$next\pixel4_ssss ;
  assign pixel4_valid = \$next\pixel4_valid ;
  assign pixel4_val_in = \$next\pixel4_val_in ;
  assign enc_ctr3 = \$next\enc_ctr3 ;
  assign enc_out3 = \$next\enc_out3 ;
  assign pixel3_ssss = \$next\pixel3_ssss ;
  assign pixel3_valid = \$next\pixel3_valid ;
  assign pixel3_val_in = \$next\pixel3_val_in ;
  assign enc_ctr2 = \$next\enc_ctr2 ;
  assign enc_out2 = \$next\enc_out2 ;
  assign pixel2_ssss = \$next\pixel2_ssss ;
  assign pixel2_valid = \$next\pixel2_valid ;
  assign pixel2_val_in = \$next\pixel2_val_in ;
  assign enc_ctr1 = \$next\enc_ctr1 ;
  assign enc_out1 = \$next\enc_out1 ;
  assign pixel1_ssss = \$next\pixel1_ssss ;
  assign pixel1_valid = \$next\pixel1_valid ;
  assign pixel1_val_in = \$next\pixel1_val_in ;
endmodule

