/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(left_enc_ctr, left_end, left_valid, right_close_full, rst, clk, left_close_full, right_enc, right_enc_ctr, right_end, right_valid, left_enc);
  (* src = "./migen_src/converter_reg.py:23" *)
  reg \$next\left_close_full ;
  (* src = "./migen_src/converter_reg.py:26" *)
  reg [35:0] \$next\right_enc ;
  (* src = "./migen_src/converter_reg.py:27" *)
  reg [5:0] \$next\right_enc_ctr ;
  (* src = "./migen_src/converter_reg.py:28" *)
  reg \$next\right_end ;
  (* src = "./migen_src/converter_reg.py:29" *)
  reg \$next\right_valid ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter_reg.py:23" *)
  output left_close_full;
  reg left_close_full = 1'h0;
  (* src = "./migen_src/converter_reg.py:19" *)
  input [35:0] left_enc;
  (* src = "./migen_src/converter_reg.py:20" *)
  input [5:0] left_enc_ctr;
  (* src = "./migen_src/converter_reg.py:21" *)
  input left_end;
  (* src = "./migen_src/converter_reg.py:22" *)
  input left_valid;
  (* src = "./migen_src/converter_reg.py:30" *)
  input right_close_full;
  (* init = 36'h000000000 *)
  (* src = "./migen_src/converter_reg.py:26" *)
  output [35:0] right_enc;
  reg [35:0] right_enc = 36'h000000000;
  (* init = 6'h00 *)
  (* src = "./migen_src/converter_reg.py:27" *)
  output [5:0] right_enc_ctr;
  reg [5:0] right_enc_ctr = 6'h00;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter_reg.py:28" *)
  output right_end;
  reg right_end = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter_reg.py:29" *)
  output right_valid;
  reg right_valid = 1'h0;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  always @(posedge clk)
      left_close_full <= \$next\left_close_full ;
  always @(posedge clk)
      right_valid <= \$next\right_valid ;
  always @(posedge clk)
      right_end <= \$next\right_end ;
  always @(posedge clk)
      right_enc_ctr <= \$next\right_enc_ctr ;
  always @(posedge clk)
      right_enc <= \$next\right_enc ;
  always @* begin
    \$next\right_enc  = right_enc;
    \$next\right_enc  = left_enc;
    casez (rst)
      1'h1:
          \$next\right_enc  = 36'h000000000;
    endcase
  end
  always @* begin
    \$next\right_enc_ctr  = right_enc_ctr;
    \$next\right_enc_ctr  = left_enc_ctr;
    casez (rst)
      1'h1:
          \$next\right_enc_ctr  = 6'h00;
    endcase
  end
  always @* begin
    \$next\right_end  = right_end;
    \$next\right_end  = left_end;
    casez (rst)
      1'h1:
          \$next\right_end  = 1'h0;
    endcase
  end
  always @* begin
    \$next\right_valid  = right_valid;
    \$next\right_valid  = left_valid;
    casez (rst)
      1'h1:
          \$next\right_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\left_close_full  = left_close_full;
    \$next\left_close_full  = right_close_full;
    casez (rst)
      1'h1:
          \$next\left_close_full  = 1'h0;
    endcase
  end
endmodule

