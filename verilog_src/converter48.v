/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(close_full, enc_out_ctr, enc_out, out_end, zeros, rst, clk, latch_output, enc_in, enc_in_ctr, in_end, valid_in, valid_out);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire [7:0] \$31 ;
  wire [7:0] \$32 ;
  wire [7:0] \$34 ;
  wire [7:0] \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "./migen_src/converter48.py:19" *)
  reg [47:0] \$next\enc_in ;
  (* src = "./migen_src/converter48.py:20" *)
  reg [5:0] \$next\enc_in_ctr ;
  (* src = "./migen_src/converter48.py:34" *)
  reg [95:0] \$next\enc_out_latch ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [1:0] \$next\fsm_state ;
  (* src = "./migen_src/converter48.py:21" *)
  reg \$next\in_end ;
  (* src = "./migen_src/converter48.py:12" *)
  reg \$next\latch_output ;
  (* src = "./migen_src/converter48.py:35" *)
  reg \$next\out_end_latch ;
  (* src = "./migen_src/converter48.py:22" *)
  reg \$next\valid_in ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "./migen_src/converter48.py:23" *)
  input close_full;
  (* init = 48'h000000000000 *)
  (* src = "./migen_src/converter48.py:19" *)
  output [47:0] enc_in;
  reg [47:0] enc_in = 48'h000000000000;
  (* init = 6'h00 *)
  (* src = "./migen_src/converter48.py:20" *)
  output [5:0] enc_in_ctr;
  reg [5:0] enc_in_ctr = 6'h00;
  (* src = "./migen_src/converter48.py:13" *)
  input [123:0] enc_out;
  (* src = "./migen_src/converter48.py:14" *)
  input [6:0] enc_out_ctr;
  (* init = 96'h000000000000000000000000 *)
  (* src = "./migen_src/converter48.py:34" *)
  reg [95:0] enc_out_latch = 96'h000000000000000000000000;
  (* init = 2'h0 *)
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [1:0] fsm_state = 2'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter48.py:21" *)
  output in_end;
  reg in_end = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter48.py:12" *)
  output latch_output;
  reg latch_output = 1'h0;
  (* src = "./migen_src/converter48.py:15" *)
  input out_end;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter48.py:35" *)
  reg out_end_latch = 1'h0;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter48.py:22" *)
  output valid_in;
  reg valid_in = 1'h0;
  (* src = "./migen_src/converter48.py:16" *)
  input valid_out;
  (* src = "./migen_src/converter48.py:37" *)
  input [19:0] zeros;
  assign \$9  = close_full == (* src = "./migen_src/converter48.py:43" *) 1'h0;
  assign \$11  = valid_out & (* src = "./migen_src/converter48.py:43" *) \$9 ;
  assign \$13  = enc_out_ctr <= (* src = "./migen_src/converter48.py:53" *) 6'h30;
  assign \$15  = enc_out_ctr <= (* src = "./migen_src/converter48.py:76" *) 7'h60;
  assign \$17  = enc_out_ctr <= (* src = "./migen_src/converter48.py:82" *) 7'h7f;
  assign \$1  = enc_out_ctr <= (* src = "./migen_src/converter48.py:53" *) 6'h30;
  assign \$19  = enc_out_ctr <= (* src = "./migen_src/converter48.py:53" *) 6'h30;
  assign \$21  = enc_out_ctr <= (* src = "./migen_src/converter48.py:76" *) 7'h60;
  assign \$23  = enc_out_ctr <= (* src = "./migen_src/converter48.py:82" *) 7'h7f;
  assign \$25  = enc_out_ctr <= (* src = "./migen_src/converter48.py:53" *) 6'h30;
  assign \$27  = enc_out_ctr <= (* src = "./migen_src/converter48.py:76" *) 7'h60;
  assign \$29  = enc_out_ctr <= (* src = "./migen_src/converter48.py:82" *) 7'h7f;
  assign \$32  = enc_out_ctr - (* src = "./migen_src/converter48.py:79" *) 6'h30;
  assign \$35  = enc_out_ctr - (* src = "./migen_src/converter48.py:85" *) 7'h60;
  assign \$37  = enc_out_ctr <= (* src = "./migen_src/converter48.py:53" *) 6'h30;
  assign \$3  = close_full == (* src = "./migen_src/converter48.py:43" *) 1'h0;
  assign \$39  = enc_out_ctr <= (* src = "./migen_src/converter48.py:53" *) 6'h30;
  assign \$41  = enc_out_ctr <= (* src = "./migen_src/converter48.py:53" *) 6'h30;
  assign \$5  = valid_out & (* src = "./migen_src/converter48.py:43" *) \$3 ;
  assign \$7  = enc_out_ctr <= (* src = "./migen_src/converter48.py:53" *) 6'h30;
  always @(posedge clk)
      out_end_latch <= \$next\out_end_latch ;
  always @(posedge clk)
      enc_out_latch <= \$next\enc_out_latch ;
  always @(posedge clk)
      in_end <= \$next\in_end ;
  always @(posedge clk)
      enc_in_ctr <= \$next\enc_in_ctr ;
  always @(posedge clk)
      enc_in <= \$next\enc_in ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      latch_output <= \$next\latch_output ;
  always @(posedge clk)
      valid_in <= \$next\valid_in ;
  always @* begin
    \$next\valid_in  = valid_in;
    casez (fsm_state)
      2'h0:
          \$next\valid_in  = 1'h0;
      2'h1:
          casez (valid_out)
            1'h1:
                casez (\$1 )
                  1'h1:
                      \$next\valid_in  = 1'h1;
                  1'hz:
                      \$next\valid_in  = 1'h1;
                endcase
            1'hz:
                \$next\valid_in  = 1'h0;
          endcase
      2'h2:
          \$next\valid_in  = 1'h1;
      2'h3:
          \$next\valid_in  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_in  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_output  = latch_output;
    casez (fsm_state)
      2'h0:
          casez (\$5 )
            1'h1:
                \$next\latch_output  = 1'h1;
          endcase
      2'h1:
          casez (valid_out)
            1'h1:
                casez (\$7 )
                  1'h1:
                      casez (close_full)
                        1'h1:
                            \$next\latch_output  = 1'h0;
                      endcase
                  1'hz:
                      \$next\latch_output  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\latch_output  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      2'h0:
          casez (\$11 )
            1'h1:
                \$next\fsm_state  = 2'h1;
          endcase
      2'h1:
          casez (valid_out)
            1'h1:
                casez (\$13 )
                  1'h1:
                      casez (close_full)
                        1'h1:
                            \$next\fsm_state  = 2'h0;
                      endcase
                  1'hz:
                      casez ({ \$17 , \$15  })
                        2'bz1:
                            \$next\fsm_state  = 2'h2;
                        2'b1z:
                            \$next\fsm_state  = 2'h3;
                      endcase
                endcase
          endcase
      2'h2:
          \$next\fsm_state  = 2'h0;
      2'h3:
          \$next\fsm_state  = 2'h2;
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 2'h0;
    endcase
  end
  always @* begin
    \$next\enc_in  = enc_in;
    casez (fsm_state)
      2'h1:
          casez (valid_out)
            1'h1:
                casez (\$19 )
                  1'h1:
                      \$next\enc_in  = enc_out[47:0];
                  1'hz:
                      casez ({ \$23 , \$21  })
                        2'bz1:
                            \$next\enc_in  = enc_out[95:48];
                        2'b1z:
                            \$next\enc_in  = { zeros, enc_out[123:96] };
                      endcase
                endcase
          endcase
      2'h2:
          \$next\enc_in  = enc_out_latch[47:0];
      2'h3:
          \$next\enc_in  = enc_out_latch[95:48];
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in  = 48'h000000000000;
    endcase
  end
  always @* begin
    \$next\enc_in_ctr  = enc_in_ctr;
    casez (fsm_state)
      2'h1:
          casez (valid_out)
            1'h1:
                casez (\$25 )
                  1'h1:
                      \$next\enc_in_ctr  = enc_out_ctr[5:0];
                  1'hz:
                    begin
                      \$next\enc_in_ctr  = 6'h30;
                      casez ({ \$29 , \$27  })
                        2'bz1:
                            \$next\enc_in_ctr  = \$31 [5:0];
                        2'b1z:
                            \$next\enc_in_ctr  = \$34 [5:0];
                      endcase
                    end
                endcase
          endcase
      2'h2:
          \$next\enc_in_ctr  = 6'h30;
      2'h3:
          \$next\enc_in_ctr  = 6'h30;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_ctr  = 6'h00;
    endcase
  end
  always @* begin
    \$next\in_end  = in_end;
    casez (fsm_state)
      2'h1:
          casez (valid_out)
            1'h1:
                casez (\$37 )
                  1'h1:
                      \$next\in_end  = out_end;
                  1'hz:
                      \$next\in_end  = 1'h0;
                endcase
          endcase
      2'h2:
          \$next\in_end  = out_end_latch;
      2'h3:
          \$next\in_end  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\in_end  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_out_latch  = enc_out_latch;
    casez (fsm_state)
      2'h1:
          casez (valid_out)
            1'h1:
                casez (\$39 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\enc_out_latch  = enc_out[95:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out_latch  = 96'h000000000000000000000000;
    endcase
  end
  always @* begin
    \$next\out_end_latch  = out_end_latch;
    casez (fsm_state)
      2'h1:
          casez (valid_out)
            1'h1:
                casez (\$41 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\out_end_latch  = out_end;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\out_end_latch  = 1'h0;
    endcase
  end
  assign \$31  = \$32 ;
  assign \$34  = \$35 ;
endmodule

