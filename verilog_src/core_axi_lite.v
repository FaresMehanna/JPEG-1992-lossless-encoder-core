/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top.debug_module" *)
(* generator = "nMigen" *)
module debug_module(rst, clk, \$signal , \$signal$1 , \$signal$2 , \$signal$3 , \$signal$4 , \$signal$5 , \$signal$6 , \$signal$7 , regs_en);
  wire [32:0] \$11 ;
  wire [32:0] \$12 ;
  wire [32:0] \$14 ;
  wire [32:0] \$15 ;
  wire [32:0] \$17 ;
  wire [32:0] \$18 ;
  wire [32:0] \$20 ;
  wire [32:0] \$21 ;
  wire [32:0] \$23 ;
  wire [32:0] \$24 ;
  wire [32:0] \$26 ;
  wire [32:0] \$27 ;
  wire [32:0] \$29 ;
  wire [32:0] \$30 ;
  wire [32:0] \$8 ;
  wire [32:0] \$9 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  reg [31:0] \$next$signal ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  reg [31:0] \$next$signal$1 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  reg [31:0] \$next$signal$2 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  reg [31:0] \$next$signal$3 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  reg [31:0] \$next$signal$4 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  reg [31:0] \$next$signal$5 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  reg [31:0] \$next$signal$6 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  reg [31:0] \$next$signal$7 ;
  (* init = 32'd0 *)
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  output [31:0] \$signal ;
  reg [31:0] \$signal  = 32'd0;
  (* init = 32'd0 *)
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  output [31:0] \$signal$1 ;
  reg [31:0] \$signal$1  = 32'd0;
  (* init = 32'd0 *)
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  output [31:0] \$signal$2 ;
  reg [31:0] \$signal$2  = 32'd0;
  (* init = 32'd0 *)
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  output [31:0] \$signal$3 ;
  reg [31:0] \$signal$3  = 32'd0;
  (* init = 32'd0 *)
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  output [31:0] \$signal$4 ;
  reg [31:0] \$signal$4  = 32'd0;
  (* init = 32'd0 *)
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  output [31:0] \$signal$5 ;
  reg [31:0] \$signal$5  = 32'd0;
  (* init = 32'd0 *)
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  output [31:0] \$signal$6 ;
  reg [31:0] \$signal$6  = 32'd0;
  (* init = 32'd0 *)
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  output [31:0] \$signal$7 ;
  reg [31:0] \$signal$7  = 32'd0;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/clk_domains.py:4" *)
  input clk;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:36" *)
  input [7:0] regs_en;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/clk_domains.py:4" *)
  input rst;
  assign \$9  = \$signal  + (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:49" *) 1'h1;
  assign \$12  = \$signal$1  + (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:49" *) 1'h1;
  assign \$15  = \$signal$2  + (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:49" *) 1'h1;
  assign \$18  = \$signal$3  + (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:49" *) 1'h1;
  assign \$21  = \$signal$4  + (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:49" *) 1'h1;
  assign \$24  = \$signal$5  + (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:49" *) 1'h1;
  assign \$27  = \$signal$6  + (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:49" *) 1'h1;
  assign \$30  = \$signal$7  + (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:49" *) 1'h1;
  always @(posedge clk)
      \$signal$7  <= \$next$signal$7 ;
  always @(posedge clk)
      \$signal$6  <= \$next$signal$6 ;
  always @(posedge clk)
      \$signal$5  <= \$next$signal$5 ;
  always @(posedge clk)
      \$signal$4  <= \$next$signal$4 ;
  always @(posedge clk)
      \$signal$3  <= \$next$signal$3 ;
  always @(posedge clk)
      \$signal$2  <= \$next$signal$2 ;
  always @(posedge clk)
      \$signal$1  <= \$next$signal$1 ;
  always @(posedge clk)
      \$signal  <= \$next$signal ;
  always @* begin
    \$next$signal  = \$signal ;
    casez (regs_en[0])
      1'h1:
          \$next$signal  = \$8 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next$signal  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$1  = \$signal$1 ;
    casez (regs_en[1])
      1'h1:
          \$next$signal$1  = \$11 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next$signal$1  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$2  = \$signal$2 ;
    casez (regs_en[2])
      1'h1:
          \$next$signal$2  = \$14 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next$signal$2  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$3  = \$signal$3 ;
    casez (regs_en[3])
      1'h1:
          \$next$signal$3  = \$17 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next$signal$3  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$4  = \$signal$4 ;
    casez (regs_en[4])
      1'h1:
          \$next$signal$4  = \$20 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next$signal$4  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$5  = \$signal$5 ;
    casez (regs_en[5])
      1'h1:
          \$next$signal$5  = \$23 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next$signal$5  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$6  = \$signal$6 ;
    casez (regs_en[6])
      1'h1:
          \$next$signal$6  = \$26 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next$signal$6  = 32'd0;
    endcase
  end
  always @* begin
    \$next$signal$7  = \$signal$7 ;
    casez (regs_en[7])
      1'h1:
          \$next$signal$7  = \$29 [31:0];
    endcase
    casez (rst)
      1'h1:
          \$next$signal$7  = 32'd0;
    endcase
  end
  assign \$8  = \$9 ;
  assign \$11  = \$12 ;
  assign \$14  = \$15 ;
  assign \$17  = \$18 ;
  assign \$20  = \$21 ;
  assign \$23  = \$24 ;
  assign \$26  = \$27 ;
  assign \$29  = \$30 ;
endmodule

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(rp_data, s_axi_ri__arvalid, s_axi_wi__awvalid, s_axi_ri__araddr, s_axi_ri__rready, s_axi_wi__awaddr, s_axi_wi__wvalid, s_axi_wi__wdata, s_axi_wi__wstrb, s_axi_wi__bready, axi_lite_rst, rst, axi_lite_clk, clk, height, width, allowed_cycles, wp_addr, wp_data, wp_en, rp_addr, s_axi_ro__arready, s_axi_ro__rdata, s_axi_ro__rresp, s_axi_ro__rvalid, s_axi_wo__awready, s_axi_wo__wready, s_axi_wo__bresp, s_axi_wo__bvalid, debug_en);
  wire \$100 ;
  wire \$102 ;
  wire \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire \$116 ;
  wire \$118 ;
  wire \$120 ;
  wire \$122 ;
  wire \$124 ;
  wire \$126 ;
  wire \$128 ;
  wire \$130 ;
  wire \$132 ;
  wire \$134 ;
  wire \$136 ;
  wire \$138 ;
  wire \$140 ;
  wire \$142 ;
  wire \$144 ;
  wire \$146 ;
  wire \$148 ;
  wire [63:0] \$15 ;
  wire \$150 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire [7:0] \$29 ;
  wire [7:0] \$31 ;
  wire [7:0] \$33 ;
  wire [7:0] \$35 ;
  wire [31:0] \$37 ;
  wire [31:0] \$39 ;
  wire [31:0] \$41 ;
  wire [31:0] \$42 ;
  wire [31:0] \$44 ;
  wire [31:0] \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire [31:0] \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire [5:0] \$85 ;
  wire [5:0] \$86 ;
  wire \$88 ;
  wire \$90 ;
  wire \$92 ;
  wire \$94 ;
  wire \$96 ;
  wire \$98 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  reg [31:0] \$next$signal ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  reg [31:0] \$next$signal$10 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  reg [31:0] \$next$signal$11 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  reg [31:0] \$next$signal$12 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  reg [31:0] \$next$signal$13 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  reg [31:0] \$next$signal$14 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  reg [31:0] \$next$signal$8 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  reg [31:0] \$next$signal$9 ;
  (* src = "./migen_src/core_axi_lite.py:163" *)
  reg [31:0] \$next\addr_v ;
  (* src = "./migen_src/core_axi_lite.py:84" *)
  reg [23:0] \$next\allowed_cycles ;
  (* src = "./migen_src/core_axi_lite.py:165" *)
  reg \$next\arready_v ;
  (* src = "./migen_src/core_axi_lite.py:168" *)
  reg \$next\awready_v ;
  (* src = "./migen_src/core_axi_lite.py:175" *)
  reg [1:0] \$next\bresp_v ;
  (* src = "./migen_src/core_axi_lite.py:170" *)
  reg \$next\bvalid_v ;
  (* src = "./migen_src/core_axi_lite.py:189" *)
  reg \$next\debug_enable ;
  (* src = "./migen_src/core_axi_lite.py:191" *)
  reg [2:0] \$next\debug_index ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:36" *)
  reg [7:0] \$next\debug_module_regs_en ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [3:0] \$next\fsm_state ;
  (* src = "./migen_src/core_axi_lite.py:80" *)
  reg [15:0] \$next\height ;
  (* src = "./migen_src/core_axi_lite.py:111" *)
  reg [31:0] \$next\height_width ;
  (* src = "./migen_src/core_axi_lite.py:188" *)
  reg \$next\hw_enable ;
  (* src = "./migen_src/core_axi_lite.py:192" *)
  reg \$next\hw_index ;
  (* src = "./migen_src/core_axi_lite.py:172" *)
  reg [31:0] \$next\rdata_v ;
  (* src = "./migen_src/core_axi_lite.py:100" *)
  reg [4:0] \$next\rp_addr ;
  (* src = "./migen_src/core_axi_lite.py:208" *)
  reg [63:0] \$next\rp_data64 ;
  (* src = "./migen_src/core_axi_lite.py:207" *)
  reg [63:0] \$next\rp_data64_in ;
  (* src = "./migen_src/core_axi_lite.py:173" *)
  reg [1:0] \$next\rresp_v ;
  (* src = "./migen_src/core_axi_lite.py:166" *)
  reg \$next\rvalid_v ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  reg \$next\s_axi_ro__arready ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  reg [31:0] \$next\s_axi_ro__rdata ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  reg [1:0] \$next\s_axi_ro__rresp ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  reg \$next\s_axi_ro__rvalid ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  reg \$next\s_axi_wo__awready ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  reg [1:0] \$next\s_axi_wo__bresp ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  reg \$next\s_axi_wo__bvalid ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  reg \$next\s_axi_wo__wready ;
  (* src = "./migen_src/core_axi_lite.py:187" *)
  reg \$next\ssss_enable ;
  (* src = "./migen_src/core_axi_lite.py:190" *)
  reg [5:0] \$next\ssss_index ;
  (* src = "./migen_src/core_axi_lite.py:178" *)
  reg [31:0] \$next\wdata_v ;
  (* src = "./migen_src/core_axi_lite.py:81" *)
  reg [15:0] \$next\width ;
  (* src = "./migen_src/core_axi_lite.py:95" *)
  reg [4:0] \$next\wp_addr ;
  (* src = "./migen_src/core_axi_lite.py:96" *)
  reg [32:0] \$next\wp_data ;
  (* src = "./migen_src/core_axi_lite.py:97" *)
  reg \$next\wp_en ;
  (* src = "./migen_src/core_axi_lite.py:169" *)
  reg \$next\wready_v ;
  (* src = "./migen_src/core_axi_lite.py:179" *)
  reg [3:0] \$next\wstrb_v ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  wire [31:0] \$signal ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  wire [31:0] \$signal$10 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  wire [31:0] \$signal$11 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  wire [31:0] \$signal$12 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  wire [31:0] \$signal$13 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  wire [31:0] \$signal$14 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  wire [31:0] \$signal$8 ;
  (* src = "./migen_src/core_axi_lite.py:152" *)
  wire [31:0] \$signal$9 ;
  (* init = 32'd0 *)
  (* src = "./migen_src/core_axi_lite.py:163" *)
  reg [31:0] addr_v = 32'd0;
  (* init = 24'h000000 *)
  (* src = "./migen_src/core_axi_lite.py:84" *)
  output [23:0] allowed_cycles;
  reg [23:0] allowed_cycles = 24'h000000;
  (* init = 1'h0 *)
  (* src = "./migen_src/core_axi_lite.py:165" *)
  reg arready_v = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/core_axi_lite.py:168" *)
  reg awready_v = 1'h0;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/clk_domains.py:3" *)
  input axi_lite_clk;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/clk_domains.py:3" *)
  input axi_lite_rst;
  (* init = 2'h0 *)
  (* src = "./migen_src/core_axi_lite.py:175" *)
  reg [1:0] bresp_v = 2'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/core_axi_lite.py:170" *)
  reg bvalid_v = 1'h0;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/clk_domains.py:4" *)
  input clk;
  (* src = "./migen_src/core_axi_lite.py:108" *)
  input [7:0] debug_en;
  (* src = "./migen_src/core_axi_lite.py:189" *)
  wire debug_enable;
  (* src = "./migen_src/core_axi_lite.py:191" *)
  wire [2:0] debug_index;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  wire [31:0] \debug_module_$signal ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  wire [31:0] \debug_module_$signal$1 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  wire [31:0] \debug_module_$signal$2 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  wire [31:0] \debug_module_$signal$3 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  wire [31:0] \debug_module_$signal$4 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  wire [31:0] \debug_module_$signal$5 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  wire [31:0] \debug_module_$signal$6 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:35" *)
  wire [31:0] \debug_module_$signal$7 ;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/debug_module.py:36" *)
  wire [7:0] debug_module_regs_en;
  (* init = 4'h0 *)
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [3:0] fsm_state = 4'h0;
  (* src = "./migen_src/core_axi_lite.py:80" *)
  output [15:0] height;
  (* init = 32'd0 *)
  (* src = "./migen_src/core_axi_lite.py:111" *)
  reg [31:0] height_width = 32'd0;
  (* src = "./migen_src/core_axi_lite.py:188" *)
  wire hw_enable;
  (* src = "./migen_src/core_axi_lite.py:192" *)
  wire hw_index;
  (* init = 32'd0 *)
  (* src = "./migen_src/core_axi_lite.py:172" *)
  reg [31:0] rdata_v = 32'd0;
  (* init = 5'h00 *)
  (* src = "./migen_src/core_axi_lite.py:100" *)
  output [4:0] rp_addr;
  reg [4:0] rp_addr = 5'h00;
  (* src = "./migen_src/core_axi_lite.py:101" *)
  input [32:0] rp_data;
  (* src = "./migen_src/core_axi_lite.py:208" *)
  wire [63:0] rp_data64;
  (* src = "./migen_src/core_axi_lite.py:207" *)
  wire [63:0] rp_data64_in;
  (* init = 2'h0 *)
  (* src = "./migen_src/core_axi_lite.py:173" *)
  reg [1:0] rresp_v = 2'h0;
  (* src = "/Users/faresmehanna/Projects/lj92/temp/JPEG-1992-lossless-encoder-core/migen_src/clk_domains.py:4" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "./migen_src/core_axi_lite.py:166" *)
  reg rvalid_v = 1'h0;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  input [31:0] s_axi_ri__araddr;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  input s_axi_ri__arvalid;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  input s_axi_ri__rready;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  output s_axi_ro__arready;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  output [31:0] s_axi_ro__rdata;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  output [1:0] s_axi_ro__rresp;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  output s_axi_ro__rvalid;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  input [31:0] s_axi_wi__awaddr;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  input s_axi_wi__awvalid;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  input s_axi_wi__bready;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  input [31:0] s_axi_wi__wdata;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  input [3:0] s_axi_wi__wstrb;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  input s_axi_wi__wvalid;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  output s_axi_wo__awready;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  output [1:0] s_axi_wo__bresp;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  output s_axi_wo__bvalid;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/rec.py:84" *)
  output s_axi_wo__wready;
  (* src = "./migen_src/core_axi_lite.py:187" *)
  wire ssss_enable;
  (* src = "./migen_src/core_axi_lite.py:190" *)
  wire [5:0] ssss_index;
  (* src = "./migen_src/core_axi_lite.py:178" *)
  wire [31:0] wdata_v;
  (* src = "./migen_src/core_axi_lite.py:81" *)
  output [15:0] width;
  (* init = 5'h00 *)
  (* src = "./migen_src/core_axi_lite.py:95" *)
  output [4:0] wp_addr;
  reg [4:0] wp_addr = 5'h00;
  (* init = 33'h000000000 *)
  (* src = "./migen_src/core_axi_lite.py:96" *)
  output [32:0] wp_data;
  reg [32:0] wp_data = 33'h000000000;
  (* init = 1'h0 *)
  (* src = "./migen_src/core_axi_lite.py:97" *)
  output wp_en;
  reg wp_en = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/core_axi_lite.py:169" *)
  reg wready_v = 1'h0;
  (* src = "./migen_src/core_axi_lite.py:179" *)
  wire [3:0] wstrb_v;
  assign \$100  = ssss_index < (* src = "./migen_src/core_axi_lite.py:373" *) 5'h1a;
  assign \$102  = \$98  & (* src = "./migen_src/core_axi_lite.py:373" *) \$100 ;
  assign \$104  = hw_enable == (* src = "./migen_src/core_axi_lite.py:376" *) 1'h1;
  assign \$106  = debug_enable == (* src = "./migen_src/core_axi_lite.py:380" *) 1'h1;
  assign \$108  = ssss_enable == (* src = "./migen_src/core_axi_lite.py:373" *) 1'h1;
  assign \$110  = ssss_index < (* src = "./migen_src/core_axi_lite.py:373" *) 5'h1a;
  assign \$112  = \$108  & (* src = "./migen_src/core_axi_lite.py:373" *) \$110 ;
  assign \$114  = hw_enable == (* src = "./migen_src/core_axi_lite.py:376" *) 1'h1;
  assign \$116  = debug_enable == (* src = "./migen_src/core_axi_lite.py:380" *) 1'h1;
  assign \$118  = ssss_enable == (* src = "./migen_src/core_axi_lite.py:373" *) 1'h1;
  assign \$120  = ssss_index < (* src = "./migen_src/core_axi_lite.py:373" *) 5'h1a;
  assign \$122  = \$118  & (* src = "./migen_src/core_axi_lite.py:373" *) \$120 ;
  assign \$124  = hw_enable == (* src = "./migen_src/core_axi_lite.py:376" *) 1'h1;
  assign \$126  = debug_enable == (* src = "./migen_src/core_axi_lite.py:380" *) 1'h1;
  assign \$128  = hw_index == (* src = "./migen_src/core_axi_lite.py:230" *) 1'h0;
  assign \$130  = hw_index == (* src = "./migen_src/core_axi_lite.py:230" *) 1'h0;
  assign \$132  = hw_index == (* src = "./migen_src/core_axi_lite.py:230" *) 1'h0;
  assign \$134  = hw_index == (* src = "./migen_src/core_axi_lite.py:230" *) 1'h0;
  assign \$136  = ssss_enable == (* src = "./migen_src/core_axi_lite.py:373" *) 1'h1;
  assign \$138  = ssss_index < (* src = "./migen_src/core_axi_lite.py:373" *) 5'h1a;
  assign \$140  = \$136  & (* src = "./migen_src/core_axi_lite.py:373" *) \$138 ;
  assign \$142  = hw_enable == (* src = "./migen_src/core_axi_lite.py:376" *) 1'h1;
  assign \$144  = debug_enable == (* src = "./migen_src/core_axi_lite.py:380" *) 1'h1;
  assign \$146  = hw_index == (* src = "./migen_src/core_axi_lite.py:230" *) 1'h0;
  assign \$148  = hw_index == (* src = "./migen_src/core_axi_lite.py:230" *) 1'h0;
  assign \$150  = hw_index == (* src = "./migen_src/core_axi_lite.py:230" *) 1'h0;
  assign \$15  = + (* src = "./migen_src/core_axi_lite.py:101" *) rp_data;
  assign \$17  = ssss_enable == (* src = "./migen_src/core_axi_lite.py:373" *) 1'h1;
  assign \$19  = ssss_index < (* src = "./migen_src/core_axi_lite.py:373" *) 5'h1a;
  assign \$21  = \$17  & (* src = "./migen_src/core_axi_lite.py:373" *) \$19 ;
  assign \$23  = hw_enable == (* src = "./migen_src/core_axi_lite.py:376" *) 1'h1;
  assign \$25  = debug_enable == (* src = "./migen_src/core_axi_lite.py:380" *) 1'h1;
  assign \$27  = ssss_index[0] == (* src = "./migen_src/core_axi_lite.py:252" *) 1'h0;
  assign \$29  = + (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ast.py:123" *) "";
  assign \$31  = + (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ast.py:123" *) "";
  assign \$33  = + (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ast.py:123" *) "";
  assign \$35  = + (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ast.py:123" *) "";
  assign \$37  = s_axi_ri__araddr >>> (* src = "./migen_src/core_axi_lite.py:310" *) 2'h2;
  assign \$39  = s_axi_wi__awaddr >>> (* src = "./migen_src/core_axi_lite.py:349" *) 2'h2;
  assign \$42  = s_axi_ri__araddr >>> (* src = "./migen_src/core_axi_lite.py:311" *) 2'h3;
  assign \$45  = s_axi_wi__awaddr >>> (* src = "./migen_src/core_axi_lite.py:350" *) 2'h3;
  assign \$47  = ssss_enable == (* src = "./migen_src/core_axi_lite.py:328" *) 1'h1;
  assign \$49  = ssss_index < (* src = "./migen_src/core_axi_lite.py:328" *) 5'h1a;
  assign \$51  = \$47  & (* src = "./migen_src/core_axi_lite.py:328" *) \$49 ;
  assign \$53  = hw_enable == (* src = "./migen_src/core_axi_lite.py:331" *) 1'h1;
  assign \$55  = debug_enable == (* src = "./migen_src/core_axi_lite.py:335" *) 1'h1;
  assign \$57  = ssss_index[0] == (* src = "./migen_src/core_axi_lite.py:243" *) 1'h0;
  assign \$59  = hw_index == (* src = "./migen_src/core_axi_lite.py:214" *) 1'h0;
  assign \$61  = + (* src = "./migen_src/core_axi_lite.py:84" *) allowed_cycles;
  assign \$63  = ssss_enable == (* src = "./migen_src/core_axi_lite.py:328" *) 1'h1;
  assign \$65  = ssss_index < (* src = "./migen_src/core_axi_lite.py:328" *) 5'h1a;
  assign \$67  = \$63  & (* src = "./migen_src/core_axi_lite.py:328" *) \$65 ;
  assign \$69  = hw_enable == (* src = "./migen_src/core_axi_lite.py:331" *) 1'h1;
  assign \$71  = debug_enable == (* src = "./migen_src/core_axi_lite.py:335" *) 1'h1;
  assign \$73  = hw_index == (* src = "./migen_src/core_axi_lite.py:214" *) 1'h0;
  assign \$75  = ssss_enable == (* src = "./migen_src/core_axi_lite.py:373" *) 1'h1;
  assign \$77  = ssss_index < (* src = "./migen_src/core_axi_lite.py:373" *) 5'h1a;
  assign \$79  = \$75  & (* src = "./migen_src/core_axi_lite.py:373" *) \$77 ;
  assign \$81  = hw_enable == (* src = "./migen_src/core_axi_lite.py:376" *) 1'h1;
  assign \$83  = debug_enable == (* src = "./migen_src/core_axi_lite.py:380" *) 1'h1;
  assign \$86  = ssss_index >>> (* src = "./migen_src/core_axi_lite.py:270" *) 1'h1;
  assign \$88  = ssss_enable == (* src = "./migen_src/core_axi_lite.py:373" *) 1'h1;
  assign \$90  = ssss_index < (* src = "./migen_src/core_axi_lite.py:373" *) 5'h1a;
  assign \$92  = \$88  & (* src = "./migen_src/core_axi_lite.py:373" *) \$90 ;
  assign \$94  = hw_enable == (* src = "./migen_src/core_axi_lite.py:376" *) 1'h1;
  assign \$96  = debug_enable == (* src = "./migen_src/core_axi_lite.py:380" *) 1'h1;
  assign \$98  = ssss_enable == (* src = "./migen_src/core_axi_lite.py:373" *) 1'h1;
  always @(posedge axi_lite_clk)
      allowed_cycles <= \$next\allowed_cycles ;
  always @(posedge axi_lite_clk)
      rdata_v <= \$next\rdata_v ;
  always @(posedge axi_lite_clk)
      arready_v <= \$next\arready_v ;
  always @(posedge axi_lite_clk)
      rp_addr <= \$next\rp_addr ;
  always @(posedge axi_lite_clk)
      addr_v <= \$next\addr_v ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge axi_lite_clk)
      bvalid_v <= \$next\bvalid_v ;
  always @(posedge axi_lite_clk)
      rvalid_v <= \$next\rvalid_v ;
  always @(posedge axi_lite_clk)
      height_width <= \$next\height_width ;
  always @(posedge axi_lite_clk)
      bresp_v <= \$next\bresp_v ;
  always @(posedge axi_lite_clk)
      wp_en <= \$next\wp_en ;
  always @(posedge axi_lite_clk)
      wp_data <= \$next\wp_data ;
  always @(posedge axi_lite_clk)
      wp_addr <= \$next\wp_addr ;
  always @(posedge axi_lite_clk)
      wready_v <= \$next\wready_v ;
  always @(posedge axi_lite_clk)
      awready_v <= \$next\awready_v ;
  always @(posedge axi_lite_clk)
      rresp_v <= \$next\rresp_v ;
  debug_module debug_module (
    .\$signal (\debug_module_$signal ),
    .\$signal$1 (\debug_module_$signal$1 ),
    .\$signal$2 (\debug_module_$signal$2 ),
    .\$signal$3 (\debug_module_$signal$3 ),
    .\$signal$4 (\debug_module_$signal$4 ),
    .\$signal$5 (\debug_module_$signal$5 ),
    .\$signal$6 (\debug_module_$signal$6 ),
    .\$signal$7 (\debug_module_$signal$7 ),
    .clk(clk),
    .regs_en(debug_module_regs_en),
    .rst(rst)
  );
  always @* begin
    \$next\debug_module_regs_en  = 8'h00;
    \$next\debug_module_regs_en  = debug_en;
  end
  always @* begin
    \$next$signal  = 32'd0;
    \$next$signal  = \debug_module_$signal ;
  end
  always @* begin
    \$next\wstrb_v  = 4'h0;
    \$next\wstrb_v  = 4'h0;
    casez (fsm_state)
      4'h8:
          casez (s_axi_wi__wvalid)
            1'h1:
                \$next\wstrb_v  = s_axi_wi__wstrb;
          endcase
    endcase
  end
  always @* begin
    \$next\ssss_enable  = 1'h0;
    \$next\ssss_enable  = addr_v[10];
  end
  always @* begin
    \$next\hw_enable  = 1'h0;
    \$next\hw_enable  = addr_v[11];
  end
  always @* begin
    \$next\debug_enable  = 1'h0;
    \$next\debug_enable  = addr_v[12];
  end
  always @* begin
    \$next\ssss_index  = 6'h00;
    \$next\ssss_index  = addr_v[5:0];
  end
  always @* begin
    \$next\debug_index  = 3'h0;
    \$next\debug_index  = addr_v[2:0];
  end
  always @* begin
    \$next\hw_index  = 1'h0;
    \$next\hw_index  = addr_v[0];
  end
  always @* begin
    \$next\rp_data64  = 64'h0000000000000000;
    \$next\rp_data64  = \$15 ;
  end
  always @* begin
    \$next\rp_data64_in  = 64'h0000000000000000;
    \$next\rp_data64_in  = 64'h0000000000000000;
    casez (fsm_state)
      4'h8:
          casez (s_axi_wi__wvalid)
            1'h1:
                casez ({ \$25 , \$23 , \$21  })
                  3'bzz1:
                      casez (\$27 )
                        1'h1:
                          begin
                            casez (wstrb_v[0])
                              1'h1:
                                  \$next\rp_data64_in [7:0] = wdata_v[7:0];
                              1'hz:
                                  \$next\rp_data64_in [7:0] = rp_data64[7:0];
                            endcase
                            casez (wstrb_v[1])
                              1'h1:
                                  \$next\rp_data64_in [15:8] = wdata_v[15:8];
                              1'hz:
                                  \$next\rp_data64_in [15:8] = rp_data64[15:8];
                            endcase
                            casez (wstrb_v[2])
                              1'h1:
                                  \$next\rp_data64_in [23:16] = wdata_v[23:16];
                              1'hz:
                                  \$next\rp_data64_in [23:16] = rp_data64[23:16];
                            endcase
                            casez (wstrb_v[3])
                              1'h1:
                                  \$next\rp_data64_in [31:24] = wdata_v[31:24];
                              1'hz:
                                  \$next\rp_data64_in [31:24] = rp_data64[31:24];
                            endcase
                          end
                        1'hz:
                          begin
                            casez (wstrb_v[0])
                              1'h1:
                                  \$next\rp_data64_in [39:32] = \$29 ;
                              1'hz:
                                  \$next\rp_data64_in [39:32] = rp_data64[39:32];
                            endcase
                            casez (wstrb_v[1])
                              1'h1:
                                  \$next\rp_data64_in [47:40] = \$31 ;
                              1'hz:
                                  \$next\rp_data64_in [47:40] = rp_data64[47:40];
                            endcase
                            casez (wstrb_v[2])
                              1'h1:
                                  \$next\rp_data64_in [55:48] = \$33 ;
                              1'hz:
                                  \$next\rp_data64_in [55:48] = rp_data64[55:48];
                            endcase
                            casez (wstrb_v[3])
                              1'h1:
                                  \$next\rp_data64_in [63:56] = \$35 ;
                              1'hz:
                                  \$next\rp_data64_in [63:56] = rp_data64[63:56];
                            endcase
                          end
                      endcase
                endcase
          endcase
    endcase
  end
  always @* begin
    \$next\rvalid_v  = rvalid_v;
    casez (fsm_state)
      4'h0:
          \$next\rvalid_v  = 1'h0;
      4'h5:
          casez (s_axi_ri__rready)
            1'h1:
                \$next\rvalid_v  = 1'h1;
          endcase
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\rvalid_v  = 1'h0;
    endcase
  end
  always @* begin
    \$next$signal$8  = 32'd0;
    \$next$signal$8  = \debug_module_$signal$1 ;
  end
  always @* begin
    \$next\bvalid_v  = bvalid_v;
    casez (fsm_state)
      4'h0:
          \$next\bvalid_v  = 1'h0;
      4'h9:
          casez (s_axi_wi__bready)
            1'h1:
                \$next\bvalid_v  = 1'h1;
          endcase
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\bvalid_v  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      4'h0:
          casez ({ s_axi_wi__awvalid, s_axi_ri__arvalid })
            2'bz1:
                \$next\fsm_state  = 4'h1;
            2'b1z:
                \$next\fsm_state  = 4'h2;
          endcase
      4'h1:
          \$next\fsm_state  = 4'h3;
      4'h3:
          \$next\fsm_state  = 4'h4;
      4'h4:
          \$next\fsm_state  = 4'h5;
      4'h5:
          casez (s_axi_ri__rready)
            1'h1:
                \$next\fsm_state  = 4'h0;
          endcase
      4'h2:
          \$next\fsm_state  = 4'h6;
      4'h6:
          \$next\fsm_state  = 4'h7;
      4'h7:
          \$next\fsm_state  = 4'h8;
      4'h8:
          casez (s_axi_wi__wvalid)
            1'h1:
                \$next\fsm_state  = 4'h9;
          endcase
      4'h9:
          casez (s_axi_wi__bready)
            1'h1:
                \$next\fsm_state  = 4'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 4'h0;
    endcase
  end
  always @* begin
    \$next\addr_v  = addr_v;
    casez (fsm_state)
      4'h1:
          \$next\addr_v  = \$37 ;
      4'h2:
          \$next\addr_v  = \$39 ;
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\addr_v  = 32'd0;
    endcase
  end
  always @* begin
    \$next\rp_addr  = rp_addr;
    casez (fsm_state)
      4'h1:
          \$next\rp_addr  = \$41 [4:0];
      4'h2:
          \$next\rp_addr  = \$44 [4:0];
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\rp_addr  = 5'h00;
    endcase
  end
  always @* begin
    \$next\arready_v  = arready_v;
    casez (fsm_state)
      4'h1:
          \$next\arready_v  = 1'h1;
      4'h3:
          \$next\arready_v  = 1'h0;
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\arready_v  = 1'h0;
    endcase
  end
  always @* begin
    \$next\rdata_v  = rdata_v;
    casez (fsm_state)
      4'h5:
          casez ({ \$55 , \$53 , \$51  })
            3'bzz1:
                casez (\$57 )
                  1'h1:
                      \$next\rdata_v  = rp_data64[31:0];
                  1'hz:
                      \$next\rdata_v  = rp_data64[63:32];
                endcase
            3'bz1z:
                casez (\$59 )
                  1'h1:
                      \$next\rdata_v  = height_width;
                  1'hz:
                      \$next\rdata_v  = \$61 ;
                endcase
            3'b1zz:
                casez (debug_index)
                  3'h0:
                      \$next\rdata_v  = \$signal ;
                  3'h1:
                      \$next\rdata_v  = \$signal$8 ;
                  3'h2:
                      \$next\rdata_v  = \$signal$9 ;
                  3'h3:
                      \$next\rdata_v  = \$signal$10 ;
                  3'h4:
                      \$next\rdata_v  = \$signal$11 ;
                  3'h5:
                      \$next\rdata_v  = \$signal$12 ;
                  3'h6:
                      \$next\rdata_v  = \$signal$13 ;
                  3'hz:
                      \$next\rdata_v  = \$signal$14 ;
                endcase
          endcase
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\rdata_v  = 32'd0;
    endcase
  end
  always @* begin
    \$next\rresp_v  = rresp_v;
    casez (fsm_state)
      4'h5:
          casez ({ \$71 , \$69 , \$67  })
            3'bzz1:
                \$next\rresp_v  = 2'h0;
            3'bz1z:
                casez (\$73 )
                  1'h1:
                      \$next\rresp_v  = 2'h0;
                  1'hz:
                      \$next\rresp_v  = 2'h0;
                endcase
            3'b1zz:
                \$next\rresp_v  = 2'h0;
            3'hz:
                \$next\rresp_v  = 2'h3;
          endcase
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\rresp_v  = 2'h0;
    endcase
  end
  always @* begin
    \$next\awready_v  = awready_v;
    casez (fsm_state)
      4'h2:
          \$next\awready_v  = 1'h1;
      4'h6:
          \$next\awready_v  = 1'h0;
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\awready_v  = 1'h0;
    endcase
  end
  always @* begin
    \$next\wready_v  = wready_v;
    casez (fsm_state)
      4'h8:
          \$next\wready_v  = 1'h1;
      4'h9:
          \$next\wready_v  = 1'h0;
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\wready_v  = 1'h0;
    endcase
  end
  always @* begin
    \$next\wp_addr  = wp_addr;
    casez (fsm_state)
      4'h8:
          casez (s_axi_wi__wvalid)
            1'h1:
                casez ({ \$83 , \$81 , \$79  })
                  3'bzz1:
                      \$next\wp_addr  = \$85 [4:0];
                endcase
          endcase
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\wp_addr  = 5'h00;
    endcase
  end
  always @* begin
    \$next$signal$9  = 32'd0;
    \$next$signal$9  = \debug_module_$signal$2 ;
  end
  always @* begin
    \$next\wp_data  = wp_data;
    casez (fsm_state)
      4'h8:
          casez (s_axi_wi__wvalid)
            1'h1:
                casez ({ \$96 , \$94 , \$92  })
                  3'bzz1:
                      \$next\wp_data  = rp_data64_in[32:0];
                endcase
          endcase
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\wp_data  = 33'h000000000;
    endcase
  end
  always @* begin
    \$next\wp_en  = wp_en;
    casez (fsm_state)
      4'h8:
          casez (s_axi_wi__wvalid)
            1'h1:
                casez ({ \$106 , \$104 , \$102  })
                  3'bzz1:
                      \$next\wp_en  = 1'h1;
                endcase
          endcase
      4'h9:
          \$next\wp_en  = 1'h0;
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\wp_en  = 1'h0;
    endcase
  end
  always @* begin
    \$next\bresp_v  = bresp_v;
    casez (fsm_state)
      4'h8:
          casez (s_axi_wi__wvalid)
            1'h1:
                casez ({ \$116 , \$114 , \$112  })
                  3'bzz1:
                      \$next\bresp_v  = 2'h0;
                  3'bz1z:
                      \$next\bresp_v  = 2'h0;
                  3'b1zz:
                      \$next\bresp_v  = 2'h2;
                  3'hz:
                      \$next\bresp_v  = 2'h3;
                endcase
          endcase
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\bresp_v  = 2'h0;
    endcase
  end
  always @* begin
    \$next\height_width  = height_width;
    casez (fsm_state)
      4'h8:
          casez (s_axi_wi__wvalid)
            1'h1:
                casez ({ \$126 , \$124 , \$122  })
                  3'bzz1:
                      /* empty */;
                  3'bz1z:
                    begin
                      casez (wstrb_v[0])
                        1'h1:
                            casez (\$128 )
                              1'h1:
                                  \$next\height_width [7:0] = wdata_v[7:0];
                            endcase
                      endcase
                      casez (wstrb_v[1])
                        1'h1:
                            casez (\$130 )
                              1'h1:
                                  \$next\height_width [15:8] = wdata_v[15:8];
                            endcase
                      endcase
                      casez (wstrb_v[2])
                        1'h1:
                            casez (\$132 )
                              1'h1:
                                  \$next\height_width [23:16] = wdata_v[23:16];
                            endcase
                      endcase
                      casez (wstrb_v[3])
                        1'h1:
                            casez (\$134 )
                              1'h1:
                                  \$next\height_width [31:24] = wdata_v[31:24];
                            endcase
                      endcase
                    end
                endcase
          endcase
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\height_width  = 32'd0;
    endcase
  end
  always @* begin
    \$next\allowed_cycles  = allowed_cycles;
    casez (fsm_state)
      4'h8:
          casez (s_axi_wi__wvalid)
            1'h1:
                casez ({ \$144 , \$142 , \$140  })
                  3'bzz1:
                      /* empty */;
                  3'bz1z:
                    begin
                      casez (wstrb_v[0])
                        1'h1:
                            casez (\$146 )
                              1'h1:
                                  /* empty */;
                              1'hz:
                                  \$next\allowed_cycles [7:0] = wdata_v[7:0];
                            endcase
                      endcase
                      casez (wstrb_v[1])
                        1'h1:
                            casez (\$148 )
                              1'h1:
                                  /* empty */;
                              1'hz:
                                  \$next\allowed_cycles [15:8] = wdata_v[15:8];
                            endcase
                      endcase
                      casez (wstrb_v[2])
                        1'h1:
                            casez (\$150 )
                              1'h1:
                                  /* empty */;
                              1'hz:
                                  \$next\allowed_cycles [23:16] = wdata_v[23:16];
                            endcase
                      endcase
                    end
                endcase
          endcase
    endcase
    casez (axi_lite_rst)
      1'h1:
          \$next\allowed_cycles  = 24'h000000;
    endcase
  end
  always @* begin
    \$next\s_axi_ro__arready  = 1'h0;
    \$next\s_axi_ro__arready  = arready_v;
  end
  always @* begin
    \$next\s_axi_ro__rvalid  = 1'h0;
    \$next\s_axi_ro__rvalid  = rvalid_v;
  end
  always @* begin
    \$next\s_axi_wo__awready  = 1'h0;
    \$next\s_axi_wo__awready  = awready_v;
  end
  always @* begin
    \$next\s_axi_wo__wready  = 1'h0;
    \$next\s_axi_wo__wready  = wready_v;
  end
  always @* begin
    \$next\s_axi_wo__bvalid  = 1'h0;
    \$next\s_axi_wo__bvalid  = bvalid_v;
  end
  always @* begin
    \$next$signal$10  = 32'd0;
    \$next$signal$10  = \debug_module_$signal$3 ;
  end
  always @* begin
    \$next\s_axi_ro__rdata  = 32'd0;
    \$next\s_axi_ro__rdata  = rdata_v;
  end
  always @* begin
    \$next\s_axi_ro__rresp  = 2'h0;
    \$next\s_axi_ro__rresp  = rresp_v;
  end
  always @* begin
    \$next\s_axi_wo__bresp  = 2'h0;
    \$next\s_axi_wo__bresp  = bresp_v;
  end
  always @* begin
    \$next\height  = 16'h0000;
    \$next\height  = height_width[15:0];
  end
  always @* begin
    \$next\width  = 16'h0000;
    \$next\width  = height_width[31:16];
  end
  always @* begin
    \$next$signal$11  = 32'd0;
    \$next$signal$11  = \debug_module_$signal$4 ;
  end
  always @* begin
    \$next$signal$12  = 32'd0;
    \$next$signal$12  = \debug_module_$signal$5 ;
  end
  always @* begin
    \$next$signal$13  = 32'd0;
    \$next$signal$13  = \debug_module_$signal$6 ;
  end
  always @* begin
    \$next$signal$14  = 32'd0;
    \$next$signal$14  = \debug_module_$signal$7 ;
  end
  always @* begin
    \$next\wdata_v  = 32'd0;
    \$next\wdata_v  = 32'd0;
    casez (fsm_state)
      4'h8:
          casez (s_axi_wi__wvalid)
            1'h1:
                \$next\wdata_v  = s_axi_wi__wdata;
          endcase
    endcase
  end
  assign \$41  = \$42 ;
  assign \$44  = \$45 ;
  assign \$85  = \$86 ;
  assign width = \$next\width ;
  assign height = \$next\height ;
  assign s_axi_wo__bresp = \$next\s_axi_wo__bresp ;
  assign s_axi_ro__rresp = \$next\s_axi_ro__rresp ;
  assign s_axi_ro__rdata = \$next\s_axi_ro__rdata ;
  assign s_axi_wo__bvalid = \$next\s_axi_wo__bvalid ;
  assign s_axi_wo__wready = \$next\s_axi_wo__wready ;
  assign s_axi_wo__awready = \$next\s_axi_wo__awready ;
  assign s_axi_ro__rvalid = \$next\s_axi_ro__rvalid ;
  assign s_axi_ro__arready = \$next\s_axi_ro__arready ;
  assign rp_data64_in = \$next\rp_data64_in ;
  assign rp_data64 = \$next\rp_data64 ;
  assign hw_index = \$next\hw_index ;
  assign debug_index = \$next\debug_index ;
  assign ssss_index = \$next\ssss_index ;
  assign debug_enable = \$next\debug_enable ;
  assign hw_enable = \$next\hw_enable ;
  assign ssss_enable = \$next\ssss_enable ;
  assign wstrb_v = \$next\wstrb_v ;
  assign wdata_v = \$next\wdata_v ;
  assign \$signal$14  = \$next$signal$14 ;
  assign \$signal$13  = \$next$signal$13 ;
  assign \$signal$12  = \$next$signal$12 ;
  assign \$signal$11  = \$next$signal$11 ;
  assign \$signal$10  = \$next$signal$10 ;
  assign \$signal$9  = \$next$signal$9 ;
  assign \$signal$8  = \$next$signal$8 ;
  assign \$signal  = \$next$signal ;
  assign debug_module_regs_en = \$next\debug_module_regs_en ;
endmodule

