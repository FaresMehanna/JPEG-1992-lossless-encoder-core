/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top.fifo" *)
(* generator = "nMigen" *)
module fifo(we, replace, re, rst, clk, writable, readable, dout, level, din);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [5:0] \$19 ;
  wire \$2 ;
  wire [5:0] \$20 ;
  wire \$22 ;
  wire [5:0] \$24 ;
  wire [5:0] \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$31 ;
  wire \$33 ;
  wire \$34 ;
  wire \$37 ;
  wire [6:0] \$39 ;
  wire \$4 ;
  wire [6:0] \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$52 ;
  wire [6:0] \$54 ;
  wire [6:0] \$55 ;
  wire [5:0] \$6 ;
  wire [5:0] \$7 ;
  wire \$9 ;
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [4:0] \$next\consume ;
  (* src = "nmigen/lib/fifo.py:69" *)
  reg [64:0] \$next\dout ;
  (* src = "nmigen/lib/fifo.py:138" *)
  reg [5:0] \$next\level ;
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [4:0] \$next\produce ;
  (* src = "nmigen/hdl/mem.py:81" *)
  reg [4:0] \$next\rdport_storage_r_addr ;
  (* src = "nmigen/lib/fifo.py:70" *)
  reg \$next\readable ;
  (* src = "nmigen/lib/fifo.py:66" *)
  reg \$next\writable ;
  (* src = "nmigen/hdl/mem.py:146" *)
  reg [4:0] \$next\wrport_storage_w_addr ;
  (* src = "nmigen/hdl/mem.py:148" *)
  reg [64:0] \$next\wrport_storage_w_data ;
  (* src = "nmigen/hdl/mem.py:150" *)
  reg \$next\wrport_storage_w_en ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 5'h00 *)
  (* src = "nmigen/lib/fifo.py:156" *)
  reg [4:0] consume = 5'h00;
  (* src = "nmigen/lib/fifo.py:65" *)
  input [64:0] din;
  (* src = "nmigen/lib/fifo.py:69" *)
  output [64:0] dout;
  (* init = 6'h00 *)
  (* src = "nmigen/lib/fifo.py:138" *)
  output [5:0] level;
  reg [5:0] level = 6'h00;
  (* init = 5'h00 *)
  (* src = "nmigen/lib/fifo.py:155" *)
  reg [4:0] produce = 5'h00;
  (* src = "nmigen/hdl/mem.py:81" *)
  wire [4:0] rdport_storage_r_addr;
  (* src = "nmigen/hdl/mem.py:83" *)
  wire [64:0] rdport_storage_r_data;
  (* src = "nmigen/lib/fifo.py:71" *)
  input re;
  (* src = "nmigen/lib/fifo.py:70" *)
  output readable;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "nmigen/lib/fifo.py:67" *)
  input we;
  (* src = "nmigen/lib/fifo.py:66" *)
  output writable;
  (* src = "nmigen/hdl/mem.py:146" *)
  wire [4:0] wrport_storage_w_addr;
  (* src = "nmigen/hdl/mem.py:148" *)
  wire [64:0] wrport_storage_w_data;
  (* src = "nmigen/hdl/mem.py:150" *)
  wire wrport_storage_w_en;
  assign \$9  = writable | (* src = "nmigen/lib/fifo.py:161" *) replace;
  assign \$11  = we & (* src = "nmigen/lib/fifo.py:161" *) \$9 ;
  assign \$13  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$15  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$17  = \$13  & (* src = "nmigen/lib/fifo.py:149" *) \$15 ;
  assign \$20  = produce + (* src = "nmigen/lib/fifo.py:93" *) 1'h1;
  assign \$22  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$25  = consume + (* src = "nmigen/lib/fifo.py:93" *) 1'h1;
  assign \$27  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$2  = level != (* src = "nmigen/lib/fifo.py:144" *) 6'h20;
  assign \$29  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$31  = \$27  & (* src = "nmigen/lib/fifo.py:149" *) \$29 ;
  assign \$34  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$33  = ~ (* src = "nmigen/lib/fifo.py:177" *) \$34 ;
  assign \$37  = \$31  & (* src = "nmigen/lib/fifo.py:177" *) \$33 ;
  assign \$40  = level + (* src = "nmigen/lib/fifo.py:178" *) 1'h1;
  assign \$42  = readable & (* src = "nmigen/lib/fifo.py:148" *) re;
  assign \$45  = writable & (* src = "nmigen/lib/fifo.py:149" *) we;
  assign \$47  = ~ (* src = "nmigen/lib/fifo.py:149" *) replace;
  assign \$4  = level != (* src = "nmigen/lib/fifo.py:145" *) 1'h0;
  assign \$49  = \$45  & (* src = "nmigen/lib/fifo.py:149" *) \$47 ;
  assign \$44  = ~ (* src = "nmigen/lib/fifo.py:179" *) \$49 ;
  assign \$52  = \$42  & (* src = "nmigen/lib/fifo.py:179" *) \$44 ;
  assign \$55  = level - (* src = "nmigen/lib/fifo.py:180" *) 1'h1;
  assign \$7  = produce - (* src = "nmigen/lib/fifo.py:100" *) 1'h1;
  always @(posedge clk)
      level <= \$next\level ;
  always @(posedge clk)
      consume <= \$next\consume ;
  always @(posedge clk)
      produce <= \$next\produce ;
  reg [64:0] storage [31:0];
  initial begin
    storage[0] = 65'h00000000000000000;
    storage[1] = 65'h00000000000000000;
    storage[2] = 65'h00000000000000000;
    storage[3] = 65'h00000000000000000;
    storage[4] = 65'h00000000000000000;
    storage[5] = 65'h00000000000000000;
    storage[6] = 65'h00000000000000000;
    storage[7] = 65'h00000000000000000;
    storage[8] = 65'h00000000000000000;
    storage[9] = 65'h00000000000000000;
    storage[10] = 65'h00000000000000000;
    storage[11] = 65'h00000000000000000;
    storage[12] = 65'h00000000000000000;
    storage[13] = 65'h00000000000000000;
    storage[14] = 65'h00000000000000000;
    storage[15] = 65'h00000000000000000;
    storage[16] = 65'h00000000000000000;
    storage[17] = 65'h00000000000000000;
    storage[18] = 65'h00000000000000000;
    storage[19] = 65'h00000000000000000;
    storage[20] = 65'h00000000000000000;
    storage[21] = 65'h00000000000000000;
    storage[22] = 65'h00000000000000000;
    storage[23] = 65'h00000000000000000;
    storage[24] = 65'h00000000000000000;
    storage[25] = 65'h00000000000000000;
    storage[26] = 65'h00000000000000000;
    storage[27] = 65'h00000000000000000;
    storage[28] = 65'h00000000000000000;
    storage[29] = 65'h00000000000000000;
    storage[30] = 65'h00000000000000000;
    storage[31] = 65'h00000000000000000;
  end
  always @(posedge clk) begin
    if (\$next\wrport_storage_w_en ) storage[\$next\wrport_storage_w_addr ] <= \$next\wrport_storage_w_data ;
  end
  assign rdport_storage_r_data = storage[\$next\rdport_storage_r_addr ];
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = \$2 ;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = \$4 ;
  end
  always @* begin
    \$next\wrport_storage_w_addr  = 5'h00;
    \$next\wrport_storage_w_addr  = produce;
    casez (replace)
      1'h1:
          \$next\wrport_storage_w_addr  = \$6 [4:0];
    endcase
  end
  always @* begin
    \$next\wrport_storage_w_data  = 65'h00000000000000000;
    \$next\wrport_storage_w_data  = din;
  end
  always @* begin
    \$next\wrport_storage_w_en  = 1'h0;
    \$next\wrport_storage_w_en  = \$11 ;
  end
  always @* begin
    \$next\produce  = produce;
    casez (\$17 )
      1'h1:
          \$next\produce  = \$19 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\produce  = 5'h00;
    endcase
  end
  always @* begin
    \$next\rdport_storage_r_addr  = 5'h00;
    \$next\rdport_storage_r_addr  = consume;
  end
  always @* begin
    \$next\dout  = 65'h00000000000000000;
    \$next\dout  = rdport_storage_r_data;
  end
  always @* begin
    \$next\consume  = consume;
    casez (\$22 )
      1'h1:
          \$next\consume  = \$24 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\consume  = 5'h00;
    endcase
  end
  always @* begin
    \$next\level  = level;
    casez (\$37 )
      1'h1:
          \$next\level  = \$39 [5:0];
    endcase
    casez (\$52 )
      1'h1:
          \$next\level  = \$54 [5:0];
    endcase
    casez (rst)
      1'h1:
          \$next\level  = 6'h00;
    endcase
  end
  assign \$6  = \$7 ;
  assign \$19  = \$20 ;
  assign \$24  = \$25 ;
  assign \$39  = \$40 ;
  assign \$54  = \$55 ;
  assign dout = \$next\dout ;
  assign rdport_storage_r_addr = \$next\rdport_storage_r_addr ;
  assign wrport_storage_w_en = \$next\wrport_storage_w_en ;
  assign wrport_storage_w_data = \$next\wrport_storage_w_data ;
  assign wrport_storage_w_addr = \$next\wrport_storage_w_addr ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
endmodule

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(end_in, data_in, read, replace, rst, clk, data_out, end_out, valid_out, writable, readable, writable16, readable16, valid_in);
  wire \$1 ;
  wire \$3 ;
  (* src = "axihp_fifo.py:11" *)
  reg [63:0] \$next\data_out ;
  (* src = "axihp_fifo.py:14" *)
  reg \$next\end_out ;
  (* src = "nmigen/lib/fifo.py:65" *)
  reg [64:0] \$next\fifo_din ;
  (* src = "nmigen/lib/fifo.py:71" *)
  reg \$next\fifo_re ;
  (* src = "nmigen/lib/fifo.py:67" *)
  reg \$next\fifo_we ;
  (* src = "axihp_fifo.py:22" *)
  reg \$next\readable ;
  (* src = "axihp_fifo.py:25" *)
  reg \$next\readable16 ;
  (* src = "axihp_fifo.py:17" *)
  reg \$next\valid_out ;
  (* src = "axihp_fifo.py:21" *)
  reg \$next\writable ;
  (* src = "axihp_fifo.py:24" *)
  reg \$next\writable16 ;
  (* src = "nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "axihp_fifo.py:10" *)
  input [63:0] data_in;
  (* src = "axihp_fifo.py:11" *)
  output [63:0] data_out;
  (* src = "axihp_fifo.py:13" *)
  input end_in;
  (* src = "axihp_fifo.py:14" *)
  output end_out;
  (* src = "nmigen/lib/fifo.py:65" *)
  wire [64:0] fifo_din;
  (* src = "nmigen/lib/fifo.py:69" *)
  wire [64:0] fifo_dout;
  (* src = "nmigen/lib/fifo.py:138" *)
  wire [5:0] fifo_level;
  (* src = "nmigen/lib/fifo.py:71" *)
  wire fifo_re;
  (* src = "nmigen/lib/fifo.py:70" *)
  wire fifo_readable;
  (* src = "nmigen/lib/fifo.py:67" *)
  wire fifo_we;
  (* src = "nmigen/lib/fifo.py:66" *)
  wire fifo_writable;
  (* src = "axihp_fifo.py:19" *)
  input read;
  (* src = "axihp_fifo.py:22" *)
  output readable;
  (* src = "axihp_fifo.py:25" *)
  output readable16;
  (* src = "nmigen/lib/fifo.py:139" *)
  input replace;
  (* src = "nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "axihp_fifo.py:16" *)
  input valid_in;
  (* src = "axihp_fifo.py:17" *)
  output valid_out;
  (* src = "axihp_fifo.py:21" *)
  output writable;
  (* src = "axihp_fifo.py:24" *)
  output writable16;
  assign \$1  = fifo_level >= (* src = "axihp_fifo.py:54" *) 5'h10;
  assign \$3  = fifo_level <= (* src = "axihp_fifo.py:55" *) 4'hc;
  fifo fifo (
    .clk(clk),
    .din(fifo_din),
    .dout(fifo_dout),
    .level(fifo_level),
    .re(fifo_re),
    .readable(fifo_readable),
    .replace(replace),
    .rst(rst),
    .we(fifo_we),
    .writable(fifo_writable)
  );
  always @* begin
    \$next\fifo_we  = 1'h0;
    \$next\fifo_we  = valid_in;
  end
  always @* begin
    \$next\fifo_din  = 65'h00000000000000000;
    \$next\fifo_din  = { data_in, end_in };
  end
  always @* begin
    \$next\fifo_re  = 1'h0;
    \$next\fifo_re  = read;
  end
  always @* begin
    \$next\writable  = 1'h0;
    \$next\writable  = fifo_writable;
  end
  always @* begin
    \$next\readable  = 1'h0;
    \$next\readable  = fifo_readable;
  end
  always @* begin
    \$next\readable16  = 1'h0;
    \$next\readable16  = \$1 ;
  end
  always @* begin
    \$next\writable16  = 1'h0;
    \$next\writable16  = \$3 ;
  end
  always @* begin
    \$next\data_out  = 64'h0000000000000000;
    \$next\data_out  = fifo_dout[64:1];
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = fifo_dout[0];
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = fifo_readable;
  end
  assign valid_out = \$next\valid_out ;
  assign end_out = \$next\end_out ;
  assign data_out = \$next\data_out ;
  assign writable16 = \$next\writable16 ;
  assign readable16 = \$next\readable16 ;
  assign readable = \$next\readable ;
  assign writable = \$next\writable ;
  assign fifo_re = \$next\fifo_re ;
  assign fifo_din = \$next\fifo_din ;
  assign fifo_we = \$next\fifo_we ;
endmodule

