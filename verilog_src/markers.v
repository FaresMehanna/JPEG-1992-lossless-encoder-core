/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(valid_in, end_in, force_end_in, data_in, rst, clk, valid_out, o_busy, data_out, end_out, i_busy);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire [4:0] \$25 ;
  wire [4:0] \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire [4:0] \$32 ;
  wire [4:0] \$33 ;
  wire \$35 ;
  wire [4:0] \$37 ;
  wire [4:0] \$38 ;
  wire \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "markers.py:61" *)
  reg [3:0] \$next\counter ;
  (* src = "markers.py:38" *)
  reg [15:0] \$next\data_out ;
  (* src = "markers.py:75" *)
  reg \$next\end_cond ;
  (* src = "markers.py:46" *)
  reg \$next\end_out ;
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [2:0] \$next\fsm_state ;
  (* src = "markers.py:48" *)
  reg \$next\o_busy ;
  (* src = "markers.py:42" *)
  reg \$next\valid_out ;
  (* src = "nmigen/hdl/ir.py:329" *)
  input clk;
  (* init = 4'h0 *)
  (* src = "markers.py:61" *)
  reg [3:0] counter = 4'h0;
  (* src = "markers.py:35" *)
  input [15:0] data_in;
  (* src = "markers.py:38" *)
  output [15:0] data_out;
  (* init = 1'h0 *)
  (* src = "markers.py:75" *)
  reg end_cond = 1'h0;
  (* src = "markers.py:44" *)
  input end_in;
  (* src = "markers.py:46" *)
  output end_out;
  (* src = "markers.py:45" *)
  input force_end_in;
  (* init = 3'h0 *)
  (* src = "nmigen/hdl/dsl.py:244" *)
  reg [2:0] fsm_state = 3'h0;
  (* src = "markers.py:49" *)
  input i_busy;
  (* src = "markers.py:48" *)
  output o_busy;
  (* src = "nmigen/hdl/ir.py:329" *)
  input rst;
  (* src = "markers.py:41" *)
  input valid_in;
  (* src = "markers.py:42" *)
  output valid_out;
  assign \$9  = i_busy == (* src = "markers.py:141" *) 1'h0;
  assign \$11  = counter == (* src = "markers.py:144" *) 1'h1;
  assign \$13  = i_busy == (* src = "markers.py:76" *) 1'h0;
  assign \$15  = valid_in == (* src = "markers.py:76" *) 1'h1;
  assign \$17  = \$13  & (* src = "markers.py:76" *) \$15 ;
  assign \$1  = i_busy == (* src = "markers.py:109" *) 1'h0;
  assign \$19  = end_in == (* src = "markers.py:76" *) 1'h1;
  assign \$21  = \$17  & (* src = "markers.py:76" *) \$19 ;
  assign \$23  = i_busy == (* src = "markers.py:109" *) 1'h0;
  assign \$26  = counter - (* src = "markers.py:110" *) 1'h1;
  assign \$28  = counter == (* src = "markers.py:112" *) 1'h0;
  assign \$30  = i_busy == (* src = "markers.py:127" *) 1'h0;
  assign \$33  = counter - (* src = "markers.py:128" *) 1'h1;
  assign \$35  = i_busy == (* src = "markers.py:141" *) 1'h0;
  assign \$38  = counter - (* src = "markers.py:142" *) 1'h1;
  assign \$3  = counter == (* src = "markers.py:112" *) 1'h0;
  assign \$40  = i_busy == (* src = "markers.py:109" *) 1'h0;
  assign \$42  = counter == (* src = "markers.py:112" *) 1'h0;
  assign \$44  = i_busy == (* src = "markers.py:127" *) 1'h0;
  assign \$46  = counter == (* src = "markers.py:130" *) 1'h1;
  assign \$48  = i_busy == (* src = "markers.py:141" *) 1'h0;
  assign \$50  = counter == (* src = "markers.py:144" *) 1'h1;
  assign \$52  = i_busy == (* src = "markers.py:109" *) 1'h0;
  assign \$54  = counter == (* src = "markers.py:112" *) 1'h0;
  assign \$5  = i_busy == (* src = "markers.py:127" *) 1'h0;
  assign \$7  = counter == (* src = "markers.py:130" *) 1'h1;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      counter <= \$next\counter ;
  always @(posedge clk)
      end_cond <= \$next\end_cond ;
  always @* begin
    \$next\o_busy  = 1'h0;
    \$next\o_busy  = 1'h1;
    casez (fsm_state)
      3'h2:
          casez ({ force_end_in, end_cond })
            2'bz1:
                /* empty */;
            2'b1z:
                /* empty */;
            2'hz:
                \$next\o_busy  = i_busy;
          endcase
    endcase
  end
  always @* begin
    \$next\valid_out  = 1'h0;
    \$next\valid_out  = 1'h0;
    casez (fsm_state)
      3'h1:
        begin
          \$next\valid_out  = 1'h1;
          casez (\$1 )
            1'h1:
                casez (\$3 )
                  1'h1:
                      \$next\valid_out  = 1'h0;
                endcase
          endcase
        end
      3'h3:
          \$next\valid_out  = 1'h1;
      3'h5:
          \$next\valid_out  = 1'h1;
      3'h2:
          casez ({ force_end_in, end_cond })
            2'bz1:
                /* empty */;
            2'b1z:
                /* empty */;
            2'hz:
                \$next\valid_out  = valid_in;
          endcase
      3'h4:
          \$next\valid_out  = 1'h1;
      3'h6:
          \$next\valid_out  = 1'h1;
    endcase
  end
  always @* begin
    \$next\end_out  = 1'h0;
    \$next\end_out  = 1'h0;
    casez (fsm_state)
      3'h3:
          casez (\$5 )
            1'h1:
                casez (\$7 )
                  1'h1:
                      \$next\end_out  = 1'h1;
                endcase
          endcase
      3'h5:
          casez (\$9 )
            1'h1:
                casez (\$11 )
                  1'h1:
                      \$next\end_out  = 1'h1;
                endcase
          endcase
      3'h4:
          \$next\end_out  = 1'h1;
      3'h6:
          \$next\end_out  = 1'h1;
    endcase
  end
  always @* begin
    \$next\end_cond  = end_cond;
    \$next\end_cond  = \$21 ;
    casez (rst)
      1'h1:
          \$next\end_cond  = 1'h0;
    endcase
  end
  always @* begin
    \$next\counter  = counter;
    casez (fsm_state)
      3'h0:
          \$next\counter  = 4'h8;
      3'h1:
          casez (\$23 )
            1'h1:
              begin
                \$next\counter  = \$25 [3:0];
                casez (\$28 )
                  1'h1:
                      \$next\counter  = 4'h8;
                endcase
              end
          endcase
      3'h3:
          casez (\$30 )
            1'h1:
                \$next\counter  = \$32 [3:0];
          endcase
      3'h5:
          casez (\$35 )
            1'h1:
                \$next\counter  = \$37 [3:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\counter  = 4'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez (valid_in)
            1'h1:
                \$next\fsm_state  = 3'h1;
          endcase
      3'h1:
          casez (\$40 )
            1'h1:
                casez (\$42 )
                  1'h1:
                      \$next\fsm_state  = 3'h2;
                endcase
          endcase
      3'h3:
          casez (\$44 )
            1'h1:
                casez (\$46 )
                  1'h1:
                      \$next\fsm_state  = 3'h4;
                endcase
          endcase
      3'h5:
          casez (\$48 )
            1'h1:
                casez (\$50 )
                  1'h1:
                      \$next\fsm_state  = 3'h6;
                endcase
          endcase
      3'h2:
          casez ({ force_end_in, end_cond })
            2'bz1:
                \$next\fsm_state  = 3'h3;
            2'b1z:
                \$next\fsm_state  = 3'h5;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 3'h0;
    endcase
  end
  always @* begin
    \$next\data_out  = 16'h0000;
    casez (fsm_state)
      3'h1:
        begin
          \$next\data_out  = 16'hffff;
          casez (\$52 )
            1'h1:
                casez (\$54 )
                  1'h1:
                      \$next\data_out  = 16'h0000;
                endcase
          endcase
        end
      3'h3:
          \$next\data_out  = 16'hffff;
      3'h5:
          \$next\data_out  = 16'hfffe;
      3'h2:
          casez ({ force_end_in, end_cond })
            2'bz1:
                /* empty */;
            2'b1z:
                /* empty */;
            2'hz:
                \$next\data_out  = data_in;
          endcase
      3'h4:
          \$next\data_out  = 16'hffff;
      3'h6:
          \$next\data_out  = 16'hfffe;
    endcase
  end
  assign \$25  = \$26 ;
  assign \$32  = \$33 ;
  assign \$37  = \$38 ;
  assign data_out = \$next\data_out ;
  assign end_out = \$next\end_out ;
  assign valid_out = \$next\valid_out ;
  assign o_busy = \$next\o_busy ;
endmodule

