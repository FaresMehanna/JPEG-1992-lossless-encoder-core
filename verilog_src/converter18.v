/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(close_full, enc_out_ctr, enc_out, out_end, zeros, rst, clk, latch_output, enc_in, enc_in_ctr, in_end, valid_in, valid_out);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire [7:0] \$55 ;
  wire [7:0] \$56 ;
  wire [7:0] \$58 ;
  wire [7:0] \$59 ;
  wire [7:0] \$61 ;
  wire [7:0] \$62 ;
  wire [7:0] \$64 ;
  wire [7:0] \$65 ;
  wire [7:0] \$67 ;
  wire [7:0] \$68 ;
  wire \$7 ;
  wire [7:0] \$70 ;
  wire [7:0] \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$9 ;
  (* src = "./migen_src/converter18.py:19" *)
  reg [17:0] \$next\enc_in ;
  (* src = "./migen_src/converter18.py:20" *)
  reg [4:0] \$next\enc_in_ctr ;
  (* src = "./migen_src/converter18.py:34" *)
  reg [107:0] \$next\enc_out_latch ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [2:0] \$next\fsm_state ;
  (* src = "./migen_src/converter18.py:21" *)
  reg \$next\in_end ;
  (* src = "./migen_src/converter18.py:12" *)
  reg \$next\latch_output ;
  (* src = "./migen_src/converter18.py:35" *)
  reg \$next\out_end_latch ;
  (* src = "./migen_src/converter18.py:22" *)
  reg \$next\valid_in ;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input clk;
  (* src = "./migen_src/converter18.py:23" *)
  input close_full;
  (* init = 18'h00000 *)
  (* src = "./migen_src/converter18.py:19" *)
  output [17:0] enc_in;
  reg [17:0] enc_in = 18'h00000;
  (* init = 5'h00 *)
  (* src = "./migen_src/converter18.py:20" *)
  output [4:0] enc_in_ctr;
  reg [4:0] enc_in_ctr = 5'h00;
  (* src = "./migen_src/converter18.py:13" *)
  input [123:0] enc_out;
  (* src = "./migen_src/converter18.py:14" *)
  input [6:0] enc_out_ctr;
  (* init = 108'h000000000000000000000000000 *)
  (* src = "./migen_src/converter18.py:34" *)
  reg [107:0] enc_out_latch = 108'h000000000000000000000000000;
  (* init = 3'h0 *)
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/dsl.py:244" *)
  reg [2:0] fsm_state = 3'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter18.py:21" *)
  output in_end;
  reg in_end = 1'h0;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter18.py:12" *)
  output latch_output;
  reg latch_output = 1'h0;
  (* src = "./migen_src/converter18.py:15" *)
  input out_end;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter18.py:35" *)
  reg out_end_latch = 1'h0;
  (* src = "/anaconda3/envs/py36/lib/python3.6/site-packages/nmigen/hdl/ir.py:329" *)
  input rst;
  (* init = 1'h0 *)
  (* src = "./migen_src/converter18.py:22" *)
  output valid_in;
  reg valid_in = 1'h0;
  (* src = "./migen_src/converter18.py:16" *)
  input valid_out;
  (* src = "./migen_src/converter18.py:37" *)
  input [15:0] zeros;
  assign \$9  = close_full == (* src = "./migen_src/converter18.py:43" *) 1'h0;
  assign \$11  = valid_out & (* src = "./migen_src/converter18.py:43" *) \$9 ;
  assign \$13  = enc_out_ctr <= (* src = "./migen_src/converter18.py:53" *) 5'h12;
  assign \$15  = enc_out_ctr <= (* src = "./migen_src/converter18.py:76" *) 6'h24;
  assign \$17  = enc_out_ctr <= (* src = "./migen_src/converter18.py:82" *) 6'h36;
  assign \$1  = enc_out_ctr <= (* src = "./migen_src/converter18.py:53" *) 5'h12;
  assign \$19  = enc_out_ctr <= (* src = "./migen_src/converter18.py:88" *) 7'h48;
  assign \$21  = enc_out_ctr <= (* src = "./migen_src/converter18.py:94" *) 7'h5a;
  assign \$23  = enc_out_ctr <= (* src = "./migen_src/converter18.py:100" *) 7'h6c;
  assign \$25  = enc_out_ctr <= (* src = "./migen_src/converter18.py:106" *) 7'h7f;
  assign \$27  = enc_out_ctr <= (* src = "./migen_src/converter18.py:53" *) 5'h12;
  assign \$29  = enc_out_ctr <= (* src = "./migen_src/converter18.py:76" *) 6'h24;
  assign \$31  = enc_out_ctr <= (* src = "./migen_src/converter18.py:82" *) 6'h36;
  assign \$33  = enc_out_ctr <= (* src = "./migen_src/converter18.py:88" *) 7'h48;
  assign \$35  = enc_out_ctr <= (* src = "./migen_src/converter18.py:94" *) 7'h5a;
  assign \$37  = enc_out_ctr <= (* src = "./migen_src/converter18.py:100" *) 7'h6c;
  assign \$3  = close_full == (* src = "./migen_src/converter18.py:43" *) 1'h0;
  assign \$39  = enc_out_ctr <= (* src = "./migen_src/converter18.py:106" *) 7'h7f;
  assign \$41  = enc_out_ctr <= (* src = "./migen_src/converter18.py:53" *) 5'h12;
  assign \$43  = enc_out_ctr <= (* src = "./migen_src/converter18.py:76" *) 6'h24;
  assign \$45  = enc_out_ctr <= (* src = "./migen_src/converter18.py:82" *) 6'h36;
  assign \$47  = enc_out_ctr <= (* src = "./migen_src/converter18.py:88" *) 7'h48;
  assign \$49  = enc_out_ctr <= (* src = "./migen_src/converter18.py:94" *) 7'h5a;
  assign \$51  = enc_out_ctr <= (* src = "./migen_src/converter18.py:100" *) 7'h6c;
  assign \$53  = enc_out_ctr <= (* src = "./migen_src/converter18.py:106" *) 7'h7f;
  assign \$56  = enc_out_ctr - (* src = "./migen_src/converter18.py:79" *) 5'h12;
  assign \$5  = valid_out & (* src = "./migen_src/converter18.py:43" *) \$3 ;
  assign \$59  = enc_out_ctr - (* src = "./migen_src/converter18.py:85" *) 6'h24;
  assign \$62  = enc_out_ctr - (* src = "./migen_src/converter18.py:91" *) 6'h36;
  assign \$65  = enc_out_ctr - (* src = "./migen_src/converter18.py:97" *) 7'h48;
  assign \$68  = enc_out_ctr - (* src = "./migen_src/converter18.py:103" *) 7'h5a;
  assign \$71  = enc_out_ctr - (* src = "./migen_src/converter18.py:109" *) 7'h6c;
  assign \$73  = enc_out_ctr <= (* src = "./migen_src/converter18.py:53" *) 5'h12;
  assign \$75  = enc_out_ctr <= (* src = "./migen_src/converter18.py:53" *) 5'h12;
  assign \$77  = enc_out_ctr <= (* src = "./migen_src/converter18.py:53" *) 5'h12;
  assign \$7  = enc_out_ctr <= (* src = "./migen_src/converter18.py:53" *) 5'h12;
  always @(posedge clk)
      out_end_latch <= \$next\out_end_latch ;
  always @(posedge clk)
      enc_out_latch <= \$next\enc_out_latch ;
  always @(posedge clk)
      in_end <= \$next\in_end ;
  always @(posedge clk)
      enc_in_ctr <= \$next\enc_in_ctr ;
  always @(posedge clk)
      enc_in <= \$next\enc_in ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      latch_output <= \$next\latch_output ;
  always @(posedge clk)
      valid_in <= \$next\valid_in ;
  always @* begin
    \$next\valid_in  = valid_in;
    casez (fsm_state)
      3'h0:
          \$next\valid_in  = 1'h0;
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$1 )
                  1'h1:
                      \$next\valid_in  = 1'h1;
                  1'hz:
                      \$next\valid_in  = 1'h1;
                endcase
            1'hz:
                \$next\valid_in  = 1'h0;
          endcase
      3'h2:
          \$next\valid_in  = 1'h1;
      3'h3:
          \$next\valid_in  = 1'h1;
      3'h4:
          \$next\valid_in  = 1'h1;
      3'h5:
          \$next\valid_in  = 1'h1;
      3'h6:
          \$next\valid_in  = 1'h1;
      3'h7:
          \$next\valid_in  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \$next\valid_in  = 1'h0;
    endcase
  end
  always @* begin
    \$next\latch_output  = latch_output;
    casez (fsm_state)
      3'h0:
          casez (\$5 )
            1'h1:
                \$next\latch_output  = 1'h1;
          endcase
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$7 )
                  1'h1:
                      casez (close_full)
                        1'h1:
                            \$next\latch_output  = 1'h0;
                      endcase
                  1'hz:
                      \$next\latch_output  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\latch_output  = 1'h0;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      3'h0:
          casez (\$11 )
            1'h1:
                \$next\fsm_state  = 3'h1;
          endcase
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$13 )
                  1'h1:
                      casez (close_full)
                        1'h1:
                            \$next\fsm_state  = 3'h0;
                      endcase
                  1'hz:
                      casez ({ \$25 , \$23 , \$21 , \$19 , \$17 , \$15  })
                        6'bzzzzz1:
                            \$next\fsm_state  = 3'h2;
                        6'bzzzz1z:
                            \$next\fsm_state  = 3'h3;
                        6'bzzz1zz:
                            \$next\fsm_state  = 3'h4;
                        6'bzz1zzz:
                            \$next\fsm_state  = 3'h5;
                        6'bz1zzzz:
                            \$next\fsm_state  = 3'h6;
                        6'b1zzzzz:
                            \$next\fsm_state  = 3'h7;
                      endcase
                endcase
          endcase
      3'h2:
          \$next\fsm_state  = 3'h0;
      3'h3:
          \$next\fsm_state  = 3'h2;
      3'h4:
          \$next\fsm_state  = 3'h3;
      3'h5:
          \$next\fsm_state  = 3'h4;
      3'h6:
          \$next\fsm_state  = 3'h5;
      3'h7:
          \$next\fsm_state  = 3'h6;
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 3'h0;
    endcase
  end
  always @* begin
    \$next\enc_in  = enc_in;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$27 )
                  1'h1:
                      \$next\enc_in  = enc_out[17:0];
                  1'hz:
                      casez ({ \$39 , \$37 , \$35 , \$33 , \$31 , \$29  })
                        6'bzzzzz1:
                            \$next\enc_in  = enc_out[35:18];
                        6'bzzzz1z:
                            \$next\enc_in  = enc_out[53:36];
                        6'bzzz1zz:
                            \$next\enc_in  = enc_out[71:54];
                        6'bzz1zzz:
                            \$next\enc_in  = enc_out[89:72];
                        6'bz1zzzz:
                            \$next\enc_in  = enc_out[107:90];
                        6'b1zzzzz:
                            \$next\enc_in  = { zeros[1:0], enc_out[123:108] };
                      endcase
                endcase
          endcase
      3'h2:
          \$next\enc_in  = enc_out_latch[17:0];
      3'h3:
          \$next\enc_in  = enc_out_latch[35:18];
      3'h4:
          \$next\enc_in  = enc_out_latch[53:36];
      3'h5:
          \$next\enc_in  = enc_out_latch[71:54];
      3'h6:
          \$next\enc_in  = enc_out_latch[89:72];
      3'h7:
          \$next\enc_in  = enc_out_latch[107:90];
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in  = 18'h00000;
    endcase
  end
  always @* begin
    \$next\enc_in_ctr  = enc_in_ctr;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$41 )
                  1'h1:
                      \$next\enc_in_ctr  = enc_out_ctr[4:0];
                  1'hz:
                    begin
                      \$next\enc_in_ctr  = 5'h12;
                      casez ({ \$53 , \$51 , \$49 , \$47 , \$45 , \$43  })
                        6'bzzzzz1:
                            \$next\enc_in_ctr  = \$55 [4:0];
                        6'bzzzz1z:
                            \$next\enc_in_ctr  = \$58 [4:0];
                        6'bzzz1zz:
                            \$next\enc_in_ctr  = \$61 [4:0];
                        6'bzz1zzz:
                            \$next\enc_in_ctr  = \$64 [4:0];
                        6'bz1zzzz:
                            \$next\enc_in_ctr  = \$67 [4:0];
                        6'b1zzzzz:
                            \$next\enc_in_ctr  = \$70 [4:0];
                      endcase
                    end
                endcase
          endcase
      3'h2:
          \$next\enc_in_ctr  = 5'h12;
      3'h3:
          \$next\enc_in_ctr  = 5'h12;
      3'h4:
          \$next\enc_in_ctr  = 5'h12;
      3'h5:
          \$next\enc_in_ctr  = 5'h12;
      3'h6:
          \$next\enc_in_ctr  = 5'h12;
      3'h7:
          \$next\enc_in_ctr  = 5'h12;
    endcase
    casez (rst)
      1'h1:
          \$next\enc_in_ctr  = 5'h00;
    endcase
  end
  always @* begin
    \$next\in_end  = in_end;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$73 )
                  1'h1:
                      \$next\in_end  = out_end;
                  1'hz:
                      \$next\in_end  = 1'h0;
                endcase
          endcase
      3'h2:
          \$next\in_end  = out_end_latch;
      3'h3:
          \$next\in_end  = 1'h0;
      3'h4:
          \$next\in_end  = 1'h0;
      3'h5:
          \$next\in_end  = 1'h0;
      3'h6:
          \$next\in_end  = 1'h0;
      3'h7:
          \$next\in_end  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\in_end  = 1'h0;
    endcase
  end
  always @* begin
    \$next\enc_out_latch  = enc_out_latch;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$75 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\enc_out_latch  = enc_out[107:0];
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\enc_out_latch  = 108'h000000000000000000000000000;
    endcase
  end
  always @* begin
    \$next\out_end_latch  = out_end_latch;
    casez (fsm_state)
      3'h1:
          casez (valid_out)
            1'h1:
                casez (\$77 )
                  1'h1:
                      /* empty */;
                  1'hz:
                      \$next\out_end_latch  = out_end;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\out_end_latch  = 1'h0;
    endcase
  end
  assign \$55  = \$56 ;
  assign \$58  = \$59 ;
  assign \$61  = \$62 ;
  assign \$64  = \$65 ;
  assign \$67  = \$68 ;
  assign \$70  = \$71 ;
endmodule

