/* Generated by Yosys 0.8+     369 (git sha1 ea0e0722, clang 10.0.1 -fPIC -Os) */

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(valid_in, data_in, i_busy, full_rst, valid_out, o_busy, data_out, full_clk);
  wire \$1 ;
  wire \$101 ;
  wire \$103 ;
  wire \$105 ;
  wire \$107 ;
  wire \$109 ;
  wire \$11 ;
  wire \$111 ;
  wire \$113 ;
  wire \$115 ;
  wire \$117 ;
  wire \$119 ;
  wire \$121 ;
  wire \$123 ;
  wire \$125 ;
  wire \$127 ;
  wire \$129 ;
  wire \$13 ;
  wire \$131 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$9 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  (* src = "clk_domains.py:5" *)
  reg \$next\clk ;
  (* src = "b64_b32_2.py:42" *)
  reg [23:0] \$next\data_out ;
  (* src = "b64_b32_2.py:65" *)
  reg \$next\half_latched ;
  (* src = "b64_b32_2.py:48" *)
  reg \$next\o_busy ;
  (* src = "b64_b32_2.py:62" *)
  reg [63:0] \$next\reg ;
  (* src = "b64_b32_2.py:64" *)
  reg \$next\reg_tobe_invalid ;
  (* src = "b64_b32_2.py:63" *)
  reg \$next\reg_valid ;
  (* src = "b64_b32_2.py:46" *)
  reg \$next\valid_out ;
  (* src = "b64_b32_2.py:68" *)
  reg \$next\wire_obusy ;
  (* src = "clk_domains.py:5" *)
  wire clk;
  (* src = "b64_b32_2.py:39" *)
  input [63:0] data_in;
  (* init = 24'h000000 *)
  (* src = "b64_b32_2.py:42" *)
  output [23:0] data_out;
  reg [23:0] data_out = 24'h000000;
  (* src = "clk_domains.py:4" *)
  input full_clk;
  (* src = "clk_domains.py:4" *)
  input full_rst;
  (* init = 1'h0 *)
  (* src = "b64_b32_2.py:65" *)
  reg half_latched = 1'h0;
  (* src = "b64_b32_2.py:49" *)
  input i_busy;
  (* init = 1'h1 *)
  (* src = "b64_b32_2.py:48" *)
  output o_busy;
  reg o_busy = 1'h1;
  (* init = 64'h0000000000000000 *)
  (* src = "b64_b32_2.py:62" *)
  reg [63:0] \reg  = 64'h0000000000000000;
  (* src = "b64_b32_2.py:64" *)
  wire reg_tobe_invalid;
  (* init = 1'h0 *)
  (* src = "b64_b32_2.py:63" *)
  reg reg_valid = 1'h0;
  (* src = "b64_b32_2.py:45" *)
  input valid_in;
  (* init = 1'h0 *)
  (* src = "b64_b32_2.py:46" *)
  output valid_out;
  reg valid_out = 1'h0;
  (* src = "b64_b32_2.py:68" *)
  wire wire_obusy;
  assign \$9  = \$5  & (* src = "b64_b32_2.py:100" *) \$7 ;
  assign \$99  = half_latched == (* src = "b64_b32_2.py:101" *) 1'h1;
  assign \$101  = reg_valid == (* src = "b64_b32_2.py:125" *) 1'h0;
  assign \$103  = i_busy == (* src = "b64_b32_2.py:125" *) 1'h0;
  assign \$105  = \$101  & (* src = "b64_b32_2.py:125" *) \$103 ;
  assign \$107  = valid_out == (* src = "b64_b32_2.py:125" *) 1'h1;
  assign \$109  = \$105  & (* src = "b64_b32_2.py:125" *) \$107 ;
  assign \$111  = reg_valid == (* src = "b64_b32_2.py:91" *) 1'h1;
  assign \$113  = valid_out == (* src = "b64_b32_2.py:91" *) 1'h0;
  assign \$115  = \$111  & (* src = "b64_b32_2.py:91" *) \$113 ;
  assign \$117  = half_latched == (* src = "b64_b32_2.py:91" *) 1'h0;
  assign \$11  = half_latched == (* src = "b64_b32_2.py:101" *) 1'h1;
  assign \$119  = \$115  & (* src = "b64_b32_2.py:91" *) \$117 ;
  assign \$121  = reg_valid == (* src = "b64_b32_2.py:100" *) 1'h1;
  assign \$123  = i_busy == (* src = "b64_b32_2.py:100" *) 1'h0;
  assign \$125  = \$121  & (* src = "b64_b32_2.py:100" *) \$123 ;
  assign \$127  = valid_out == (* src = "b64_b32_2.py:100" *) 1'h1;
  assign \$129  = \$125  & (* src = "b64_b32_2.py:100" *) \$127 ;
  assign \$131  = half_latched == (* src = "b64_b32_2.py:101" *) 1'h1;
  assign \$13  = valid_in == (* src = "b64_b32_2.py:80" *) 1'h1;
  assign \$15  = reg_valid == (* src = "b64_b32_2.py:80" *) 1'h0;
  assign \$17  = reg_tobe_invalid == (* src = "b64_b32_2.py:80" *) 1'h1;
  assign \$1  = reg_valid == (* src = "b64_b32_2.py:100" *) 1'h1;
  assign \$19  = \$15  | (* src = "b64_b32_2.py:80" *) \$17 ;
  assign \$21  = \$13  & (* src = "b64_b32_2.py:80" *) \$19 ;
  assign \$23  = valid_in == (* src = "b64_b32_2.py:80" *) 1'h1;
  assign \$25  = reg_valid == (* src = "b64_b32_2.py:80" *) 1'h0;
  assign \$27  = reg_tobe_invalid == (* src = "b64_b32_2.py:80" *) 1'h1;
  assign \$29  = \$25  | (* src = "b64_b32_2.py:80" *) \$27 ;
  assign \$31  = \$23  & (* src = "b64_b32_2.py:80" *) \$29 ;
  assign \$33  = valid_in == (* src = "b64_b32_2.py:80" *) 1'h1;
  assign \$35  = reg_valid == (* src = "b64_b32_2.py:80" *) 1'h0;
  assign \$37  = reg_tobe_invalid == (* src = "b64_b32_2.py:80" *) 1'h1;
  assign \$3  = i_busy == (* src = "b64_b32_2.py:100" *) 1'h0;
  assign \$39  = \$35  | (* src = "b64_b32_2.py:80" *) \$37 ;
  assign \$41  = \$33  & (* src = "b64_b32_2.py:80" *) \$39 ;
  assign \$43  = reg_valid == (* src = "b64_b32_2.py:100" *) 1'h1;
  assign \$45  = i_busy == (* src = "b64_b32_2.py:100" *) 1'h0;
  assign \$47  = \$43  & (* src = "b64_b32_2.py:100" *) \$45 ;
  assign \$49  = valid_out == (* src = "b64_b32_2.py:100" *) 1'h1;
  assign \$51  = \$47  & (* src = "b64_b32_2.py:100" *) \$49 ;
  assign \$53  = half_latched == (* src = "b64_b32_2.py:101" *) 1'h1;
  assign \$55  = valid_in == (* src = "b64_b32_2.py:112" *) 1'h0;
  assign \$57  = reg_valid == (* src = "b64_b32_2.py:91" *) 1'h1;
  assign \$5  = \$1  & (* src = "b64_b32_2.py:100" *) \$3 ;
  assign \$59  = valid_out == (* src = "b64_b32_2.py:91" *) 1'h0;
  assign \$61  = \$57  & (* src = "b64_b32_2.py:91" *) \$59 ;
  assign \$63  = half_latched == (* src = "b64_b32_2.py:91" *) 1'h0;
  assign \$65  = \$61  & (* src = "b64_b32_2.py:91" *) \$63 ;
  assign \$67  = reg_valid == (* src = "b64_b32_2.py:100" *) 1'h1;
  assign \$69  = i_busy == (* src = "b64_b32_2.py:100" *) 1'h0;
  assign \$71  = \$67  & (* src = "b64_b32_2.py:100" *) \$69 ;
  assign \$73  = valid_out == (* src = "b64_b32_2.py:100" *) 1'h1;
  assign \$75  = \$71  & (* src = "b64_b32_2.py:100" *) \$73 ;
  assign \$77  = half_latched == (* src = "b64_b32_2.py:101" *) 1'h1;
  assign \$7  = valid_out == (* src = "b64_b32_2.py:100" *) 1'h1;
  assign \$79  = reg_valid == (* src = "b64_b32_2.py:91" *) 1'h1;
  assign \$81  = valid_out == (* src = "b64_b32_2.py:91" *) 1'h0;
  assign \$83  = \$79  & (* src = "b64_b32_2.py:91" *) \$81 ;
  assign \$85  = half_latched == (* src = "b64_b32_2.py:91" *) 1'h0;
  assign \$87  = \$83  & (* src = "b64_b32_2.py:91" *) \$85 ;
  assign \$89  = reg_valid == (* src = "b64_b32_2.py:100" *) 1'h1;
  assign \$91  = i_busy == (* src = "b64_b32_2.py:100" *) 1'h0;
  assign \$93  = \$89  & (* src = "b64_b32_2.py:100" *) \$91 ;
  assign \$95  = valid_out == (* src = "b64_b32_2.py:100" *) 1'h1;
  assign \$97  = \$93  & (* src = "b64_b32_2.py:100" *) \$95 ;
  always @(posedge full_clk)
      half_latched <= \$next\half_latched ;
  always @(posedge full_clk)
      valid_out <= \$next\valid_out ;
  always @(posedge full_clk)
      data_out <= \$next\data_out ;
  always @(posedge full_clk)
      reg_valid <= \$next\reg_valid ;
  always @(posedge full_clk)
      \reg  <= \$next\reg ;
  always @(posedge full_clk)
      o_busy <= \$next\o_busy ;
  always @* begin
    \$next\clk  = 1'h0;
    \$next\clk  = full_clk;
  end
  always @* begin
    \$next\o_busy  = o_busy;
    \$next\o_busy  = wire_obusy;
    casez (full_rst)
      1'h1:
          \$next\o_busy  = 1'h1;
    endcase
  end
  always @* begin
    \$next\reg_tobe_invalid  = 1'h0;
    \$next\reg_tobe_invalid  = 1'h0;
    casez (\$9 )
      1'h1:
          casez (\$11 )
            1'h1:
                \$next\reg_tobe_invalid  = 1'h1;
          endcase
    endcase
  end
  always @* begin
    \$next\wire_obusy  = 1'h0;
    \$next\wire_obusy  = 1'h1;
    casez (\$21 )
      1'h1:
          \$next\wire_obusy  = 1'h0;
    endcase
  end
  always @* begin
    \$next\reg  = \reg ;
    casez (\$31 )
      1'h1:
          \$next\reg  = data_in;
    endcase
    casez (full_rst)
      1'h1:
          \$next\reg  = 64'h0000000000000000;
    endcase
  end
  always @* begin
    \$next\reg_valid  = reg_valid;
    casez (\$41 )
      1'h1:
          \$next\reg_valid  = 1'h1;
    endcase
    casez (\$51 )
      1'h1:
          casez (\$53 )
            1'h1:
                casez (\$55 )
                  1'h1:
                      \$next\reg_valid  = 1'h0;
                endcase
          endcase
    endcase
    casez (full_rst)
      1'h1:
          \$next\reg_valid  = 1'h0;
    endcase
  end
  always @* begin
    \$next\data_out  = data_out;
    casez (\$65 )
      1'h1:
          \$next\data_out  = \reg [63:40];
    endcase
    casez (\$75 )
      1'h1:
          casez (\$77 )
            1'h1:
                \$next\data_out  = \reg [39:16];
            1'hz:
                \$next\data_out  = \reg [63:40];
          endcase
    endcase
    casez (full_rst)
      1'h1:
          \$next\data_out  = 24'h000000;
    endcase
  end
  always @* begin
    \$next\valid_out  = valid_out;
    casez (\$87 )
      1'h1:
          \$next\valid_out  = 1'h1;
    endcase
    casez (\$97 )
      1'h1:
          casez (\$99 )
            1'h1:
                \$next\valid_out  = 1'h1;
            1'hz:
                \$next\valid_out  = 1'h1;
          endcase
    endcase
    casez (\$109 )
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
    casez (full_rst)
      1'h1:
          \$next\valid_out  = 1'h0;
    endcase
  end
  always @* begin
    \$next\half_latched  = half_latched;
    casez (\$119 )
      1'h1:
          \$next\half_latched  = 1'h1;
    endcase
    casez (\$129 )
      1'h1:
          casez (\$131 )
            1'h1:
                \$next\half_latched  = 1'h0;
            1'hz:
                \$next\half_latched  = 1'h1;
          endcase
    endcase
    casez (full_rst)
      1'h1:
          \$next\half_latched  = 1'h0;
    endcase
  end
  assign wire_obusy = \$next\wire_obusy ;
  assign reg_tobe_invalid = \$next\reg_tobe_invalid ;
  assign clk = \$next\clk ;
endmodule

